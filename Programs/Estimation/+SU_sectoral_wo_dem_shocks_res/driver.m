%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'SU_sectoral_wo_dem_shocks_res';
M_.dynare_version = '6.3';
oo_.dynare_version = '6.3';
options_.dynare_version = '6.3';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(7,1);
M_.exo_names_tex = cell(7,1);
M_.exo_names_long = cell(7,1);
M_.exo_names(1) = {'e_g'};
M_.exo_names_tex(1) = {'{e_g}'};
M_.exo_names_long(1) = {'Labor-augmenting-technology growth shock'};
M_.exo_names(2) = {'e_Z'};
M_.exo_names_tex(2) = {'{e_Z}'};
M_.exo_names_long(2) = {'TFP shock'};
M_.exo_names(3) = {'e_ZI'};
M_.exo_names_tex(3) = {'{e_{ZI}}'};
M_.exo_names_long(3) = {'Investment-specific tech shock'};
M_.exo_names(4) = {'e_N'};
M_.exo_names_tex(4) = {'{e_N}'};
M_.exo_names_long(4) = {'Labor supply shock'};
M_.exo_names(5) = {'e_b'};
M_.exo_names_tex(5) = {'{e_b}'};
M_.exo_names_long(5) = {'Discount factor shock'};
M_.exo_names(6) = {'e_muC'};
M_.exo_names_tex(6) = {'{e_{muC}}'};
M_.exo_names_long(6) = {'Wage markup shock: C'};
M_.exo_names(7) = {'e_muI'};
M_.exo_names_tex(7) = {'{e_{muI}}'};
M_.exo_names_long(7) = {'Wage markup shock: I'};
M_.endo_names = cell(100,1);
M_.endo_names_tex = cell(100,1);
M_.endo_names_long = cell(100,1);
M_.endo_names(1) = {'Y'};
M_.endo_names_tex(1) = {'{Y}'};
M_.endo_names_long(1) = {'output'};
M_.endo_names(2) = {'C'};
M_.endo_names_tex(2) = {'{C}'};
M_.endo_names_long(2) = {'consumption'};
M_.endo_names(3) = {'Y_mc'};
M_.endo_names_tex(3) = {'{Y_{mc}}'};
M_.endo_names_long(3) = {'consumption non-durable goods'};
M_.endo_names(4) = {'Y_sc'};
M_.endo_names_tex(4) = {'Y_{sc}}'};
M_.endo_names_long(4) = {'consumption services'};
M_.endo_names(5) = {'SR'};
M_.endo_names_tex(5) = {'{SR}'};
M_.endo_names_long(5) = {'aggregate share-weighted Solow residual'};
M_.endo_names(6) = {'I'};
M_.endo_names_tex(6) = {'{I}'};
M_.endo_names_long(6) = {'investment'};
M_.endo_names(7) = {'I_mc'};
M_.endo_names_tex(7) = {'{I_C}'};
M_.endo_names_long(7) = {'investment:mc'};
M_.endo_names(8) = {'I_sc'};
M_.endo_names_tex(8) = {'{I_C}'};
M_.endo_names_long(8) = {'investment:sc'};
M_.endo_names(9) = {'I_I'};
M_.endo_names_tex(9) = {'{I_I}'};
M_.endo_names_long(9) = {'investment:I'};
M_.endo_names(10) = {'K'};
M_.endo_names_tex(10) = {'{K}'};
M_.endo_names_long(10) = {'Capital'};
M_.endo_names(11) = {'K_mc'};
M_.endo_names_tex(11) = {'{K_{mc}}'};
M_.endo_names_long(11) = {'Capital:mc'};
M_.endo_names(12) = {'K_sc'};
M_.endo_names_tex(12) = {'{K_{sc}}'};
M_.endo_names_long(12) = {'Capital:sc'};
M_.endo_names(13) = {'K_I'};
M_.endo_names_tex(13) = {'{K_I}'};
M_.endo_names_long(13) = {'Capital:I'};
M_.endo_names(14) = {'N'};
M_.endo_names_tex(14) = {'{N}'};
M_.endo_names_long(14) = {'Hours'};
M_.endo_names(15) = {'N_mc'};
M_.endo_names_tex(15) = {'{N_{mc}}'};
M_.endo_names_long(15) = {'Hours:mc'};
M_.endo_names(16) = {'N_sc'};
M_.endo_names_tex(16) = {'{N_{sc}}'};
M_.endo_names_long(16) = {'Hours:sc'};
M_.endo_names(17) = {'N_C'};
M_.endo_names_tex(17) = {'{N_C}'};
M_.endo_names_long(17) = {'Hours:C'};
M_.endo_names(18) = {'N_I'};
M_.endo_names_tex(18) = {'{N_I}'};
M_.endo_names_long(18) = {'Hours:I'};
M_.endo_names(19) = {'N_comp'};
M_.endo_names_tex(19) = {'{N}'};
M_.endo_names_long(19) = {'Labor CES aggregate'};
M_.endo_names(20) = {'Z_C'};
M_.endo_names_tex(20) = {'{Z_{C}}'};
M_.endo_names_long(20) = {'Tech:mc'};
M_.endo_names(21) = {'u_ZI'};
M_.endo_names_tex(21) = {'u\_ZI'};
M_.endo_names_long(21) = {'u_ZI'};
M_.endo_names(22) = {'Z_I'};
M_.endo_names_tex(22) = {'{Z_I}'};
M_.endo_names_long(22) = {'Tech:I'};
M_.endo_names(23) = {'theta_N'};
M_.endo_names_tex(23) = {'{\theta_N}'};
M_.endo_names_long(23) = {'Labor disutility'};
M_.endo_names(24) = {'theta_b'};
M_.endo_names_tex(24) = {'{\theta_b}'};
M_.endo_names_long(24) = {'Discount factor shock'};
M_.endo_names(25) = {'mu_C'};
M_.endo_names_tex(25) = {'{\mu_C}'};
M_.endo_names_long(25) = {'mu_C'};
M_.endo_names(26) = {'mu_I'};
M_.endo_names_tex(26) = {'\mu_I}'};
M_.endo_names_long(26) = {'mu_I'};
M_.endo_names(27) = {'R_mc'};
M_.endo_names_tex(27) = {'{R_{mc}}'};
M_.endo_names_long(27) = {'Capital rental rate:mc'};
M_.endo_names(28) = {'R_sc'};
M_.endo_names_tex(28) = {'{R_{sc}}'};
M_.endo_names_long(28) = {'Capital rental rate:sc'};
M_.endo_names(29) = {'R_I'};
M_.endo_names_tex(29) = {'{R_I}'};
M_.endo_names_long(29) = {'Capital rental rate:I'};
M_.endo_names(30) = {'W_C'};
M_.endo_names_tex(30) = {'{W_C}'};
M_.endo_names_long(30) = {'Real wage:C'};
M_.endo_names(31) = {'W_I'};
M_.endo_names_tex(31) = {'{W_I}'};
M_.endo_names_long(31) = {'Real wage:I'};
M_.endo_names(32) = {'W'};
M_.endo_names_tex(32) = {'{W}'};
M_.endo_names_long(32) = {'Real wage'};
M_.endo_names(33) = {'h_mc'};
M_.endo_names_tex(33) = {'{h_mc}'};
M_.endo_names_long(33) = {'Capital utilization rate:mc'};
M_.endo_names(34) = {'h_sc'};
M_.endo_names_tex(34) = {'{h_sc}'};
M_.endo_names_long(34) = {'Capital utilization rate:sc'};
M_.endo_names(35) = {'h_I'};
M_.endo_names_tex(35) = {'{h_I}'};
M_.endo_names_long(35) = {'Capital utilization rate:I'};
M_.endo_names(36) = {'h'};
M_.endo_names_tex(36) = {'h'};
M_.endo_names_long(36) = {'Capital utilization rate: average'};
M_.endo_names(37) = {'delta_mc'};
M_.endo_names_tex(37) = {'{\delta_{mc}}'};
M_.endo_names_long(37) = {'Capital depreciation rate:mc'};
M_.endo_names(38) = {'delta_sc'};
M_.endo_names_tex(38) = {'{\delta_{sc}}'};
M_.endo_names_long(38) = {'Capital depreciation rate:sc'};
M_.endo_names(39) = {'delta_I'};
M_.endo_names_tex(39) = {'{\delta_I}'};
M_.endo_names_long(39) = {'Capital depreciation rate:I'};
M_.endo_names(40) = {'delta_mc_pr'};
M_.endo_names_tex(40) = {'{\delta_{mc,pr}'};
M_.endo_names_long(40) = {'Capital depreciation rate derivative:mc'};
M_.endo_names(41) = {'delta_sc_pr'};
M_.endo_names_tex(41) = {'{\delta_{sc,pr}}'};
M_.endo_names_long(41) = {'Capital depreciation rate derivative:sc'};
M_.endo_names(42) = {'delta_I_pr'};
M_.endo_names_tex(42) = {'{\delta_{I,pr}}'};
M_.endo_names_long(42) = {'Capital depreciation rate derivative:I'};
M_.endo_names(43) = {'Smc'};
M_.endo_names_tex(43) = {'S'};
M_.endo_names_long(43) = {'Investment adjustment cost:mc'};
M_.endo_names(44) = {'Ssc'};
M_.endo_names_tex(44) = {'S'};
M_.endo_names_long(44) = {'Investment adjustment cost:sc'};
M_.endo_names(45) = {'Si'};
M_.endo_names_tex(45) = {'S'};
M_.endo_names_long(45) = {'Investment adjustment cost:I'};
M_.endo_names(46) = {'Smc_pr'};
M_.endo_names_tex(46) = {'S_pr'};
M_.endo_names_long(46) = {'Derivative investment adjustment cost:mc'};
M_.endo_names(47) = {'Ssc_pr'};
M_.endo_names_tex(47) = {'S_pr'};
M_.endo_names_long(47) = {'Derivative investment adjustment cost:sc'};
M_.endo_names(48) = {'Si_pr'};
M_.endo_names_tex(48) = {'S_pr'};
M_.endo_names_long(48) = {'Derivative investment adjustment cost:I'};
M_.endo_names(49) = {'D'};
M_.endo_names_tex(49) = {'{D}'};
M_.endo_names_long(49) = {'Shopping effort'};
M_.endo_names(50) = {'D_mc'};
M_.endo_names_tex(50) = {'{D_{mc}}'};
M_.endo_names_long(50) = {'Shopping effort:mc'};
M_.endo_names(51) = {'D_sc'};
M_.endo_names_tex(51) = {'{D_{sc}}'};
M_.endo_names_long(51) = {'Shopping effort:sc'};
M_.endo_names(52) = {'D_I'};
M_.endo_names_tex(52) = {'{D_I}'};
M_.endo_names_long(52) = {'Shopping effort:I'};
M_.endo_names(53) = {'Gam'};
M_.endo_names_tex(53) = {'{\Gamma}'};
M_.endo_names_long(53) = {'Composite utility term'};
M_.endo_names(54) = {'p_mc'};
M_.endo_names_tex(54) = {'{p_{mc}}'};
M_.endo_names_long(54) = {'Relative non-durable price'};
M_.endo_names(55) = {'p_sc'};
M_.endo_names_tex(55) = {'{p_{sc}}'};
M_.endo_names_long(55) = {'Relative service price'};
M_.endo_names(56) = {'p_I'};
M_.endo_names_tex(56) = {'{p_I}'};
M_.endo_names_long(56) = {'Relative investment price'};
M_.endo_names(57) = {'lam'};
M_.endo_names_tex(57) = {'{\lambda}'};
M_.endo_names_long(57) = {'Marginal utility of wealth'};
M_.endo_names(58) = {'Q_mc'};
M_.endo_names_tex(58) = {'{Q}'};
M_.endo_names_long(58) = {'Relative price of capital:mc'};
M_.endo_names(59) = {'Q_sc'};
M_.endo_names_tex(59) = {'{Q}'};
M_.endo_names_long(59) = {'Relative price of capital:sc'};
M_.endo_names(60) = {'Q_I'};
M_.endo_names_tex(60) = {'{Q}'};
M_.endo_names_long(60) = {'Relative price of capital:I'};
M_.endo_names(61) = {'x_mc'};
M_.endo_names_tex(61) = {'{x}'};
M_.endo_names_long(61) = {'Growth rate of investment:mc'};
M_.endo_names(62) = {'x_sc'};
M_.endo_names_tex(62) = {'{x}'};
M_.endo_names_long(62) = {'Growth rate of investment:sc'};
M_.endo_names(63) = {'x_I'};
M_.endo_names_tex(63) = {'{x}'};
M_.endo_names_long(63) = {'Growth rate of investment:I'};
M_.endo_names(64) = {'log_SR'};
M_.endo_names_tex(64) = {'log\_SR'};
M_.endo_names_long(64) = {'Solow residual'};
M_.endo_names(65) = {'util'};
M_.endo_names_tex(65) = {'{util}'};
M_.endo_names_long(65) = {'Capacity utilization'};
M_.endo_names(66) = {'util_ND'};
M_.endo_names_tex(66) = {'{util_{ND}}'};
M_.endo_names_long(66) = {'Capacity utilization:ND'};
M_.endo_names(67) = {'util_sc'};
M_.endo_names_tex(67) = {'{util_{sc}}'};
M_.endo_names_long(67) = {'Capacity utilization:sc'};
M_.endo_names(68) = {'util_D'};
M_.endo_names_tex(68) = {'{util_D}'};
M_.endo_names_long(68) = {'Capacity utilization:D'};
M_.endo_names(69) = {'g'};
M_.endo_names_tex(69) = {'{g}'};
M_.endo_names_long(69) = {'Growth rate of stochastic trend'};
M_.endo_names(70) = {'log_Y'};
M_.endo_names_tex(70) = {'log\_Y'};
M_.endo_names_long(70) = {'log_Y'};
M_.endo_names(71) = {'log_C'};
M_.endo_names_tex(71) = {'log\_C'};
M_.endo_names_long(71) = {'log_C'};
M_.endo_names(72) = {'log_I'};
M_.endo_names_tex(72) = {'log\_I'};
M_.endo_names_long(72) = {'log_I'};
M_.endo_names(73) = {'log_N'};
M_.endo_names_tex(73) = {'log\_N'};
M_.endo_names_long(73) = {'log_N'};
M_.endo_names(74) = {'log_NC'};
M_.endo_names_tex(74) = {'log\_NC'};
M_.endo_names_long(74) = {'log_NC'};
M_.endo_names(75) = {'log_NI'};
M_.endo_names_tex(75) = {'log\_NI'};
M_.endo_names_long(75) = {'log_NI'};
M_.endo_names(76) = {'log_K'};
M_.endo_names_tex(76) = {'log\_K'};
M_.endo_names_long(76) = {'log_K'};
M_.endo_names(77) = {'log_Y_N'};
M_.endo_names_tex(77) = {'log\_Y\_N'};
M_.endo_names_long(77) = {'log_Y_N'};
M_.endo_names(78) = {'log_D'};
M_.endo_names_tex(78) = {'log\_D'};
M_.endo_names_long(78) = {'log_D'};
M_.endo_names(79) = {'log_h'};
M_.endo_names_tex(79) = {'log\_h'};
M_.endo_names_long(79) = {'log_h'};
M_.endo_names(80) = {'log_p_I'};
M_.endo_names_tex(80) = {'log\_p\_I'};
M_.endo_names_long(80) = {'log_p_I'};
M_.endo_names(81) = {'log_util'};
M_.endo_names_tex(81) = {'log\_util'};
M_.endo_names_long(81) = {'log_util'};
M_.endo_names(82) = {'log_util_ND'};
M_.endo_names_tex(82) = {'log\_util\_ND'};
M_.endo_names_long(82) = {'log_util_ND'};
M_.endo_names(83) = {'log_util_D'};
M_.endo_names_tex(83) = {'log\_util\_D'};
M_.endo_names_long(83) = {'log_util_D'};
M_.endo_names(84) = {'log_W'};
M_.endo_names_tex(84) = {'log\_W'};
M_.endo_names_long(84) = {'log_W'};
M_.endo_names(85) = {'C_obs'};
M_.endo_names_tex(85) = {'C\_obs'};
M_.endo_names_long(85) = {'C_obs'};
M_.endo_names(86) = {'I_obs'};
M_.endo_names_tex(86) = {'I\_obs'};
M_.endo_names_long(86) = {'I_obs'};
M_.endo_names(87) = {'Y_obs'};
M_.endo_names_tex(87) = {'Y\_obs'};
M_.endo_names_long(87) = {'Y_obs'};
M_.endo_names(88) = {'SR_obs'};
M_.endo_names_tex(88) = {'SR\_obs'};
M_.endo_names_long(88) = {'SR_obs'};
M_.endo_names(89) = {'Y_N_obs'};
M_.endo_names_tex(89) = {'Y\_N\_obs'};
M_.endo_names_long(89) = {'Y_N_obs'};
M_.endo_names(90) = {'p_I_obs'};
M_.endo_names_tex(90) = {'p\_I\_obs'};
M_.endo_names_long(90) = {'p_I_obs'};
M_.endo_names(91) = {'N_obs'};
M_.endo_names_tex(91) = {'N\_obs'};
M_.endo_names_long(91) = {'N_obs'};
M_.endo_names(92) = {'NC_obs'};
M_.endo_names_tex(92) = {'NC\_obs'};
M_.endo_names_long(92) = {'NC_obs'};
M_.endo_names(93) = {'NI_obs'};
M_.endo_names_tex(93) = {'NI\_obs'};
M_.endo_names_long(93) = {'NI_obs'};
M_.endo_names(94) = {'util_ND_obs'};
M_.endo_names_tex(94) = {'util\_ND\_obs'};
M_.endo_names_long(94) = {'util_ND_obs'};
M_.endo_names(95) = {'util_D_obs'};
M_.endo_names_tex(95) = {'util\_D\_obs'};
M_.endo_names_long(95) = {'util_D_obs'};
M_.endo_names(96) = {'util_obs'};
M_.endo_names_tex(96) = {'util\_obs'};
M_.endo_names_long(96) = {'util_obs'};
M_.endo_names(97) = {'w_obs'};
M_.endo_names_tex(97) = {'w\_obs'};
M_.endo_names_long(97) = {'w_obs'};
M_.endo_names(98) = {'D_obs'};
M_.endo_names_tex(98) = {'D\_obs'};
M_.endo_names_long(98) = {'D_obs'};
M_.endo_names(99) = {'h_obs'};
M_.endo_names_tex(99) = {'h\_obs'};
M_.endo_names_long(99) = {'h_obs'};
M_.endo_names(100) = {'K_obs'};
M_.endo_names_tex(100) = {'K\_obs'};
M_.endo_names_long(100) = {'K_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(28,1);
M_.param_names_tex = cell(28,1);
M_.param_names_long = cell(28,1);
M_.param_names(1) = {'sigma'};
M_.param_names_tex(1) = {'{\sigma}'};
M_.param_names_long(1) = {'Risk aversion'};
M_.param_names(2) = {'beta'};
M_.param_names_tex(2) = {'{\beta}'};
M_.param_names_long(2) = {'Discount factor'};
M_.param_names(3) = {'g_bar'};
M_.param_names_tex(3) = {'{\overline{g}}'};
M_.param_names_long(3) = {'Quarterly trend growth rate'};
M_.param_names(4) = {'nu'};
M_.param_names_tex(4) = {'\nu'};
M_.param_names_long(4) = {'Frisch elasticity'};
M_.param_names(5) = {'xi'};
M_.param_names_tex(5) = {'\xi'};
M_.param_names_long(5) = {'elasticity of substitution between non-durables and services'};
M_.param_names(6) = {'omega_sc'};
M_.param_names_tex(6) = {'\omega_{sc}'};
M_.param_names_long(6) = {'Weight of services in aggregator'};
M_.param_names(7) = {'mu_ss'};
M_.param_names_tex(7) = {'\mu_{ss}'};
M_.param_names_long(7) = {'steady-state wage markup'};
M_.param_names(8) = {'sigma_ac'};
M_.param_names_tex(8) = {'{\sigma_{ac}}'};
M_.param_names_long(8) = {'Inverse elasticity of marginal utilization cost wrt rental rate:C'};
M_.param_names(9) = {'sigma_ai'};
M_.param_names_tex(9) = {'{\sigma_{ai}}'};
M_.param_names_long(9) = {'Inverse elasticity of marginal utilization cost wrt rental rate:I'};
M_.param_names(10) = {'Psi_K'};
M_.param_names_tex(10) = {'{\Psi_{K}}'};
M_.param_names_long(10) = {'Investment adjustment cost parameter:non-durable goods'};
M_.param_names(11) = {'I_Y'};
M_.param_names_tex(11) = {'{I_Y}'};
M_.param_names_long(11) = {'Investment-output ratio'};
M_.param_names(12) = {'K_Y'};
M_.param_names_tex(12) = {'{K_Y}'};
M_.param_names_long(12) = {'Capital-output ratio (quarterly)'};
M_.param_names(13) = {'labor_share'};
M_.param_names_tex(13) = {'(labor share)'};
M_.param_names_long(13) = {'Labor share'};
M_.param_names(14) = {'nu_R'};
M_.param_names_tex(14) = {'{\nu_R}'};
M_.param_names_long(14) = {'Fixed cost share'};
M_.param_names(15) = {'ha'};
M_.param_names_tex(15) = {'{ha}'};
M_.param_names_long(15) = {'Habit persistence'};
M_.param_names(16) = {'phi'};
M_.param_names_tex(16) = {'{\phi}'};
M_.param_names_long(16) = {'Shopping matching function elasticity'};
M_.param_names(17) = {'eta'};
M_.param_names_tex(17) = {'{\eta}'};
M_.param_names_long(17) = {'Shopping disutility'};
M_.param_names(18) = {'Psi'};
M_.param_names_tex(18) = {'{\Psi}'};
M_.param_names_long(18) = {'Matching utilization'};
M_.param_names(19) = {'theta'};
M_.param_names_tex(19) = {'{\theta}'};
M_.param_names_long(19) = {'Inverse intersectoral elasticity of labor supply'};
M_.param_names(20) = {'rho_g'};
M_.param_names_tex(20) = {'{\rho_g}'};
M_.param_names_long(20) = {'persistence TFP growth shock'};
M_.param_names(21) = {'rho_Z'};
M_.param_names_tex(21) = {'{\rho_Z}'};
M_.param_names_long(21) = {'persistence TFP shock'};
M_.param_names(22) = {'rho_ZI'};
M_.param_names_tex(22) = {'{\rho_{ZI}}'};
M_.param_names_long(22) = {'persistence I-specific shock'};
M_.param_names(23) = {'rho_N'};
M_.param_names_tex(23) = {'{\rho_N}'};
M_.param_names_long(23) = {'persistence labor supply shock'};
M_.param_names(24) = {'rho_b'};
M_.param_names_tex(24) = {'{\rho_b}'};
M_.param_names_long(24) = {'persistence discount factor shock'};
M_.param_names(25) = {'rho_muC'};
M_.param_names_tex(25) = {'{\rho_{muC}}'};
M_.param_names_long(25) = {'persistence wage markup shock:C'};
M_.param_names(26) = {'rho_muI'};
M_.param_names_tex(26) = {'{\rho_{muI}}'};
M_.param_names_long(26) = {'persistence wage markup shock:I'};
M_.param_names(27) = {'p_I_ss'};
M_.param_names_tex(27) = {'p\_I\_ss'};
M_.param_names_long(27) = {'p_I_ss'};
M_.param_names(28) = {'N_ss'};
M_.param_names_tex(28) = {'N\_ss'};
M_.param_names_long(28) = {'N_ss'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 7;
M_.endo_nbr = 100;
M_.param_nbr = 28;
M_.orig_endo_nbr = 100;
M_.aux_vars = [];
options_.varobs = cell(5, 1);
options_.varobs(1)  = {'NC_obs'};
options_.varobs(2)  = {'NI_obs'};
options_.varobs(3)  = {'C_obs'};
options_.varobs(4)  = {'I_obs'};
options_.varobs(5)  = {'p_I_obs'};
options_.varobs_id = [ 92 93 85 86 90  ];
M_.Sigma_e = zeros(7, 7);
M_.Correlation_matrix = eye(7, 7);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 100;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 31 0;
 1 32 0;
 0 33 0;
 0 34 0;
 0 35 0;
 0 36 0;
 2 37 0;
 3 38 0;
 4 39 0;
 0 40 0;
 5 41 0;
 6 42 0;
 7 43 0;
 0 44 0;
 0 45 0;
 0 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 8 50 0;
 0 51 0;
 9 52 0;
 10 53 0;
 11 54 0;
 12 55 0;
 13 56 0;
 0 57 131;
 0 58 132;
 0 59 133;
 0 60 0;
 0 61 0;
 0 62 0;
 0 63 134;
 0 64 135;
 0 65 136;
 0 66 0;
 0 67 137;
 0 68 138;
 0 69 139;
 0 70 0;
 0 71 0;
 0 72 0;
 0 73 0;
 0 74 0;
 0 75 0;
 0 76 140;
 0 77 141;
 0 78 142;
 0 79 0;
 0 80 0;
 0 81 0;
 0 82 0;
 0 83 0;
 0 84 0;
 0 85 0;
 0 86 0;
 0 87 143;
 0 88 144;
 0 89 145;
 0 90 146;
 0 91 147;
 0 92 148;
 0 93 149;
 14 94 0;
 0 95 0;
 0 96 0;
 0 97 0;
 0 98 0;
 15 99 150;
 16 100 0;
 17 101 0;
 18 102 0;
 19 103 0;
 20 104 0;
 21 105 0;
 22 106 0;
 23 107 0;
 24 108 0;
 25 109 0;
 26 110 0;
 27 111 0;
 28 112 0;
 29 113 0;
 30 114 0;
 0 115 0;
 0 116 0;
 0 117 0;
 0 118 0;
 0 119 0;
 0 120 0;
 0 121 0;
 0 122 0;
 0 123 0;
 0 124 0;
 0 125 0;
 0 126 0;
 0 127 0;
 0 128 0;
 0 129 0;
 0 130 0;]';
M_.nstatic = 51;
M_.nfwrd   = 19;
M_.npred   = 29;
M_.nboth   = 1;
M_.nsfwrd   = 20;
M_.nspred   = 30;
M_.ndynamic   = 49;
M_.dynamic_tmp_nbr = [85; 23; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Labor composite' ;
  2 , 'name' , 'Labor leisure:C' ;
  3 , 'name' , 'Labor leisure:I' ;
  4 , 'name' , 'Marginal utility of wealth' ;
  5 , 'name' , 'Demand curve: mc' ;
  6 , 'name' , 'Demand curve: sc' ;
  7 , 'name' , 'Shopping:mc' ;
  8 , 'name' , 'Shopping:sc' ;
  9 , 'name' , 'Shopping:I' ;
  10 , 'name' , 'Composite utility term' ;
  11 , 'name' , 'Consumption CES aggregator' ;
  12 , 'name' , 'Investment adjustment cost function:mc' ;
  13 , 'name' , 'Investment adjustment cost function:mc' ;
  14 , 'name' , 'Investment adjustment cost function:I' ;
  15 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  16 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  17 , 'name' , 'Investment adjustment cost function: derivative I' ;
  18 , 'name' , 'Investment growth:mc' ;
  19 , 'name' , 'Investment growth:mc' ;
  20 , 'name' , 'Investment growth:I' ;
  21 , 'name' , 'Depreciation rate: mc' ;
  22 , 'name' , 'Depreciation rate: sc' ;
  23 , 'name' , 'Depreciation rate: I' ;
  24 , 'name' , 'Depreciation rate derivative: mc' ;
  25 , 'name' , 'Depreciation rate derivative: sc' ;
  26 , 'name' , 'Depreciation rate derivative: I' ;
  27 , 'name' , 'Tobins Q: mc' ;
  28 , 'name' , 'Tobins Q: sc' ;
  29 , 'name' , 'Tobins Q: I' ;
  30 , 'name' , 'Euler equation: mc' ;
  31 , 'name' , 'Euler equation: sc' ;
  32 , 'name' , 'Euler equation: I' ;
  33 , 'name' , 'Utilization: mc' ;
  34 , 'name' , 'Utilization: sc' ;
  35 , 'name' , 'Utilization: I' ;
  36 , 'name' , 'Non-durable goods production' ;
  37 , 'name' , 'Services production' ;
  38 , 'name' , 'Investment production' ;
  39 , 'name' , 'Capital law of motion:mc' ;
  40 , 'name' , 'Capital law of motion:sc' ;
  41 , 'name' , 'Capital law of motion:I' ;
  42 , 'name' , 'Labor demand:mc' ;
  43 , 'name' , 'Labor demand:sc' ;
  44 , 'name' , 'Labor demand:I' ;
  45 , 'name' , 'Capital demand:mc' ;
  46 , 'name' , 'Capital demand:sc' ;
  47 , 'name' , 'Capital demand:I' ;
  48 , 'name' , 'Labor composition' ;
  49 , 'name' , 'Labor composition: C' ;
  50 , 'name' , 'Capital composition' ;
  51 , 'name' , 'Investment composition' ;
  52 , 'name' , 'Shopping composition' ;
  53 , 'name' , 'Capital utilization composition' ;
  54 , 'name' , 'Aggregate wage' ;
  55 , 'name' , 'Output (base-year prices)' ;
  56 , 'name' , 'Solow residual' ;
  57 , 'name' , 'Capacity utilization' ;
  58 , 'name' , 'util_sc' ;
  59 , 'name' , 'util_D' ;
  60 , 'name' , 'util' ;
  61 , 'name' , 'stochastic trend process' ;
  62 , 'name' , 'Stationary TFP process' ;
  63 , 'name' , 'Independent component of I-specific tech' ;
  64 , 'name' , 'Investment-specific TFP process' ;
  65 , 'name' , 'Labor supply process' ;
  66 , 'name' , 'Consumption preference process' ;
  67 , 'name' , 'Wage-markup process: C' ;
  68 , 'name' , 'Wage-markup process: I' ;
  69 , 'name' , 'Definition log output' ;
  70 , 'name' , 'Definition log consumption' ;
  71 , 'name' , 'Definition log investment' ;
  72 , 'name' , 'Definition log hours' ;
  73 , 'name' , 'log_NC' ;
  74 , 'name' , 'log_NI' ;
  75 , 'name' , 'log capital' ;
  76 , 'name' , 'Definition log labor productivity' ;
  77 , 'name' , 'Definition log shopping effort' ;
  78 , 'name' , 'Definition log capital utilization' ;
  79 , 'name' , 'Definition of log relative investment  price' ;
  80 , 'name' , 'Definition of log capacity utilization' ;
  81 , 'name' , 'log_util_ND' ;
  82 , 'name' , 'log_util_D' ;
  83 , 'name' , 'Definition of log wages' ;
  84 , 'name' , 'Definition of log Solow residual' ;
  85 , 'name' , 'C_obs' ;
  86 , 'name' , 'I_obs' ;
  87 , 'name' , 'Y_obs' ;
  88 , 'name' , 'Y_N_obs' ;
  89 , 'name' , 'K_obs' ;
  90 , 'name' , 'w_obs' ;
  91 , 'name' , 'SR_obs' ;
  92 , 'name' , 'p_I_obs' ;
  93 , 'name' , 'N_obs' ;
  94 , 'name' , 'NC_obs' ;
  95 , 'name' , 'NI_obs' ;
  96 , 'name' , 'util_ND_obs' ;
  97 , 'name' , 'util_D_obs' ;
  98 , 'name' , 'util_obs' ;
  99 , 'name' , 'D_obs' ;
  100 , 'name' , 'h_obs' ;
};
M_.mapping.Y.eqidx = [53 55 56 60 69 ];
M_.mapping.C.eqidx = [5 6 10 11 55 70 ];
M_.mapping.Y_mc.eqidx = [5 7 11 36 42 45 53 56 60 ];
M_.mapping.Y_sc.eqidx = [6 8 11 37 43 46 53 56 60 ];
M_.mapping.SR.eqidx = [56 84 ];
M_.mapping.I.eqidx = [9 38 44 47 51 53 55 56 60 71 ];
M_.mapping.I_mc.eqidx = [18 39 51 ];
M_.mapping.I_sc.eqidx = [19 40 51 ];
M_.mapping.I_I.eqidx = [20 41 51 ];
M_.mapping.K.eqidx = [50 75 ];
M_.mapping.K_mc.eqidx = [36 39 45 50 56 57 ];
M_.mapping.K_sc.eqidx = [37 40 46 50 56 58 ];
M_.mapping.K_I.eqidx = [38 41 47 50 56 59 ];
M_.mapping.N.eqidx = [48 54 72 ];
M_.mapping.N_mc.eqidx = [36 42 48 49 56 57 ];
M_.mapping.N_sc.eqidx = [37 43 48 49 56 58 ];
M_.mapping.N_C.eqidx = [1 2 49 54 73 ];
M_.mapping.N_I.eqidx = [1 3 38 44 48 54 56 59 74 ];
M_.mapping.N_comp.eqidx = [1 2 3 10 ];
M_.mapping.Z_C.eqidx = [36 37 57 58 62 64 ];
M_.mapping.u_ZI.eqidx = [63 64 ];
M_.mapping.Z_I.eqidx = [38 59 63 64 ];
M_.mapping.theta_N.eqidx = [2 3 10 65 ];
M_.mapping.theta_b.eqidx = [27 28 29 30 31 32 66 ];
M_.mapping.mu_C.eqidx = [2 67 ];
M_.mapping.mu_I.eqidx = [3 68 ];
M_.mapping.R_mc.eqidx = [30 33 45 ];
M_.mapping.R_sc.eqidx = [31 34 46 ];
M_.mapping.R_I.eqidx = [32 35 47 ];
M_.mapping.W_C.eqidx = [2 42 43 54 ];
M_.mapping.W_I.eqidx = [3 44 54 ];
M_.mapping.W.eqidx = [54 83 ];
M_.mapping.h_mc.eqidx = [21 24 30 36 45 53 57 ];
M_.mapping.h_sc.eqidx = [22 25 31 37 46 53 58 ];
M_.mapping.h_I.eqidx = [23 26 32 38 47 53 59 ];
M_.mapping.h.eqidx = [53 78 ];
M_.mapping.delta_mc.eqidx = [21 30 39 ];
M_.mapping.delta_sc.eqidx = [22 31 40 ];
M_.mapping.delta_I.eqidx = [23 32 41 ];
M_.mapping.delta_mc_pr.eqidx = [24 33 ];
M_.mapping.delta_sc_pr.eqidx = [25 34 ];
M_.mapping.delta_I_pr.eqidx = [26 35 ];
M_.mapping.Smc.eqidx = [12 27 39 ];
M_.mapping.Ssc.eqidx = [13 28 40 ];
M_.mapping.Si.eqidx = [14 29 41 ];
M_.mapping.Smc_pr.eqidx = [15 27 ];
M_.mapping.Ssc_pr.eqidx = [16 28 ];
M_.mapping.Si_pr.eqidx = [17 29 ];
M_.mapping.D.eqidx = [7 8 9 10 52 77 ];
M_.mapping.D_mc.eqidx = [7 36 42 45 52 57 ];
M_.mapping.D_sc.eqidx = [8 37 43 46 52 58 ];
M_.mapping.D_I.eqidx = [9 38 44 47 52 59 ];
M_.mapping.Gam.eqidx = [4 10 ];
M_.mapping.p_mc.eqidx = [5 7 42 45 ];
M_.mapping.p_sc.eqidx = [6 8 43 46 ];
M_.mapping.p_I.eqidx = [9 27 28 29 44 47 79 ];
M_.mapping.lam.eqidx = [4 27 28 29 30 31 32 ];
M_.mapping.Q_mc.eqidx = [27 30 33 ];
M_.mapping.Q_sc.eqidx = [28 31 34 ];
M_.mapping.Q_I.eqidx = [29 32 35 ];
M_.mapping.x_mc.eqidx = [12 15 18 27 ];
M_.mapping.x_sc.eqidx = [13 16 19 28 ];
M_.mapping.x_I.eqidx = [14 17 20 29 ];
M_.mapping.log_SR.eqidx = [84 91 ];
M_.mapping.util.eqidx = [60 80 ];
M_.mapping.util_ND.eqidx = [57 60 81 ];
M_.mapping.util_sc.eqidx = [58 60 ];
M_.mapping.util_D.eqidx = [59 60 82 ];
M_.mapping.g.eqidx = [18 19 20 27 28 29 30 31 32 36 37 38 39 40 41 45 46 47 56 57 58 59 61 85 86 87 88 89 90 91 ];
M_.mapping.log_Y.eqidx = [69 76 87 ];
M_.mapping.log_C.eqidx = [70 85 ];
M_.mapping.log_I.eqidx = [71 86 ];
M_.mapping.log_N.eqidx = [72 76 93 ];
M_.mapping.log_NC.eqidx = [73 94 ];
M_.mapping.log_NI.eqidx = [74 95 ];
M_.mapping.log_K.eqidx = [75 89 ];
M_.mapping.log_Y_N.eqidx = [76 88 ];
M_.mapping.log_D.eqidx = [77 99 ];
M_.mapping.log_h.eqidx = [78 100 ];
M_.mapping.log_p_I.eqidx = [79 92 ];
M_.mapping.log_util.eqidx = [80 98 ];
M_.mapping.log_util_ND.eqidx = [81 96 ];
M_.mapping.log_util_D.eqidx = [82 97 ];
M_.mapping.log_W.eqidx = [83 90 ];
M_.mapping.C_obs.eqidx = [85 ];
M_.mapping.I_obs.eqidx = [86 ];
M_.mapping.Y_obs.eqidx = [87 ];
M_.mapping.SR_obs.eqidx = [91 ];
M_.mapping.Y_N_obs.eqidx = [88 ];
M_.mapping.p_I_obs.eqidx = [92 ];
M_.mapping.N_obs.eqidx = [93 ];
M_.mapping.NC_obs.eqidx = [94 ];
M_.mapping.NI_obs.eqidx = [95 ];
M_.mapping.util_ND_obs.eqidx = [96 ];
M_.mapping.util_D_obs.eqidx = [97 ];
M_.mapping.util_obs.eqidx = [98 ];
M_.mapping.w_obs.eqidx = [90 ];
M_.mapping.D_obs.eqidx = [99 ];
M_.mapping.h_obs.eqidx = [100 ];
M_.mapping.K_obs.eqidx = [89 ];
M_.mapping.e_g.eqidx = [61 ];
M_.mapping.e_Z.eqidx = [62 ];
M_.mapping.e_ZI.eqidx = [63 ];
M_.mapping.e_N.eqidx = [65 ];
M_.mapping.e_b.eqidx = [66 ];
M_.mapping.e_muC.eqidx = [67 ];
M_.mapping.e_muI.eqidx = [68 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 6;
M_.block_structure.block(1).mfs = 6;
M_.block_structure.block(1).equation = [ 61 62 65 66 67 68];
M_.block_structure.block(1).variable = [ 69 20 23 24 25 26];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 12;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 9 10 11 12 ];
M_.block_structure.block(2).Simulation_Type = 6;
M_.block_structure.block(2).endo_nbr = 2;
M_.block_structure.block(2).mfs = 2;
M_.block_structure.block(2).equation = [ 63 64];
M_.block_structure.block(2).variable = [ 21 22];
M_.block_structure.block(2).is_linear = true;
M_.block_structure.block(2).NNZDerivatives = 4;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 2 ];
M_.block_structure.block(3).Simulation_Type = 8;
M_.block_structure.block(3).endo_nbr = 50;
M_.block_structure.block(3).mfs = 42;
M_.block_structure.block(3).equation = [ 12 14 25 26 51 6 5 13 7 8 9 10 33 36 38 42 43 44 46 3 49 52 2 1 11 18 19 20 39 40 41 15 16 17 21 22 23 24 27 28 29 30 31 32 34 35 37 45 47 4];
M_.block_structure.block(3).variable = [ 43 45 41 42 6 4 3 44 54 49 52 53 40 50 18 30 16 56 55 31 15 51 19 17 2 7 8 9 11 12 13 46 47 48 37 38 39 33 61 62 63 58 59 60 28 29 34 27 35 57];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 213;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [17 18 19 20 21 22 23 0 0 0 0 0 0 0 0 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 ];
M_.block_structure.block(4).Simulation_Type = 1;
M_.block_structure.block(4).endo_nbr = 42;
M_.block_structure.block(4).mfs = 42;
M_.block_structure.block(4).equation = [ 59 58 57 55 53 81 78 60 82 77 74 96 97 80 98 99 48 95 73 72 94 93 69 56 54 50 100 84 83 79 76 75 71 70 92 91 90 89 88 87 86 85];
M_.block_structure.block(4).variable = [ 68 67 66 1 36 82 79 65 83 78 75 94 95 81 96 98 14 93 74 73 92 91 70 5 32 10 99 64 84 80 77 76 72 71 90 88 97 100 89 87 86 85];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 92;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [6 7 9 10 11 14 19 20 23 28 29 30 31 32 33 34 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 2 2 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 1 2 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 3 4 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([4 18 19 20 6 21 40 11 22 39 7 23 41 1 6 8 17 40 1 2 3 4 14 3 7 10 14 41 4 42 5 30 1 6 8 14 40 7 10 12 16 8 9 15 9 13 39 3 10 31 32 33 41 2 9 11 17 39 10 12 6 8 13 2 9 11 14 39 4 12 15 16 13 15 16 1 2 4 6 8 9 11 17 39 40 3 7 10 18 21 41 3 7 10 19 22 41 3 7 10 20 23 41 21 22 23 24 31 25 32 26 33 21 27 22 28 23 29 6 27 30 40 18 21 24 31 19 22 25 32 20 23 26 33 5 31 34 32 35 37 33 36 38 11 37 38 41 11 28 37 39 5 40 7 29 38 41 31 32 33 34 35 36 42 31 32 33 34 35 36 34 31 32 33 31 34 32 35 33 36 35 36 35 34 36 31 32 33 34 35 36 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([17 18 19 20 21 21 21 22 22 22 23 23 23 43 43 43 43 43 44 44 44 44 44 45 45 45 45 45 46 46 47 47 48 48 48 48 48 49 49 49 49 50 50 50 51 51 51 52 52 52 52 52 52 53 53 53 53 53 54 54 55 55 55 56 56 56 56 56 57 57 57 57 58 58 58 59 59 59 59 59 59 59 59 59 59 60 60 60 60 60 60 61 61 61 61 61 61 62 62 62 62 62 62 63 64 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 72 72 73 73 73 73 74 74 74 74 75 75 75 75 76 76 76 77 77 77 78 78 78 79 79 80 80 81 81 81 81 82 82 83 83 83 83 84 84 84 84 84 84 84 108 109 110 111 112 113 114 115 116 117 118 118 119 119 120 120 121 122 123 124 125 126 126 126 126 126 126 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 8 11 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 19 24 29 31 33 38 42 45 48 54 59 61 64 69 73 76 86 92 98 104 105 106 107 109 111 113 115 117 119 123 127 131 135 138 141 144 146 148 152 154 158 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 166 167 168 169 170 171 172 173 174 175 177 179 181 182 183 184 185 186 192 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([]);
M_.block_structure.block(4).g1_sparse_colval = int32([]);
M_.block_structure.block(4).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 69 20 23 24 25 26 21 22 43 45 41 42 6 4 3 44 54 49 52 53 40 50 18 30 16 56 55 31 15 51 19 17 2 7 8 9 11 12 13 46 47 48 37 38 39 33 61 62 63 58 59 60 28 29 34 27 35 57 68 67 66 1 36 82 79 65 83 78 75 94 95 81 96 98 14 93 74 73 92 91 70 5 32 10 99 64 84 80 77 76 72 71 90 88 97 100 89 87 86 85];
M_.block_structure.equation_reordered = [ 61 62 65 66 67 68 63 64 12 14 25 26 51 6 5 13 7 8 9 10 33 36 38 42 43 44 46 3 49 52 2 1 11 18 19 20 39 40 41 15 16 17 21 22 23 24 27 28 29 30 31 32 34 35 37 45 47 4 59 58 57 55 53 81 78 60 82 77 74 96 97 80 98 99 48 95 73 72 94 93 69 56 54 50 100 84 83 79 76 75 71 70 92 91 90 89 88 87 86 85];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 10 2;
 18 7;
 19 8;
 20 9;
 36 11;
 37 12;
 38 13;
 39 11;
 40 12;
 41 13;
 45 11;
 46 12;
 47 13;
 56 11;
 56 12;
 56 13;
 57 11;
 58 12;
 59 13;
 61 69;
 62 20;
 63 22;
 65 23;
 66 24;
 67 25;
 68 26;
 85 71;
 86 72;
 87 70;
 88 77;
 89 76;
 90 84;
 91 64;
 92 80;
 93 73;
 94 74;
 95 75;
 96 82;
 97 83;
 98 81;
 99 78;
 100 79;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 23;
 2 25;
 2 30;
 3 18;
 3 19;
 3 23;
 3 26;
 3 31;
 4 53;
 4 57;
 5 2;
 5 3;
 5 54;
 6 2;
 6 4;
 6 55;
 7 3;
 7 49;
 7 50;
 7 54;
 8 4;
 8 49;
 8 51;
 8 55;
 9 6;
 9 49;
 9 52;
 9 56;
 10 2;
 10 19;
 10 23;
 10 49;
 10 53;
 11 2;
 11 3;
 11 4;
 12 43;
 12 61;
 13 44;
 13 62;
 14 45;
 14 63;
 15 46;
 15 61;
 16 47;
 16 62;
 17 48;
 17 63;
 18 7;
 18 61;
 18 69;
 19 8;
 19 62;
 19 69;
 20 9;
 20 63;
 20 69;
 21 33;
 21 37;
 22 34;
 22 38;
 23 35;
 23 39;
 24 33;
 24 40;
 25 34;
 25 41;
 26 35;
 26 42;
 27 24;
 27 43;
 27 46;
 27 56;
 27 57;
 27 58;
 27 61;
 28 24;
 28 44;
 28 47;
 28 56;
 28 57;
 28 59;
 28 62;
 29 24;
 29 45;
 29 48;
 29 56;
 29 57;
 29 60;
 29 63;
 30 24;
 30 57;
 30 58;
 31 24;
 31 57;
 31 59;
 32 24;
 32 57;
 32 60;
 33 27;
 33 40;
 33 58;
 34 28;
 34 41;
 34 59;
 35 29;
 35 42;
 35 60;
 36 3;
 36 15;
 36 20;
 36 33;
 36 50;
 36 69;
 37 4;
 37 16;
 37 20;
 37 34;
 37 51;
 37 69;
 38 6;
 38 18;
 38 22;
 38 35;
 38 52;
 38 69;
 39 7;
 39 11;
 39 37;
 39 43;
 39 69;
 40 8;
 40 12;
 40 38;
 40 44;
 40 69;
 41 9;
 41 13;
 41 39;
 41 45;
 41 69;
 42 3;
 42 15;
 42 30;
 42 50;
 42 54;
 43 4;
 43 16;
 43 30;
 43 51;
 43 55;
 44 6;
 44 18;
 44 31;
 44 52;
 44 56;
 45 3;
 45 27;
 45 33;
 45 50;
 45 54;
 45 69;
 46 4;
 46 28;
 46 34;
 46 51;
 46 55;
 46 69;
 47 6;
 47 29;
 47 35;
 47 52;
 47 56;
 47 69;
 48 14;
 48 15;
 48 16;
 48 18;
 49 15;
 49 16;
 49 17;
 50 10;
 50 11;
 50 12;
 50 13;
 51 6;
 51 7;
 51 8;
 51 9;
 52 49;
 52 50;
 52 51;
 52 52;
 53 1;
 53 3;
 53 4;
 53 6;
 53 33;
 53 34;
 53 35;
 53 36;
 54 14;
 54 17;
 54 18;
 54 30;
 54 31;
 54 32;
 55 1;
 55 2;
 55 6;
 56 1;
 56 3;
 56 4;
 56 5;
 56 6;
 56 15;
 56 16;
 56 18;
 56 69;
 57 15;
 57 20;
 57 33;
 57 50;
 57 66;
 57 69;
 58 16;
 58 20;
 58 34;
 58 51;
 58 67;
 58 69;
 59 18;
 59 22;
 59 35;
 59 52;
 59 68;
 59 69;
 60 1;
 60 3;
 60 4;
 60 6;
 60 65;
 60 66;
 60 67;
 60 68;
 61 69;
 62 20;
 63 21;
 64 20;
 64 21;
 64 22;
 65 23;
 66 24;
 67 25;
 68 26;
 69 1;
 69 70;
 70 2;
 70 71;
 71 6;
 71 72;
 72 14;
 72 73;
 73 17;
 73 74;
 74 18;
 74 75;
 75 10;
 75 76;
 76 70;
 76 73;
 76 77;
 77 49;
 77 78;
 78 36;
 78 79;
 79 56;
 79 80;
 80 65;
 80 81;
 81 66;
 81 82;
 82 68;
 82 83;
 83 32;
 83 84;
 84 5;
 84 64;
 85 69;
 85 71;
 85 85;
 86 69;
 86 72;
 86 86;
 87 69;
 87 70;
 87 87;
 88 69;
 88 77;
 88 89;
 89 69;
 89 76;
 89 100;
 90 69;
 90 84;
 90 97;
 91 64;
 91 69;
 91 88;
 92 80;
 92 90;
 93 73;
 93 91;
 94 74;
 94 92;
 95 75;
 95 93;
 96 82;
 96 94;
 97 83;
 97 95;
 98 81;
 98 96;
 99 78;
 99 98;
 100 79;
 100 99;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 27 46;
 27 57;
 27 58;
 27 61;
 27 69;
 28 47;
 28 57;
 28 59;
 28 62;
 28 69;
 29 48;
 29 57;
 29 60;
 29 63;
 29 69;
 30 27;
 30 33;
 30 37;
 30 57;
 30 58;
 30 69;
 31 28;
 31 34;
 31 38;
 31 57;
 31 59;
 31 69;
 32 29;
 32 35;
 32 39;
 32 57;
 32 60;
 32 69;
];
M_.block_structure.dyn_tmp_nbr = 71;
M_.state_var = [69 20 23 24 25 26 22 2 7 8 9 11 12 13 82 79 83 78 75 81 74 73 70 64 84 80 77 76 72 71 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(100, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(7, 1);
M_.params = NaN(28, 1);
M_.endo_trends = struct('deflator', cell(100, 1), 'log_deflator', cell(100, 1), 'growth_factor', cell(100, 1), 'log_growth_factor', cell(100, 1));
M_.NNZDerivatives = [414; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([10 18 19 20 36 39 45 56 57 37 40 46 56 58 38 41 47 56 59 62 63 65 66 67 68 91 61 87 85 86 93 94 95 89 88 99 100 92 98 96 97 90 53 55 56 60 69 5 6 10 11 55 70 5 7 11 36 42 45 53 56 60 6 8 11 37 43 46 53 56 60 56 84 9 38 44 47 51 53 55 56 60 71 18 39 51 19 40 51 20 41 51 50 75 39 50 40 50 41 50 48 54 72 36 42 48 49 56 57 37 43 48 49 56 58 1 2 49 54 73 1 3 38 44 48 54 56 59 74 1 2 3 10 36 37 57 58 62 64 63 64 38 59 64 2 3 10 65 27 28 29 30 31 32 66 2 67 3 68 33 45 34 46 35 47 2 42 43 54 3 44 54 54 83 21 24 36 45 53 57 22 25 37 46 53 58 23 26 38 47 53 59 53 78 21 39 22 40 23 41 24 33 25 34 26 35 12 27 39 13 28 40 14 29 41 15 27 16 28 17 29 7 8 9 10 52 77 7 36 42 45 52 57 8 37 43 46 52 58 9 38 44 47 52 59 4 10 5 7 42 45 6 8 43 46 9 27 28 29 44 47 79 4 27 28 29 30 31 32 27 30 33 28 31 34 29 32 35 12 15 18 27 13 16 19 28 14 17 20 29 84 91 60 80 57 60 81 58 60 59 60 82 18 19 20 36 37 38 39 40 41 45 46 47 56 57 58 59 61 85 86 87 88 89 90 91 69 76 87 70 85 71 86 72 76 93 73 94 74 95 75 89 76 88 77 99 78 100 79 92 80 98 81 96 82 97 83 90 85 86 87 91 88 92 93 94 95 96 97 98 90 99 100 89 30 31 32 30 31 32 30 31 32 27 28 29 27 28 29 30 31 32 27 30 28 31 29 32 27 28 29 27 28 29 30 31 32 61 62 63 65 66 67 68 ]);
M_.dynamic_g1_sparse_colval = int32([2 7 8 9 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 20 22 23 24 25 26 64 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 101 101 101 101 101 102 102 102 102 102 102 103 103 103 103 103 103 103 103 103 104 104 104 104 104 104 104 104 104 105 105 106 106 106 106 106 106 106 106 106 106 107 107 107 108 108 108 109 109 109 110 110 111 111 112 112 113 113 114 114 114 115 115 115 115 115 115 116 116 116 116 116 116 117 117 117 117 117 118 118 118 118 118 118 118 118 118 119 119 119 119 120 120 120 120 120 120 121 121 122 122 122 123 123 123 123 124 124 124 124 124 124 124 125 125 126 126 127 127 128 128 129 129 130 130 130 130 131 131 131 132 132 133 133 133 133 133 133 134 134 134 134 134 134 135 135 135 135 135 135 136 136 137 137 138 138 139 139 140 140 141 141 142 142 143 143 143 144 144 144 145 145 145 146 146 147 147 148 148 149 149 149 149 149 149 150 150 150 150 150 150 151 151 151 151 151 151 152 152 152 152 152 152 153 153 154 154 154 154 155 155 155 155 156 156 156 156 156 156 156 157 157 157 157 157 157 157 158 158 158 159 159 159 160 160 160 161 161 161 161 162 162 162 162 163 163 163 163 164 164 165 165 166 166 166 167 167 168 168 168 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 169 170 170 170 171 171 172 172 173 173 173 174 174 175 175 176 176 177 177 178 178 179 179 180 180 181 181 182 182 183 183 184 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 227 228 229 233 234 235 237 238 239 246 247 248 257 257 257 257 257 257 258 258 259 259 260 260 261 262 263 269 269 269 269 269 269 301 302 303 304 305 306 307 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 2 2 2 2 2 3 4 5 5 10 15 20 20 20 20 20 20 20 21 21 22 23 24 25 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 27 27 27 27 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 48 54 63 72 74 84 87 90 93 95 97 99 101 104 110 116 121 130 134 140 142 145 149 156 158 160 162 164 166 170 173 175 181 187 193 195 197 199 201 203 205 207 210 213 216 218 220 222 228 234 240 246 248 252 256 263 270 273 276 279 283 287 291 293 295 298 300 303 327 330 332 334 337 339 341 343 345 347 349 351 353 355 357 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 376 377 378 378 378 378 379 380 381 381 382 383 384 384 384 384 384 384 384 385 386 387 387 387 387 387 387 387 387 387 393 395 397 399 400 401 402 402 402 402 402 402 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 409 410 411 412 413 414 415 ]);
M_.lhs = {
'N_comp'; 
'(1-I_Y)^(-theta)*(N_C/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'(1-(1-I_Y))^(-theta)*(N_I/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'lam'; 
'Y_mc'; 
'Y_sc'; 
'D^(1/eta)'; 
'D^(1/eta)'; 
'D^(1/eta)'; 
'Gam'; 
'C'; 
'Smc'; 
'Ssc'; 
'Si'; 
'Smc_pr'; 
'Ssc_pr'; 
'Si_pr'; 
'x_mc'; 
'x_sc'; 
'x_I'; 
'delta_mc'; 
'delta_sc'; 
'delta_I'; 
'delta_mc_pr'; 
'delta_sc_pr'; 
'delta_I_pr'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'Q_mc'; 
'Q_sc'; 
'Q_I'; 
'delta_mc_pr*Q_mc'; 
'delta_sc_pr*Q_sc'; 
'delta_I_pr*Q_I'; 
'Y_mc'; 
'Y_sc'; 
'I'; 
'exp(g)*K_mc'; 
'exp(g)*K_sc'; 
'exp(g)*K_I'; 
'(1-phi)*W_C/p_mc'; 
'(1-phi)*W_C/p_sc'; 
'(1-phi)*W_I/p_I'; 
'(1-phi)*R_mc/p_mc'; 
'(1-phi)*R_sc/p_sc'; 
'(1-phi)*R_I/p_I'; 
'N'; 
'N_C'; 
'K'; 
'I'; 
'D'; 
'h'; 
'W'; 
'Y'; 
'SR'; 
'util_ND'; 
'util_sc'; 
'util_D'; 
'util'; 
'g'; 
'Z_C'; 
'u_ZI'; 
'Z_I'; 
'theta_N'; 
'theta_b'; 
'mu_C'; 
'mu_I'; 
'log_Y'; 
'log_C'; 
'log_I'; 
'log_N'; 
'log_NC'; 
'log_NI'; 
'log_K'; 
'log_Y_N'; 
'log_D'; 
'log_h'; 
'log_p_I'; 
'log_util'; 
'log_util_ND'; 
'log_util_D'; 
'log_W'; 
'log_SR'; 
'C_obs'; 
'I_obs'; 
'Y_obs'; 
'Y_N_obs'; 
'K_obs'; 
'w_obs'; 
'SR_obs'; 
'p_I_obs'; 
'N_obs'; 
'NC_obs'; 
'NI_obs'; 
'util_ND_obs'; 
'util_D_obs'; 
'util_obs'; 
'D_obs'; 
'h_obs'; 
};
M_.static_tmp_nbr = [84; 21; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 61];
M_.block_structure_stat.block(1).variable = [ 69];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 62];
M_.block_structure_stat.block(2).variable = [ 20];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 65];
M_.block_structure_stat.block(3).variable = [ 23];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 66];
M_.block_structure_stat.block(4).variable = [ 24];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 67];
M_.block_structure_stat.block(5).variable = [ 25];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 68];
M_.block_structure_stat.block(6).variable = [ 26];
M_.block_structure_stat.block(7).Simulation_Type = 1;
M_.block_structure_stat.block(7).endo_nbr = 25;
M_.block_structure_stat.block(7).mfs = 25;
M_.block_structure_stat.block(7).equation = [ 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 18 19 20 12 13 14 15 16 17];
M_.block_structure_stat.block(7).variable = [ 85 86 87 89 100 97 88 90 91 92 93 94 95 96 98 99 61 62 63 43 44 45 46 47 48];
M_.block_structure_stat.block(8).Simulation_Type = 6;
M_.block_structure_stat.block(8).endo_nbr = 2;
M_.block_structure_stat.block(8).mfs = 2;
M_.block_structure_stat.block(8).equation = [ 63 64];
M_.block_structure_stat.block(8).variable = [ 21 22];
M_.block_structure_stat.block(9).Simulation_Type = 6;
M_.block_structure_stat.block(9).endo_nbr = 39;
M_.block_structure_stat.block(9).mfs = 39;
M_.block_structure_stat.block(9).equation = [ 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 28 49 7 51 52 8 9 29 30 31 23 24 11 1 2 3 22 5 6 26 21 25 27];
M_.block_structure_stat.block(9).variable = [ 29 27 41 42 50 16 18 7 12 9 15 55 6 11 51 13 59 17 54 8 52 49 56 60 37 28 39 40 2 19 30 31 38 3 4 35 33 34 58];
M_.block_structure_stat.block(10).Simulation_Type = 1;
M_.block_structure_stat.block(10).endo_nbr = 28;
M_.block_structure_stat.block(10).mfs = 28;
M_.block_structure_stat.block(10).equation = [ 59 58 57 10 55 48 72 69 60 56 54 53 50 84 83 82 81 80 79 78 77 76 75 74 73 71 70 4];
M_.block_structure_stat.block(10).variable = [ 68 67 66 53 1 14 73 70 65 5 32 36 10 64 84 83 82 81 80 79 78 77 76 75 74 72 71 57];
M_.block_structure_stat.variable_reordered = [ 69 20 23 24 25 26 85 86 87 89 100 97 88 90 91 92 93 94 95 96 98 99 61 62 63 43 44 45 46 47 48 21 22 29 27 41 42 50 16 18 7 12 9 15 55 6 11 51 13 59 17 54 8 52 49 56 60 37 28 39 40 2 19 30 31 38 3 4 35 33 34 58 68 67 66 53 1 14 73 70 65 5 32 36 10 64 84 83 82 81 80 79 78 77 76 75 74 72 71 57];
M_.block_structure_stat.equation_reordered = [ 61 62 65 66 67 68 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 18 19 20 12 13 14 15 16 17 63 64 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 28 49 7 51 52 8 9 29 30 31 23 24 11 1 2 3 22 5 6 26 21 25 27 59 58 57 10 55 48 72 69 60 56 54 53 50 84 83 82 81 80 79 78 77 76 75 74 73 71 70 4];
M_.block_structure_stat.incidence.sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 23;
 2 25;
 2 30;
 3 18;
 3 19;
 3 23;
 3 26;
 3 31;
 4 53;
 4 57;
 5 2;
 5 3;
 5 54;
 6 2;
 6 4;
 6 55;
 7 3;
 7 49;
 7 50;
 7 54;
 8 4;
 8 49;
 8 51;
 8 55;
 9 6;
 9 49;
 9 52;
 9 56;
 10 2;
 10 19;
 10 23;
 10 49;
 10 53;
 11 2;
 11 3;
 11 4;
 12 43;
 12 61;
 13 44;
 13 62;
 14 45;
 14 63;
 15 46;
 15 61;
 16 47;
 16 62;
 17 48;
 17 63;
 18 61;
 18 69;
 19 62;
 19 69;
 20 63;
 20 69;
 21 33;
 21 37;
 22 34;
 22 38;
 23 35;
 23 39;
 24 33;
 24 40;
 25 34;
 25 41;
 26 35;
 26 42;
 27 24;
 27 43;
 27 46;
 27 56;
 27 58;
 27 61;
 27 69;
 28 24;
 28 44;
 28 47;
 28 56;
 28 59;
 28 62;
 28 69;
 29 24;
 29 45;
 29 48;
 29 56;
 29 60;
 29 63;
 29 69;
 30 24;
 30 27;
 30 33;
 30 37;
 30 58;
 30 69;
 31 24;
 31 28;
 31 34;
 31 38;
 31 59;
 31 69;
 32 24;
 32 29;
 32 35;
 32 39;
 32 60;
 32 69;
 33 27;
 33 40;
 33 58;
 34 28;
 34 41;
 34 59;
 35 29;
 35 42;
 35 60;
 36 3;
 36 11;
 36 15;
 36 20;
 36 33;
 36 50;
 36 69;
 37 4;
 37 12;
 37 16;
 37 20;
 37 34;
 37 51;
 37 69;
 38 6;
 38 13;
 38 18;
 38 22;
 38 35;
 38 52;
 38 69;
 39 7;
 39 11;
 39 37;
 39 43;
 39 69;
 40 8;
 40 12;
 40 38;
 40 44;
 40 69;
 41 9;
 41 13;
 41 39;
 41 45;
 41 69;
 42 3;
 42 15;
 42 30;
 42 50;
 42 54;
 43 4;
 43 16;
 43 30;
 43 51;
 43 55;
 44 6;
 44 18;
 44 31;
 44 52;
 44 56;
 45 3;
 45 11;
 45 27;
 45 33;
 45 50;
 45 54;
 45 69;
 46 4;
 46 12;
 46 28;
 46 34;
 46 51;
 46 55;
 46 69;
 47 6;
 47 13;
 47 29;
 47 35;
 47 52;
 47 56;
 47 69;
 48 14;
 48 15;
 48 16;
 48 18;
 49 15;
 49 16;
 49 17;
 50 10;
 50 11;
 50 12;
 50 13;
 51 6;
 51 7;
 51 8;
 51 9;
 52 49;
 52 50;
 52 51;
 52 52;
 53 1;
 53 3;
 53 4;
 53 6;
 53 33;
 53 34;
 53 35;
 53 36;
 54 14;
 54 17;
 54 18;
 54 30;
 54 31;
 54 32;
 55 1;
 55 2;
 55 6;
 56 1;
 56 3;
 56 4;
 56 5;
 56 6;
 56 11;
 56 12;
 56 13;
 56 15;
 56 16;
 56 18;
 56 69;
 57 11;
 57 15;
 57 20;
 57 33;
 57 50;
 57 66;
 57 69;
 58 12;
 58 16;
 58 20;
 58 34;
 58 51;
 58 67;
 58 69;
 59 13;
 59 18;
 59 22;
 59 35;
 59 52;
 59 68;
 59 69;
 60 1;
 60 3;
 60 4;
 60 6;
 60 65;
 60 66;
 60 67;
 60 68;
 61 69;
 62 20;
 63 21;
 63 22;
 64 20;
 64 21;
 64 22;
 65 23;
 66 24;
 67 25;
 68 26;
 69 70;
 70 71;
 71 72;
 72 73;
 73 74;
 74 75;
 75 76;
 76 70;
 76 73;
 76 77;
 77 78;
 78 79;
 79 80;
 80 81;
 81 82;
 82 83;
 83 84;
 84 64;
 85 69;
 85 85;
 86 69;
 86 86;
 87 69;
 87 87;
 88 69;
 88 89;
 89 69;
 89 100;
 90 69;
 90 97;
 91 69;
 91 88;
 92 90;
 93 91;
 94 92;
 95 93;
 96 94;
 97 95;
 98 96;
 99 98;
 100 99;
];
M_.block_structure_stat.tmp_nbr = 60;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 2 1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 1 2 2 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 3 5 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([1 4 16 2 14 25 3 38 4 36 5 11 14 19 21 6 12 18 7 13 30 32 8 20 6 9 15 10 20 5 11 18 12 15 22 35 7 13 16 20 23 5 8 14 6 12 15 21 22 7 10 16 3 17 26 18 30 31 11 14 19 34 9 20 7 13 16 21 23 19 21 22 23 13 16 17 23 24 39 1 4 24 8 25 37 3 15 26 1 10 27 2 28 29 34 35 30 31 32 11 12 31 13 32 9 26 33 5 11 14 19 29 34 6 12 15 22 29 35 1 7 16 27 36 5 14 25 28 37 6 15 26 33 38 2 25 39 ]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([1 1 1 2 2 2 3 3 4 4 5 5 5 5 5 6 6 6 7 7 7 7 8 8 9 9 9 10 10 11 11 11 12 12 12 12 13 13 13 13 13 14 14 14 15 15 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 19 20 20 21 21 21 21 21 22 22 22 22 23 23 23 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 29 29 29 30 30 30 31 31 31 32 32 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 36 36 36 36 36 37 37 37 37 37 38 38 38 38 38 39 39 39 ]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([1 4 7 9 11 16 19 23 25 28 30 33 37 42 45 50 53 56 59 63 65 70 74 80 83 86 89 92 94 97 100 103 105 108 114 120 125 130 135 138 ]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([53 55 56 60 5 6 10 11 55 5 7 11 36 42 45 53 56 60 6 8 11 37 43 46 53 56 60 56 9 38 44 47 51 53 55 56 60 39 51 40 51 41 51 50 36 39 45 50 56 57 37 40 46 50 56 58 38 41 47 50 56 59 48 54 36 42 48 49 56 57 37 43 48 49 56 58 1 2 49 54 1 3 38 44 48 54 56 59 1 2 3 10 36 37 57 58 62 64 63 64 38 59 63 64 2 3 10 65 27 28 29 30 31 32 66 2 67 3 68 30 33 45 31 34 46 32 35 47 2 42 43 54 3 44 54 54 21 24 30 36 45 53 57 22 25 31 37 46 53 58 23 26 32 38 47 53 59 53 21 30 39 22 31 40 23 32 41 24 33 25 34 26 35 12 27 39 13 28 40 14 29 41 15 27 16 28 17 29 7 8 9 10 52 7 36 42 45 52 57 8 37 43 46 52 58 9 38 44 47 52 59 4 10 5 7 42 45 6 8 43 46 9 27 28 29 44 47 4 27 30 33 28 31 34 29 32 35 12 15 18 27 13 16 19 28 14 17 20 29 84 60 57 60 58 60 59 60 18 19 20 27 28 29 30 31 32 36 37 38 39 40 41 45 46 47 56 57 58 59 61 85 86 87 88 89 90 91 69 76 70 71 72 76 73 74 75 76 77 78 79 80 81 82 83 85 86 87 91 88 92 93 94 95 96 97 98 90 99 100 89 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 6 6 6 6 6 6 6 6 6 7 7 8 8 9 9 10 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 14 14 15 15 15 15 15 15 16 16 16 16 16 16 17 17 17 17 18 18 18 18 18 18 18 18 19 19 19 19 20 20 20 20 20 20 21 21 22 22 22 22 23 23 23 23 24 24 24 24 24 24 24 25 25 26 26 27 27 27 28 28 28 29 29 29 30 30 30 30 31 31 31 32 33 33 33 33 33 33 33 34 34 34 34 34 34 34 35 35 35 35 35 35 35 36 37 37 37 38 38 38 39 39 39 40 40 41 41 42 42 43 43 43 44 44 44 45 45 45 46 46 47 47 48 48 49 49 49 49 49 50 50 50 50 50 50 51 51 51 51 51 51 52 52 52 52 52 52 53 53 54 54 54 54 55 55 55 55 56 56 56 56 56 56 57 58 58 58 59 59 59 60 60 60 61 61 61 61 62 62 62 62 63 63 63 63 64 65 66 66 67 67 68 68 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 70 70 71 72 73 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 ]);
M_.static_g1_sparse_colptr = int32([1 5 10 19 28 29 38 40 42 44 45 51 57 63 65 71 77 81 89 93 99 101 105 109 116 118 120 123 126 129 133 136 137 144 151 158 159 162 165 168 170 172 174 177 180 183 185 187 189 194 200 206 212 214 218 222 228 229 232 235 238 242 246 250 251 252 254 256 258 288 290 291 292 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 ]);
M_.params(1) = 2.0;
sigma = M_.params(1);
M_.params(2) = 0.99;
beta = M_.params(2);
M_.params(3) = 0.0045;
g_bar = M_.params(3);
M_.params(4) = 0.72;
nu = M_.params(4);
M_.params(15) = 0.1;
ha = M_.params(15);
M_.params(7) = 1.15;
mu_ss = M_.params(7);
M_.params(5) = 0.85;
xi = M_.params(5);
M_.params(6) = 0.65;
omega_sc = M_.params(6);
M_.params(8) = 0.32;
sigma_ac = M_.params(8);
M_.params(9) = 0.32;
sigma_ai = M_.params(9);
M_.params(10) = 1.5;
Psi_K = M_.params(10);
M_.params(11) = 0.20;
I_Y = M_.params(11);
M_.params(12) = 11;
K_Y = M_.params(12);
M_.params(13) = 0.67;
labor_share = M_.params(13);
M_.params(14) = 0.2;
nu_R = M_.params(14);
M_.params(17) = 0.20;
eta = M_.params(17);
M_.params(16) = 0.32;
phi = M_.params(16);
M_.params(18) = 0.81;
Psi = M_.params(18);
M_.params(19) = 0.5;
theta = M_.params(19);
M_.params(27) = 1.0;
p_I_ss = M_.params(27);
M_.params(28) = 0.30;
N_ss = M_.params(28);
M_.params(20) = 0.1;
rho_g = M_.params(20);
M_.params(21) = 0.9;
rho_Z = M_.params(21);
M_.params(22) = 0.9;
rho_ZI = M_.params(22);
M_.params(23) = 0.9;
rho_N = M_.params(23);
M_.params(24) = 0.9;
rho_b = M_.params(24);
M_.params(25) = 0.9;
rho_muC = M_.params(25);
M_.params(26) = 0.9;
rho_muI = M_.params(26);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = 5.184e-05;
M_.Sigma_e(2, 2) = 5.184e-05;
M_.Sigma_e(3, 3) = 5.184e-05;
M_.Sigma_e(4, 4) = 5.184e-05;
M_.Sigma_e(5, 5) = 5.184e-05;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.param_vals(:,1)==1))
    error('Parameter sigma has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 1, 1.5, 1.0, 4.0, 1, 1.5, 0.25, 1.0, 4.0, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter ha has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 0.5, 0.0, 0.95, 1, 0.5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==4))
    error('Parameter nu has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 4, 0.72, 0.05, 2.0, 2, 0.72, 0.25, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==16))
    error('Parameter phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 16, 0.8, 0.00, 0.999, 1, 0.32, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==17))
    error('Parameter eta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 17, 0.567, 0.00, 10.0, 2, 0.2, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==5))
    error('Parameter xi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 5, 0.85, 0.5, 2.0, 2, 0.85, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter nu_R has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 0.20, 0.01, 0.5, 1, 0.2, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter sigma_ac has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==9))
    error('Parameter sigma_ai has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 9, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==10))
    error('Parameter Psi_K has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 10, 1.5, 0.0, 50, 2, 4, 1.0, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==19))
    error('Parameter theta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 19, 0.5, .00, 10, 2, 1, 0.5, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, 0.1, 0.0001, 0.9, 1, 0.1, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==21))
    error('Parameter rho_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 21, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==22))
    error('Parameter rho_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 22, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==23))
    error('Parameter rho_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 23, 0.99, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==24))
    error('Parameter rho_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 24, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==25))
    error('Parameter rho_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 25, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==26))
    error('Parameter rho_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 26, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for e_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.01, 0.0000001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for e_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.01, 0.00001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for e_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for e_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for e_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.01, 0.0001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for e_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for e_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
options_.TeX=1;
options_.MCMC_jumping_covariance = 'prior_variance';
options_.TeX = true;
options_.datafile = 'observables_sectoral';
options_.lik_init = 2;
options_.load_mh_file = true;
options_.mh_drop = 0.3;
options_.mh_init_scale = 0.0001;
options_.mh_jscale = 0.001;
options_.mh_nblck = 2;
options_.mh_replic = 0;
options_.mode_check.status = true;
options_.mode_compute = 0;
options_.mode_file = 'SU_sectoral_wo_dem_shocks_res_mh_mode';
options_.optim_opt = '''MaxIter'',200';
options_.presample = 0;
options_.prior_trunc = 0;
options_.order = 1;
var_list_ = {'Y_obs';'Y_N_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'SR_obs';'util_obs';'D_obs';'h_obs'};
oo_recursive_=dynare_estimation(var_list_);
write_latex_parameter_table;
write_latex_definitions;
write_latex_prior_table;
collect_latex_files;
options_.irf = 0;
options_.nofunctions = true;
options_.order = 1;
options_.periods = 0;
var_list_ = {'Y_obs';'Y_N_obs';'SR_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'util_obs';'D_obs';'h_obs'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_dem_shocks_res_results.mat'], 'options_mom_', '-append');
end
disp('Note: 2 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
