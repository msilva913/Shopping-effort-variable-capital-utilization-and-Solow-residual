%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'SU_sectoral_wo_vcu';
M_.dynare_version = '6.3';
oo_.dynare_version = '6.3';
options_.dynare_version = '6.3';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(9,1);
M_.exo_names_tex = cell(9,1);
M_.exo_names_long = cell(9,1);
M_.exo_names(1) = {'e_g'};
M_.exo_names_tex(1) = {'{e_g}'};
M_.exo_names_long(1) = {'Labor-augmenting-technology growth shock'};
M_.exo_names(2) = {'e_Z'};
M_.exo_names_tex(2) = {'{e_Z}'};
M_.exo_names_long(2) = {'TFP shock'};
M_.exo_names(3) = {'e_ZI'};
M_.exo_names_tex(3) = {'{e_{ZI}}'};
M_.exo_names_long(3) = {'Investment-specific tech shock'};
M_.exo_names(4) = {'e_N'};
M_.exo_names_tex(4) = {'{e_N}'};
M_.exo_names_long(4) = {'Labor supply shock'};
M_.exo_names(5) = {'e_D'};
M_.exo_names_tex(5) = {'{e_D}'};
M_.exo_names_long(5) = {'Shopping disutility shock'};
M_.exo_names(6) = {'e_DI'};
M_.exo_names_tex(6) = {'{e_DI}'};
M_.exo_names_long(6) = {'Relative investment shopping disutility shock'};
M_.exo_names(7) = {'e_b'};
M_.exo_names_tex(7) = {'{e_b}'};
M_.exo_names_long(7) = {'Discount factor shock'};
M_.exo_names(8) = {'e_muC'};
M_.exo_names_tex(8) = {'{e_{muC}}'};
M_.exo_names_long(8) = {'Wage markup shock: C'};
M_.exo_names(9) = {'e_muI'};
M_.exo_names_tex(9) = {'{e_{muI}}'};
M_.exo_names_long(9) = {'Wage markup shock: I'};
M_.endo_names = cell(93,1);
M_.endo_names_tex = cell(93,1);
M_.endo_names_long = cell(93,1);
M_.endo_names(1) = {'Y'};
M_.endo_names_tex(1) = {'{Y}'};
M_.endo_names_long(1) = {'output'};
M_.endo_names(2) = {'C'};
M_.endo_names_tex(2) = {'{C}'};
M_.endo_names_long(2) = {'consumption'};
M_.endo_names(3) = {'Y_mc'};
M_.endo_names_tex(3) = {'{Y_{mc}}'};
M_.endo_names_long(3) = {'consumption non-durable goods'};
M_.endo_names(4) = {'Y_sc'};
M_.endo_names_tex(4) = {'Y_{sc}}'};
M_.endo_names_long(4) = {'consumption services'};
M_.endo_names(5) = {'SR'};
M_.endo_names_tex(5) = {'{SR}'};
M_.endo_names_long(5) = {'aggregate share-weighted Solow residual'};
M_.endo_names(6) = {'I'};
M_.endo_names_tex(6) = {'{I}'};
M_.endo_names_long(6) = {'investment'};
M_.endo_names(7) = {'I_mc'};
M_.endo_names_tex(7) = {'{I_C}'};
M_.endo_names_long(7) = {'investment:mc'};
M_.endo_names(8) = {'I_sc'};
M_.endo_names_tex(8) = {'{I_C}'};
M_.endo_names_long(8) = {'investment:sc'};
M_.endo_names(9) = {'I_I'};
M_.endo_names_tex(9) = {'{I_I}'};
M_.endo_names_long(9) = {'investment:I'};
M_.endo_names(10) = {'K'};
M_.endo_names_tex(10) = {'{K}'};
M_.endo_names_long(10) = {'Capital'};
M_.endo_names(11) = {'K_mc'};
M_.endo_names_tex(11) = {'{K_{mc}}'};
M_.endo_names_long(11) = {'Capital:mc'};
M_.endo_names(12) = {'K_sc'};
M_.endo_names_tex(12) = {'{K_{sc}}'};
M_.endo_names_long(12) = {'Capital:sc'};
M_.endo_names(13) = {'K_I'};
M_.endo_names_tex(13) = {'{K_I}'};
M_.endo_names_long(13) = {'Capital:I'};
M_.endo_names(14) = {'N'};
M_.endo_names_tex(14) = {'{N}'};
M_.endo_names_long(14) = {'Hours'};
M_.endo_names(15) = {'N_mc'};
M_.endo_names_tex(15) = {'{N_{mc}}'};
M_.endo_names_long(15) = {'Hours:mc'};
M_.endo_names(16) = {'N_sc'};
M_.endo_names_tex(16) = {'{N_{sc}}'};
M_.endo_names_long(16) = {'Hours:sc'};
M_.endo_names(17) = {'N_C'};
M_.endo_names_tex(17) = {'{N_C}'};
M_.endo_names_long(17) = {'Hours:C'};
M_.endo_names(18) = {'N_I'};
M_.endo_names_tex(18) = {'{N_I}'};
M_.endo_names_long(18) = {'Hours:I'};
M_.endo_names(19) = {'N_comp'};
M_.endo_names_tex(19) = {'{N}'};
M_.endo_names_long(19) = {'Labor CES aggregate'};
M_.endo_names(20) = {'Z_C'};
M_.endo_names_tex(20) = {'{Z_{C}}'};
M_.endo_names_long(20) = {'Tech:mc'};
M_.endo_names(21) = {'u_ZI'};
M_.endo_names_tex(21) = {'u\_ZI'};
M_.endo_names_long(21) = {'u_ZI'};
M_.endo_names(22) = {'Z_I'};
M_.endo_names_tex(22) = {'{Z_I}'};
M_.endo_names_long(22) = {'Tech:I'};
M_.endo_names(23) = {'tech'};
M_.endo_names_tex(23) = {'{tech}'};
M_.endo_names_long(23) = {'General technology measure'};
M_.endo_names(24) = {'theta_N'};
M_.endo_names_tex(24) = {'{\theta_N}'};
M_.endo_names_long(24) = {'Labor disutility'};
M_.endo_names(25) = {'theta_D'};
M_.endo_names_tex(25) = {'{\theta_D}'};
M_.endo_names_long(25) = {'Shopping disutility'};
M_.endo_names(26) = {'theta_I'};
M_.endo_names_tex(26) = {'{\theta_I}'};
M_.endo_names_long(26) = {'Relative shopping disutility'};
M_.endo_names(27) = {'theta_b'};
M_.endo_names_tex(27) = {'{\theta_b}'};
M_.endo_names_long(27) = {'Discount factor shock'};
M_.endo_names(28) = {'mu_C'};
M_.endo_names_tex(28) = {'{\mu_C}'};
M_.endo_names_long(28) = {'mu_C'};
M_.endo_names(29) = {'mu_I'};
M_.endo_names_tex(29) = {'\mu_I}'};
M_.endo_names_long(29) = {'mu_I'};
M_.endo_names(30) = {'R_mc'};
M_.endo_names_tex(30) = {'{R_{mc}}'};
M_.endo_names_long(30) = {'Capital rental rate:mc'};
M_.endo_names(31) = {'R_sc'};
M_.endo_names_tex(31) = {'{R_{sc}}'};
M_.endo_names_long(31) = {'Capital rental rate:sc'};
M_.endo_names(32) = {'R_I'};
M_.endo_names_tex(32) = {'{R_I}'};
M_.endo_names_long(32) = {'Capital rental rate:I'};
M_.endo_names(33) = {'W_C'};
M_.endo_names_tex(33) = {'{W_C}'};
M_.endo_names_long(33) = {'Real wage:C'};
M_.endo_names(34) = {'W_I'};
M_.endo_names_tex(34) = {'{W_I}'};
M_.endo_names_long(34) = {'Real wage:I'};
M_.endo_names(35) = {'W'};
M_.endo_names_tex(35) = {'{W}'};
M_.endo_names_long(35) = {'Real wage'};
M_.endo_names(36) = {'Smc'};
M_.endo_names_tex(36) = {'S'};
M_.endo_names_long(36) = {'Investment adjustment cost:mc'};
M_.endo_names(37) = {'Ssc'};
M_.endo_names_tex(37) = {'S'};
M_.endo_names_long(37) = {'Investment adjustment cost:sc'};
M_.endo_names(38) = {'Si'};
M_.endo_names_tex(38) = {'S'};
M_.endo_names_long(38) = {'Investment adjustment cost:I'};
M_.endo_names(39) = {'Smc_pr'};
M_.endo_names_tex(39) = {'S_pr'};
M_.endo_names_long(39) = {'Derivative investment adjustment cost:mc'};
M_.endo_names(40) = {'Ssc_pr'};
M_.endo_names_tex(40) = {'S_pr'};
M_.endo_names_long(40) = {'Derivative investment adjustment cost:sc'};
M_.endo_names(41) = {'Si_pr'};
M_.endo_names_tex(41) = {'S_pr'};
M_.endo_names_long(41) = {'Derivative investment adjustment cost:I'};
M_.endo_names(42) = {'D'};
M_.endo_names_tex(42) = {'{D}'};
M_.endo_names_long(42) = {'Shopping effort'};
M_.endo_names(43) = {'D_mc'};
M_.endo_names_tex(43) = {'{D_{mc}}'};
M_.endo_names_long(43) = {'Shopping effort:mc'};
M_.endo_names(44) = {'D_sc'};
M_.endo_names_tex(44) = {'{D_{sc}}'};
M_.endo_names_long(44) = {'Shopping effort:sc'};
M_.endo_names(45) = {'D_I'};
M_.endo_names_tex(45) = {'{D_I}'};
M_.endo_names_long(45) = {'Shopping effort:I'};
M_.endo_names(46) = {'Gam'};
M_.endo_names_tex(46) = {'{\Gamma}'};
M_.endo_names_long(46) = {'Composite utility term'};
M_.endo_names(47) = {'p_mc'};
M_.endo_names_tex(47) = {'{p_{mc}}'};
M_.endo_names_long(47) = {'Relative non-durable price'};
M_.endo_names(48) = {'p_sc'};
M_.endo_names_tex(48) = {'{p_{sc}}'};
M_.endo_names_long(48) = {'Relative service price'};
M_.endo_names(49) = {'p_I'};
M_.endo_names_tex(49) = {'{p_I}'};
M_.endo_names_long(49) = {'Relative investment price'};
M_.endo_names(50) = {'lam'};
M_.endo_names_tex(50) = {'{\lambda}'};
M_.endo_names_long(50) = {'Marginal utility of wealth'};
M_.endo_names(51) = {'Q_mc'};
M_.endo_names_tex(51) = {'{Q}'};
M_.endo_names_long(51) = {'Relative price of capital:mc'};
M_.endo_names(52) = {'Q_sc'};
M_.endo_names_tex(52) = {'{Q}'};
M_.endo_names_long(52) = {'Relative price of capital:sc'};
M_.endo_names(53) = {'Q_I'};
M_.endo_names_tex(53) = {'{Q}'};
M_.endo_names_long(53) = {'Relative price of capital:I'};
M_.endo_names(54) = {'x_mc'};
M_.endo_names_tex(54) = {'{x}'};
M_.endo_names_long(54) = {'Growth rate of investment:mc'};
M_.endo_names(55) = {'x_sc'};
M_.endo_names_tex(55) = {'{x}'};
M_.endo_names_long(55) = {'Growth rate of investment:sc'};
M_.endo_names(56) = {'x_I'};
M_.endo_names_tex(56) = {'{x}'};
M_.endo_names_long(56) = {'Growth rate of investment:I'};
M_.endo_names(57) = {'log_SR'};
M_.endo_names_tex(57) = {'log\_SR'};
M_.endo_names_long(57) = {'Solow residual'};
M_.endo_names(58) = {'util'};
M_.endo_names_tex(58) = {'{util}'};
M_.endo_names_long(58) = {'Capacity utilization'};
M_.endo_names(59) = {'util_ND'};
M_.endo_names_tex(59) = {'{util_{ND}}'};
M_.endo_names_long(59) = {'Capacity utilization:ND'};
M_.endo_names(60) = {'util_sc'};
M_.endo_names_tex(60) = {'{util_{sc}}'};
M_.endo_names_long(60) = {'Capacity utilization:sc'};
M_.endo_names(61) = {'util_D'};
M_.endo_names_tex(61) = {'{util_D}'};
M_.endo_names_long(61) = {'Capacity utilization:D'};
M_.endo_names(62) = {'g'};
M_.endo_names_tex(62) = {'{g}'};
M_.endo_names_long(62) = {'Growth rate of stochastic trend'};
M_.endo_names(63) = {'log_Y'};
M_.endo_names_tex(63) = {'log\_Y'};
M_.endo_names_long(63) = {'log_Y'};
M_.endo_names(64) = {'log_C'};
M_.endo_names_tex(64) = {'log\_C'};
M_.endo_names_long(64) = {'log_C'};
M_.endo_names(65) = {'log_I'};
M_.endo_names_tex(65) = {'log\_I'};
M_.endo_names_long(65) = {'log_I'};
M_.endo_names(66) = {'log_N'};
M_.endo_names_tex(66) = {'log\_N'};
M_.endo_names_long(66) = {'log_N'};
M_.endo_names(67) = {'log_NC'};
M_.endo_names_tex(67) = {'log\_NC'};
M_.endo_names_long(67) = {'log_NC'};
M_.endo_names(68) = {'log_NI'};
M_.endo_names_tex(68) = {'log\_NI'};
M_.endo_names_long(68) = {'log_NI'};
M_.endo_names(69) = {'log_K'};
M_.endo_names_tex(69) = {'log\_K'};
M_.endo_names_long(69) = {'log_K'};
M_.endo_names(70) = {'log_Y_N'};
M_.endo_names_tex(70) = {'log\_Y\_N'};
M_.endo_names_long(70) = {'log_Y_N'};
M_.endo_names(71) = {'log_D'};
M_.endo_names_tex(71) = {'log\_D'};
M_.endo_names_long(71) = {'log_D'};
M_.endo_names(72) = {'log_p_I'};
M_.endo_names_tex(72) = {'log\_p\_I'};
M_.endo_names_long(72) = {'log_p_I'};
M_.endo_names(73) = {'log_util'};
M_.endo_names_tex(73) = {'log\_util'};
M_.endo_names_long(73) = {'log_util'};
M_.endo_names(74) = {'log_util_ND'};
M_.endo_names_tex(74) = {'log\_util\_ND'};
M_.endo_names_long(74) = {'log_util_ND'};
M_.endo_names(75) = {'log_util_D'};
M_.endo_names_tex(75) = {'log\_util\_D'};
M_.endo_names_long(75) = {'log_util_D'};
M_.endo_names(76) = {'log_W'};
M_.endo_names_tex(76) = {'log\_W'};
M_.endo_names_long(76) = {'log_W'};
M_.endo_names(77) = {'log_tech'};
M_.endo_names_tex(77) = {'log\_tech'};
M_.endo_names_long(77) = {'log_tech'};
M_.endo_names(78) = {'C_obs'};
M_.endo_names_tex(78) = {'C\_obs'};
M_.endo_names_long(78) = {'C_obs'};
M_.endo_names(79) = {'I_obs'};
M_.endo_names_tex(79) = {'I\_obs'};
M_.endo_names_long(79) = {'I_obs'};
M_.endo_names(80) = {'Y_obs'};
M_.endo_names_tex(80) = {'Y\_obs'};
M_.endo_names_long(80) = {'Y_obs'};
M_.endo_names(81) = {'SR_obs'};
M_.endo_names_tex(81) = {'SR\_obs'};
M_.endo_names_long(81) = {'SR_obs'};
M_.endo_names(82) = {'Y_N_obs'};
M_.endo_names_tex(82) = {'Y\_N\_obs'};
M_.endo_names_long(82) = {'Y_N_obs'};
M_.endo_names(83) = {'p_I_obs'};
M_.endo_names_tex(83) = {'p\_I\_obs'};
M_.endo_names_long(83) = {'p_I_obs'};
M_.endo_names(84) = {'N_obs'};
M_.endo_names_tex(84) = {'N\_obs'};
M_.endo_names_long(84) = {'N_obs'};
M_.endo_names(85) = {'NC_obs'};
M_.endo_names_tex(85) = {'NC\_obs'};
M_.endo_names_long(85) = {'NC_obs'};
M_.endo_names(86) = {'NI_obs'};
M_.endo_names_tex(86) = {'NI\_obs'};
M_.endo_names_long(86) = {'NI_obs'};
M_.endo_names(87) = {'util_ND_obs'};
M_.endo_names_tex(87) = {'util\_ND\_obs'};
M_.endo_names_long(87) = {'util_ND_obs'};
M_.endo_names(88) = {'util_D_obs'};
M_.endo_names_tex(88) = {'util\_D\_obs'};
M_.endo_names_long(88) = {'util_D_obs'};
M_.endo_names(89) = {'util_obs'};
M_.endo_names_tex(89) = {'util\_obs'};
M_.endo_names_long(89) = {'util_obs'};
M_.endo_names(90) = {'tech_obs'};
M_.endo_names_tex(90) = {'tech\_obs'};
M_.endo_names_long(90) = {'tech_obs'};
M_.endo_names(91) = {'w_obs'};
M_.endo_names_tex(91) = {'w\_obs'};
M_.endo_names_long(91) = {'w_obs'};
M_.endo_names(92) = {'D_obs'};
M_.endo_names_tex(92) = {'D\_obs'};
M_.endo_names_long(92) = {'D_obs'};
M_.endo_names(93) = {'K_obs'};
M_.endo_names_tex(93) = {'K\_obs'};
M_.endo_names_long(93) = {'K_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(28,1);
M_.param_names_tex = cell(28,1);
M_.param_names_long = cell(28,1);
M_.param_names(1) = {'sigma'};
M_.param_names_tex(1) = {'{\sigma}'};
M_.param_names_long(1) = {'Risk aversion'};
M_.param_names(2) = {'beta'};
M_.param_names_tex(2) = {'{\beta}'};
M_.param_names_long(2) = {'Discount factor'};
M_.param_names(3) = {'g_bar'};
M_.param_names_tex(3) = {'{\overline{g}}'};
M_.param_names_long(3) = {'Quarterly trend growth rate'};
M_.param_names(4) = {'nu'};
M_.param_names_tex(4) = {'\nu'};
M_.param_names_long(4) = {'Frisch elasticity'};
M_.param_names(5) = {'xi'};
M_.param_names_tex(5) = {'\xi'};
M_.param_names_long(5) = {'elasticity of substitution between non-durables and services'};
M_.param_names(6) = {'omega_sc'};
M_.param_names_tex(6) = {'\omega_{sc}'};
M_.param_names_long(6) = {'Weight of services in aggregator'};
M_.param_names(7) = {'mu_ss'};
M_.param_names_tex(7) = {'\mu_{ss}'};
M_.param_names_long(7) = {'steady-state wage markup'};
M_.param_names(8) = {'Psi_K'};
M_.param_names_tex(8) = {'{\Psi_{K}}'};
M_.param_names_long(8) = {'Investment adjustment cost parameter'};
M_.param_names(9) = {'I_Y'};
M_.param_names_tex(9) = {'{I_Y}'};
M_.param_names_long(9) = {'Investment-output ratio'};
M_.param_names(10) = {'K_Y'};
M_.param_names_tex(10) = {'{K_Y}'};
M_.param_names_long(10) = {'Capital-output ratio (quarterly)'};
M_.param_names(11) = {'labor_share'};
M_.param_names_tex(11) = {'(labor share)'};
M_.param_names_long(11) = {'Labor share'};
M_.param_names(12) = {'nu_R'};
M_.param_names_tex(12) = {'{\nu_R}'};
M_.param_names_long(12) = {'Fixed cost share'};
M_.param_names(13) = {'ha'};
M_.param_names_tex(13) = {'{ha}'};
M_.param_names_long(13) = {'Habit persistence'};
M_.param_names(14) = {'phi'};
M_.param_names_tex(14) = {'{\phi}'};
M_.param_names_long(14) = {'Shopping matching function elasticity'};
M_.param_names(15) = {'eta'};
M_.param_names_tex(15) = {'{\eta}'};
M_.param_names_long(15) = {'Shopping disutility'};
M_.param_names(16) = {'Psi'};
M_.param_names_tex(16) = {'{\Psi}'};
M_.param_names_long(16) = {'Matching utilization'};
M_.param_names(17) = {'theta'};
M_.param_names_tex(17) = {'{\theta}'};
M_.param_names_long(17) = {'Inverse intersectoral elasticity of labor supply'};
M_.param_names(18) = {'rho_g'};
M_.param_names_tex(18) = {'{\rho_g}'};
M_.param_names_long(18) = {'persistence TFP growth shock'};
M_.param_names(19) = {'rho_Z'};
M_.param_names_tex(19) = {'{\rho_Z}'};
M_.param_names_long(19) = {'persistence TFP shock'};
M_.param_names(20) = {'rho_ZI'};
M_.param_names_tex(20) = {'{\rho_{ZI}}'};
M_.param_names_long(20) = {'persistence I-specific shock'};
M_.param_names(21) = {'rho_N'};
M_.param_names_tex(21) = {'{\rho_N}'};
M_.param_names_long(21) = {'persistence labor supply shock'};
M_.param_names(22) = {'rho_D'};
M_.param_names_tex(22) = {'{\rho_D}'};
M_.param_names_long(22) = {'persistence shopping effort shock'};
M_.param_names(23) = {'rho_DI'};
M_.param_names_tex(23) = {'{\rho_{DI}}'};
M_.param_names_long(23) = {'persistence relative shopping effort shock'};
M_.param_names(24) = {'rho_b'};
M_.param_names_tex(24) = {'{\rho_b}'};
M_.param_names_long(24) = {'persistence discount factor shock'};
M_.param_names(25) = {'rho_muC'};
M_.param_names_tex(25) = {'{\rho_{muC}}'};
M_.param_names_long(25) = {'persistence wage markup shock:C'};
M_.param_names(26) = {'rho_muI'};
M_.param_names_tex(26) = {'{\rho_{muI}}'};
M_.param_names_long(26) = {'persistence wage markup shock:I'};
M_.param_names(27) = {'p_I_ss'};
M_.param_names_tex(27) = {'p\_I\_ss'};
M_.param_names_long(27) = {'p_I_ss'};
M_.param_names(28) = {'N_ss'};
M_.param_names_tex(28) = {'N\_ss'};
M_.param_names_long(28) = {'N_ss'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 9;
M_.endo_nbr = 93;
M_.param_nbr = 28;
M_.orig_endo_nbr = 93;
M_.aux_vars = [];
options_.varobs = cell(7, 1);
options_.varobs(1)  = {'NC_obs'};
options_.varobs(2)  = {'NI_obs'};
options_.varobs(3)  = {'C_obs'};
options_.varobs(4)  = {'I_obs'};
options_.varobs(5)  = {'p_I_obs'};
options_.varobs(6)  = {'util_ND_obs'};
options_.varobs(7)  = {'util_D_obs'};
options_.varobs_id = [ 85 86 78 79 83 87 88  ];
M_.Sigma_e = zeros(9, 9);
M_.Correlation_matrix = eye(9, 9);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 93;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 33 0;
 1 34 0;
 0 35 0;
 0 36 0;
 0 37 0;
 0 38 0;
 2 39 0;
 3 40 0;
 4 41 0;
 0 42 0;
 5 43 0;
 6 44 0;
 7 45 0;
 0 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 0 50 0;
 0 51 0;
 8 52 0;
 0 53 0;
 9 54 0;
 0 55 0;
 10 56 0;
 11 57 0;
 12 58 0;
 13 59 0;
 14 60 0;
 15 61 0;
 0 62 126;
 0 63 127;
 0 64 128;
 0 65 0;
 0 66 0;
 0 67 0;
 0 68 0;
 0 69 0;
 0 70 0;
 0 71 129;
 0 72 130;
 0 73 131;
 0 74 0;
 0 75 0;
 0 76 0;
 0 77 0;
 0 78 0;
 0 79 0;
 0 80 0;
 0 81 0;
 0 82 132;
 0 83 133;
 0 84 134;
 0 85 135;
 0 86 136;
 0 87 137;
 0 88 138;
 16 89 0;
 0 90 0;
 0 91 0;
 0 92 0;
 0 93 0;
 17 94 139;
 18 95 0;
 19 96 0;
 20 97 0;
 21 98 0;
 22 99 0;
 23 100 0;
 24 101 0;
 25 102 0;
 26 103 0;
 27 104 0;
 28 105 0;
 29 106 0;
 30 107 0;
 31 108 0;
 32 109 0;
 0 110 0;
 0 111 0;
 0 112 0;
 0 113 0;
 0 114 0;
 0 115 0;
 0 116 0;
 0 117 0;
 0 118 0;
 0 119 0;
 0 120 0;
 0 121 0;
 0 122 0;
 0 123 0;
 0 124 0;
 0 125 0;]';
M_.nstatic = 48;
M_.nfwrd   = 13;
M_.npred   = 31;
M_.nboth   = 1;
M_.nsfwrd   = 14;
M_.nspred   = 32;
M_.ndynamic   = 45;
M_.dynamic_tmp_nbr = [70; 14; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Labor composite' ;
  2 , 'name' , 'Labor leisure:C' ;
  3 , 'name' , 'Labor leisure:I' ;
  4 , 'name' , 'Marginal utility of wealth' ;
  5 , 'name' , 'Demand curve: mc' ;
  6 , 'name' , 'Demand curve: sc' ;
  7 , 'name' , 'Shopping:mc' ;
  8 , 'name' , 'Shopping:sc' ;
  9 , 'name' , 'Shopping:I' ;
  10 , 'name' , 'Composite utility term' ;
  11 , 'name' , 'Consumption CES aggregator' ;
  12 , 'name' , 'Investment adjustment cost function:mc' ;
  13 , 'name' , 'Investment adjustment cost function:mc' ;
  14 , 'name' , 'Investment adjustment cost function:I' ;
  15 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  16 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  17 , 'name' , 'Investment adjustment cost function: derivative I' ;
  18 , 'name' , 'Investment growth:mc' ;
  19 , 'name' , 'Investment growth:mc' ;
  20 , 'name' , 'Investment growth:I' ;
  21 , 'name' , 'Tobins Q: mc' ;
  22 , 'name' , 'Tobins Q: sc' ;
  23 , 'name' , 'Tobins Q: I' ;
  24 , 'name' , 'Euler equation: mc' ;
  25 , 'name' , 'Euler equation: sc' ;
  26 , 'name' , 'Euler equation: I' ;
  27 , 'name' , 'Non-durable goods production' ;
  28 , 'name' , 'Services production' ;
  29 , 'name' , 'Investment production' ;
  30 , 'name' , 'Capital law of motion:mc' ;
  31 , 'name' , 'Capital law of motion:sc' ;
  32 , 'name' , 'Capital law of motion:I' ;
  33 , 'name' , 'Labor demand:mc' ;
  34 , 'name' , 'Labor demand:sc' ;
  35 , 'name' , 'Labor demand:I' ;
  36 , 'name' , 'Capital demand:mc' ;
  37 , 'name' , 'Capital demand:sc' ;
  38 , 'name' , 'Capital demand:I' ;
  39 , 'name' , 'Labor composition' ;
  40 , 'name' , 'Labor composition: C' ;
  41 , 'name' , 'Capital composition' ;
  42 , 'name' , 'Investment composition' ;
  43 , 'name' , 'Shopping composition' ;
  44 , 'name' , 'Aggregate wage' ;
  45 , 'name' , 'Output (base-year prices)' ;
  46 , 'name' , 'Solow residual' ;
  47 , 'name' , 'Capacity utilization' ;
  48 , 'name' , 'util_D' ;
  49 , 'name' , 'util_sc' ;
  50 , 'name' , 'util' ;
  51 , 'name' , 'General technology measure' ;
  52 , 'name' , 'stochastic trend process' ;
  53 , 'name' , 'Stationary TFP process' ;
  54 , 'name' , 'Independent component of I-specific tech' ;
  55 , 'name' , 'Investment-specific TFP process' ;
  56 , 'name' , 'Labor supply process' ;
  57 , 'name' , 'Shopping effort process' ;
  58 , 'name' , 'Relative shopping effort process' ;
  59 , 'name' , 'Consumption preference process' ;
  60 , 'name' , 'Wage-markup process: C' ;
  61 , 'name' , 'Wage-markup process: I' ;
  62 , 'name' , 'Definition log output' ;
  63 , 'name' , 'Definition log consumption' ;
  64 , 'name' , 'Definition log investment' ;
  65 , 'name' , 'Definition log hours' ;
  66 , 'name' , 'log_NC' ;
  67 , 'name' , 'log_NI' ;
  68 , 'name' , 'log capital' ;
  69 , 'name' , 'Definition log labor productivity' ;
  70 , 'name' , 'Definition log shopping effort' ;
  71 , 'name' , 'Definition of log relative investment  price' ;
  72 , 'name' , 'Definition of log capacity utilization' ;
  73 , 'name' , 'log_util_ND' ;
  74 , 'name' , 'log_util_D' ;
  75 , 'name' , 'Definition of log wages' ;
  76 , 'name' , 'Definition of log Solow residual' ;
  77 , 'name' , 'Definition of log technology' ;
  78 , 'name' , 'C_obs' ;
  79 , 'name' , 'I_obs' ;
  80 , 'name' , 'Y_obs' ;
  81 , 'name' , 'Y_N_obs' ;
  82 , 'name' , 'K_obs' ;
  83 , 'name' , 'w_obs' ;
  84 , 'name' , 'SR_obs' ;
  85 , 'name' , 'tech_obs' ;
  86 , 'name' , 'p_I_obs' ;
  87 , 'name' , 'N_obs' ;
  88 , 'name' , 'NC_obs' ;
  89 , 'name' , 'NI_obs' ;
  90 , 'name' , 'util_ND_obs' ;
  91 , 'name' , 'util_D_obs' ;
  92 , 'name' , 'util_obs' ;
  93 , 'name' , 'D_obs' ;
};
M_.mapping.Y.eqidx = [45 46 50 51 62 ];
M_.mapping.C.eqidx = [5 6 10 11 45 51 63 ];
M_.mapping.Y_mc.eqidx = [5 7 11 27 33 36 46 50 ];
M_.mapping.Y_sc.eqidx = [6 8 11 28 34 37 46 50 ];
M_.mapping.SR.eqidx = [46 76 ];
M_.mapping.I.eqidx = [9 29 35 38 42 45 46 50 51 64 ];
M_.mapping.I_mc.eqidx = [18 30 42 ];
M_.mapping.I_sc.eqidx = [19 31 42 ];
M_.mapping.I_I.eqidx = [20 32 42 ];
M_.mapping.K.eqidx = [41 68 ];
M_.mapping.K_mc.eqidx = [27 30 36 41 46 ];
M_.mapping.K_sc.eqidx = [28 31 37 41 46 ];
M_.mapping.K_I.eqidx = [29 32 38 41 46 ];
M_.mapping.N.eqidx = [39 44 65 ];
M_.mapping.N_mc.eqidx = [27 33 39 40 46 ];
M_.mapping.N_sc.eqidx = [28 34 39 40 46 ];
M_.mapping.N_C.eqidx = [1 2 40 44 66 ];
M_.mapping.N_I.eqidx = [1 3 29 35 39 44 46 67 ];
M_.mapping.N_comp.eqidx = [1 2 3 10 ];
M_.mapping.Z_C.eqidx = [27 28 51 53 55 ];
M_.mapping.u_ZI.eqidx = [54 55 ];
M_.mapping.Z_I.eqidx = [29 51 54 55 ];
M_.mapping.tech.eqidx = [51 77 ];
M_.mapping.theta_N.eqidx = [2 3 10 56 ];
M_.mapping.theta_D.eqidx = [7 8 9 10 57 ];
M_.mapping.theta_I.eqidx = [9 43 58 ];
M_.mapping.theta_b.eqidx = [21 22 23 24 25 26 59 ];
M_.mapping.mu_C.eqidx = [2 60 ];
M_.mapping.mu_I.eqidx = [3 61 ];
M_.mapping.R_mc.eqidx = [24 36 ];
M_.mapping.R_sc.eqidx = [25 37 ];
M_.mapping.R_I.eqidx = [26 38 ];
M_.mapping.W_C.eqidx = [2 33 34 44 ];
M_.mapping.W_I.eqidx = [3 35 44 ];
M_.mapping.W.eqidx = [44 75 ];
M_.mapping.Smc.eqidx = [12 21 30 ];
M_.mapping.Ssc.eqidx = [13 22 31 ];
M_.mapping.Si.eqidx = [14 23 32 ];
M_.mapping.Smc_pr.eqidx = [15 21 ];
M_.mapping.Ssc_pr.eqidx = [16 22 ];
M_.mapping.Si_pr.eqidx = [17 23 ];
M_.mapping.D.eqidx = [7 8 9 10 43 70 ];
M_.mapping.D_mc.eqidx = [7 27 33 36 43 47 ];
M_.mapping.D_sc.eqidx = [8 28 34 37 43 49 ];
M_.mapping.D_I.eqidx = [9 29 35 38 43 48 ];
M_.mapping.Gam.eqidx = [4 10 ];
M_.mapping.p_mc.eqidx = [5 7 33 36 ];
M_.mapping.p_sc.eqidx = [6 8 34 37 ];
M_.mapping.p_I.eqidx = [9 21 22 23 35 38 71 ];
M_.mapping.lam.eqidx = [4 21 22 23 24 25 26 ];
M_.mapping.Q_mc.eqidx = [21 24 ];
M_.mapping.Q_sc.eqidx = [22 25 ];
M_.mapping.Q_I.eqidx = [23 26 ];
M_.mapping.x_mc.eqidx = [12 15 18 21 ];
M_.mapping.x_sc.eqidx = [13 16 19 22 ];
M_.mapping.x_I.eqidx = [14 17 20 23 ];
M_.mapping.log_SR.eqidx = [76 84 ];
M_.mapping.util.eqidx = [50 72 ];
M_.mapping.util_ND.eqidx = [47 50 73 ];
M_.mapping.util_sc.eqidx = [49 50 ];
M_.mapping.util_D.eqidx = [48 50 74 ];
M_.mapping.g.eqidx = [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 36 37 38 46 52 78 79 80 81 82 83 84 85 ];
M_.mapping.log_Y.eqidx = [62 69 80 ];
M_.mapping.log_C.eqidx = [63 78 ];
M_.mapping.log_I.eqidx = [64 79 ];
M_.mapping.log_N.eqidx = [65 69 87 ];
M_.mapping.log_NC.eqidx = [66 88 ];
M_.mapping.log_NI.eqidx = [67 89 ];
M_.mapping.log_K.eqidx = [68 82 ];
M_.mapping.log_Y_N.eqidx = [69 81 ];
M_.mapping.log_D.eqidx = [70 93 ];
M_.mapping.log_p_I.eqidx = [71 86 ];
M_.mapping.log_util.eqidx = [72 92 ];
M_.mapping.log_util_ND.eqidx = [73 90 ];
M_.mapping.log_util_D.eqidx = [74 91 ];
M_.mapping.log_W.eqidx = [75 83 ];
M_.mapping.log_tech.eqidx = [77 85 ];
M_.mapping.C_obs.eqidx = [78 ];
M_.mapping.I_obs.eqidx = [79 ];
M_.mapping.Y_obs.eqidx = [80 ];
M_.mapping.SR_obs.eqidx = [84 ];
M_.mapping.Y_N_obs.eqidx = [81 ];
M_.mapping.p_I_obs.eqidx = [86 ];
M_.mapping.N_obs.eqidx = [87 ];
M_.mapping.NC_obs.eqidx = [88 ];
M_.mapping.NI_obs.eqidx = [89 ];
M_.mapping.util_ND_obs.eqidx = [90 ];
M_.mapping.util_D_obs.eqidx = [91 ];
M_.mapping.util_obs.eqidx = [92 ];
M_.mapping.tech_obs.eqidx = [85 ];
M_.mapping.w_obs.eqidx = [83 ];
M_.mapping.D_obs.eqidx = [93 ];
M_.mapping.K_obs.eqidx = [82 ];
M_.mapping.e_g.eqidx = [52 ];
M_.mapping.e_Z.eqidx = [53 ];
M_.mapping.e_ZI.eqidx = [54 ];
M_.mapping.e_N.eqidx = [56 ];
M_.mapping.e_D.eqidx = [57 ];
M_.mapping.e_DI.eqidx = [58 ];
M_.mapping.e_b.eqidx = [59 ];
M_.mapping.e_muC.eqidx = [60 ];
M_.mapping.e_muI.eqidx = [61 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 8;
M_.block_structure.block(1).mfs = 8;
M_.block_structure.block(1).equation = [ 52 53 56 57 58 59 60 61];
M_.block_structure.block(1).variable = [ 62 20 24 25 26 27 28 29];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 16;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ];
M_.block_structure.block(2).Simulation_Type = 6;
M_.block_structure.block(2).endo_nbr = 2;
M_.block_structure.block(2).mfs = 2;
M_.block_structure.block(2).equation = [ 54 55];
M_.block_structure.block(2).variable = [ 21 22];
M_.block_structure.block(2).is_linear = true;
M_.block_structure.block(2).NNZDerivatives = 4;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 2 ];
M_.block_structure.block(3).Simulation_Type = 8;
M_.block_structure.block(3).endo_nbr = 41;
M_.block_structure.block(3).mfs = 33;
M_.block_structure.block(3).equation = [ 12 14 40 42 6 1 5 13 9 10 27 28 29 33 34 35 8 43 7 2 3 11 18 19 20 30 31 32 15 16 17 21 22 23 24 25 26 36 37 38 4];
M_.block_structure.block(3).variable = [ 36 38 17 6 4 19 3 37 42 46 15 16 18 47 48 49 44 45 43 33 34 2 7 8 9 11 12 13 39 40 41 54 55 56 51 52 53 30 31 32 50];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 181;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [14 15 16 17 18 19 20 0 0 0 0 0 0 0 0 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 87 88 89 90 91 92 93 94 95 96 97 98 99 ];
M_.block_structure.block(4).Simulation_Type = 1;
M_.block_structure.block(4).endo_nbr = 42;
M_.block_structure.block(4).mfs = 42;
M_.block_structure.block(4).equation = [ 49 48 47 45 50 72 71 70 66 67 89 73 74 90 91 92 39 88 65 87 86 62 51 46 44 41 93 77 76 75 69 68 64 63 85 84 83 82 81 80 79 78];
M_.block_structure.block(4).variable = [ 60 61 59 1 58 73 72 71 67 68 86 74 75 87 88 89 14 85 66 84 83 63 23 5 35 10 92 77 57 76 70 69 65 64 90 81 91 93 82 80 79 78];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 92;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [6 7 8 9 10 12 13 19 22 28 29 30 31 32 33 34 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 2 2 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 1 2 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 3 4 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([2 15 16 17 3 18 30 4 19 31 5 20 32 1 2 9 10 11 2 33 2 3 6 12 13 2 4 7 12 13 2 5 8 12 13 3 6 11 14 30 4 7 9 14 31 1 8 24 25 26 32 4 7 9 10 31 1 5 8 10 32 3 6 10 11 30 6 7 12 8 13 2 3 4 6 7 9 11 14 30 31 1 5 8 15 18 32 1 5 8 16 19 32 1 5 8 17 20 32 18 19 20 21 24 22 25 23 26 15 18 21 24 16 19 22 25 17 20 23 26 24 27 25 28 26 29 30 31 32 24 25 26 27 28 29 33 24 25 26 24 25 26 24 27 25 28 26 29 27 28 29 24 25 26 27 28 29 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([14 15 16 17 18 18 18 19 19 19 20 20 20 34 34 34 34 34 35 35 36 36 36 36 36 37 37 37 37 37 38 38 38 38 38 39 39 39 39 39 40 40 40 40 40 41 41 41 41 41 41 42 42 42 42 42 43 43 43 43 43 44 44 44 44 44 45 45 45 46 46 47 47 47 47 47 47 47 47 47 47 48 48 48 48 48 48 49 49 49 49 49 49 50 50 50 50 50 50 51 52 53 54 54 55 55 56 56 57 57 57 57 58 58 58 58 59 59 59 59 60 60 61 61 62 62 63 64 65 66 66 66 66 66 66 66 87 88 89 90 91 92 93 93 94 94 95 95 96 97 98 99 99 99 99 99 99 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 8 11 14 14 14 14 14 14 14 14 14 14 14 14 14 14 19 21 26 31 36 41 46 52 57 62 67 70 72 82 88 94 100 101 102 103 105 107 109 113 117 121 123 125 127 128 129 130 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 138 139 140 141 142 143 145 147 149 150 151 152 158 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([]);
M_.block_structure.block(4).g1_sparse_colval = int32([]);
M_.block_structure.block(4).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 62 20 24 25 26 27 28 29 21 22 36 38 17 6 4 19 3 37 42 46 15 16 18 47 48 49 44 45 43 33 34 2 7 8 9 11 12 13 39 40 41 54 55 56 51 52 53 30 31 32 50 60 61 59 1 58 73 72 71 67 68 86 74 75 87 88 89 14 85 66 84 83 63 23 5 35 10 92 77 57 76 70 69 65 64 90 81 91 93 82 80 79 78];
M_.block_structure.equation_reordered = [ 52 53 56 57 58 59 60 61 54 55 12 14 40 42 6 1 5 13 9 10 27 28 29 33 34 35 8 43 7 2 3 11 18 19 20 30 31 32 15 16 17 21 22 23 24 25 26 36 37 38 4 49 48 47 45 50 72 71 70 66 67 89 73 74 90 91 92 39 88 65 87 86 62 51 46 44 41 93 77 76 75 69 68 64 63 85 84 83 82 81 80 79 78];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 10 2;
 18 7;
 19 8;
 20 9;
 27 11;
 28 12;
 29 13;
 30 11;
 31 12;
 32 13;
 36 11;
 37 12;
 38 13;
 46 11;
 46 12;
 46 13;
 52 62;
 53 20;
 54 22;
 56 24;
 57 25;
 58 26;
 59 27;
 60 28;
 61 29;
 78 64;
 79 65;
 80 63;
 81 70;
 82 69;
 83 76;
 84 57;
 85 77;
 86 72;
 87 66;
 88 67;
 89 68;
 90 74;
 91 75;
 92 73;
 93 71;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 24;
 2 28;
 2 33;
 3 18;
 3 19;
 3 24;
 3 29;
 3 34;
 4 46;
 4 50;
 5 2;
 5 3;
 5 47;
 6 2;
 6 4;
 6 48;
 7 3;
 7 25;
 7 42;
 7 43;
 7 47;
 8 4;
 8 25;
 8 42;
 8 44;
 8 48;
 9 6;
 9 25;
 9 26;
 9 42;
 9 45;
 9 49;
 10 2;
 10 19;
 10 24;
 10 25;
 10 42;
 10 46;
 11 2;
 11 3;
 11 4;
 12 36;
 12 54;
 13 37;
 13 55;
 14 38;
 14 56;
 15 39;
 15 54;
 16 40;
 16 55;
 17 41;
 17 56;
 18 7;
 18 54;
 18 62;
 19 8;
 19 55;
 19 62;
 20 9;
 20 56;
 20 62;
 21 27;
 21 36;
 21 39;
 21 49;
 21 50;
 21 51;
 21 54;
 22 27;
 22 37;
 22 40;
 22 49;
 22 50;
 22 52;
 22 55;
 23 27;
 23 38;
 23 41;
 23 49;
 23 50;
 23 53;
 23 56;
 24 27;
 24 50;
 24 51;
 25 27;
 25 50;
 25 52;
 26 27;
 26 50;
 26 53;
 27 3;
 27 15;
 27 20;
 27 43;
 27 62;
 28 4;
 28 16;
 28 20;
 28 44;
 28 62;
 29 6;
 29 18;
 29 22;
 29 45;
 29 62;
 30 7;
 30 11;
 30 36;
 30 62;
 31 8;
 31 12;
 31 37;
 31 62;
 32 9;
 32 13;
 32 38;
 32 62;
 33 3;
 33 15;
 33 33;
 33 43;
 33 47;
 34 4;
 34 16;
 34 33;
 34 44;
 34 48;
 35 6;
 35 18;
 35 34;
 35 45;
 35 49;
 36 3;
 36 30;
 36 43;
 36 47;
 36 62;
 37 4;
 37 31;
 37 44;
 37 48;
 37 62;
 38 6;
 38 32;
 38 45;
 38 49;
 38 62;
 39 14;
 39 15;
 39 16;
 39 18;
 40 15;
 40 16;
 40 17;
 41 10;
 41 11;
 41 12;
 41 13;
 42 6;
 42 7;
 42 8;
 42 9;
 43 26;
 43 42;
 43 43;
 43 44;
 43 45;
 44 14;
 44 17;
 44 18;
 44 33;
 44 34;
 44 35;
 45 1;
 45 2;
 45 6;
 46 1;
 46 3;
 46 4;
 46 5;
 46 6;
 46 15;
 46 16;
 46 18;
 46 62;
 47 43;
 47 59;
 48 45;
 48 61;
 49 44;
 49 60;
 50 1;
 50 3;
 50 4;
 50 6;
 50 58;
 50 59;
 50 60;
 50 61;
 51 1;
 51 2;
 51 6;
 51 20;
 51 22;
 51 23;
 52 62;
 53 20;
 54 21;
 55 20;
 55 21;
 55 22;
 56 24;
 57 25;
 58 26;
 59 27;
 60 28;
 61 29;
 62 1;
 62 63;
 63 2;
 63 64;
 64 6;
 64 65;
 65 14;
 65 66;
 66 17;
 66 67;
 67 18;
 67 68;
 68 10;
 68 69;
 69 63;
 69 66;
 69 70;
 70 42;
 70 71;
 71 49;
 71 72;
 72 58;
 72 73;
 73 59;
 73 74;
 74 61;
 74 75;
 75 35;
 75 76;
 76 5;
 76 57;
 77 23;
 77 77;
 78 62;
 78 64;
 78 78;
 79 62;
 79 65;
 79 79;
 80 62;
 80 63;
 80 80;
 81 62;
 81 70;
 81 82;
 82 62;
 82 69;
 82 93;
 83 62;
 83 76;
 83 91;
 84 57;
 84 62;
 84 81;
 85 62;
 85 77;
 85 90;
 86 72;
 86 83;
 87 66;
 87 84;
 88 67;
 88 85;
 89 68;
 89 86;
 90 74;
 90 87;
 91 75;
 91 88;
 92 73;
 92 89;
 93 71;
 93 92;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 21 39;
 21 50;
 21 51;
 21 54;
 21 62;
 22 40;
 22 50;
 22 52;
 22 55;
 22 62;
 23 41;
 23 50;
 23 53;
 23 56;
 23 62;
 24 30;
 24 50;
 24 51;
 24 62;
 25 31;
 25 50;
 25 52;
 25 62;
 26 32;
 26 50;
 26 53;
 26 62;
];
M_.block_structure.dyn_tmp_nbr = 73;
M_.state_var = [62 20 24 25 26 27 28 29 22 2 7 8 9 11 12 13 73 72 71 67 68 74 75 66 63 77 57 76 70 69 65 64 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(93, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(9, 1);
M_.params = NaN(28, 1);
M_.endo_trends = struct('deflator', cell(93, 1), 'log_deflator', cell(93, 1), 'growth_factor', cell(93, 1), 'log_growth_factor', cell(93, 1));
M_.NNZDerivatives = [374; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([10 18 19 20 27 30 36 46 28 31 37 46 29 32 38 46 53 54 56 57 58 59 60 61 84 52 80 78 79 87 88 89 82 81 93 86 92 90 91 83 85 45 46 50 51 62 5 6 10 11 45 51 63 5 7 11 27 33 36 46 50 6 8 11 28 34 37 46 50 46 76 9 29 35 38 42 45 46 50 51 64 18 30 42 19 31 42 20 32 42 41 68 30 41 31 41 32 41 39 44 65 27 33 39 40 46 28 34 39 40 46 1 2 40 44 66 1 3 29 35 39 44 46 67 1 2 3 10 27 28 51 53 55 54 55 29 51 55 51 77 2 3 10 56 7 8 9 10 57 9 43 58 21 22 23 24 25 26 59 2 60 3 61 36 37 38 2 33 34 44 3 35 44 44 75 12 21 30 13 22 31 14 23 32 15 21 16 22 17 23 7 8 9 10 43 70 7 27 33 36 43 47 8 28 34 37 43 49 9 29 35 38 43 48 4 10 5 7 33 36 6 8 34 37 9 21 22 23 35 38 71 4 21 22 23 24 25 26 21 24 22 25 23 26 12 15 18 21 13 16 19 22 14 17 20 23 76 84 50 72 47 50 73 49 50 48 50 74 18 19 20 27 28 29 30 31 32 36 37 38 46 52 78 79 80 81 82 83 84 85 62 69 80 63 78 64 79 65 69 87 66 88 67 89 68 82 69 81 70 93 71 86 72 92 73 90 74 91 75 83 77 85 78 79 80 84 81 86 87 88 89 90 91 92 85 83 93 82 24 25 26 21 22 23 21 22 23 24 25 26 21 24 22 25 23 26 21 22 23 21 22 23 24 25 26 52 53 54 56 57 58 59 60 61 ]);
M_.dynamic_g1_sparse_colval = int32([2 7 8 9 11 11 11 11 12 12 12 12 13 13 13 13 20 22 24 25 26 27 28 29 57 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 94 94 94 94 94 95 95 95 95 95 95 95 96 96 96 96 96 96 96 96 97 97 97 97 97 97 97 97 98 98 99 99 99 99 99 99 99 99 99 99 100 100 100 101 101 101 102 102 102 103 103 104 104 105 105 106 106 107 107 107 108 108 108 108 108 109 109 109 109 109 110 110 110 110 110 111 111 111 111 111 111 111 111 112 112 112 112 113 113 113 113 113 114 114 115 115 115 116 116 117 117 117 117 118 118 118 118 118 119 119 119 120 120 120 120 120 120 120 121 121 122 122 123 124 125 126 126 126 126 127 127 127 128 128 129 129 129 130 130 130 131 131 131 132 132 133 133 134 134 135 135 135 135 135 135 136 136 136 136 136 136 137 137 137 137 137 137 138 138 138 138 138 138 139 139 140 140 140 140 141 141 141 141 142 142 142 142 142 142 142 143 143 143 143 143 143 143 144 144 145 145 146 146 147 147 147 147 148 148 148 148 149 149 149 149 150 150 151 151 152 152 152 153 153 154 154 154 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 155 156 156 156 157 157 158 158 159 159 159 160 160 161 161 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 216 217 218 225 226 227 236 236 236 236 236 236 237 237 238 238 239 239 240 241 242 248 248 248 248 248 248 280 281 282 283 284 285 286 287 288 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 2 2 2 2 2 3 4 5 5 9 13 17 17 17 17 17 17 17 18 18 19 19 20 21 22 23 24 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 26 26 26 26 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 47 54 62 70 72 82 85 88 91 93 95 97 99 102 107 112 117 125 129 134 136 139 141 145 150 153 160 162 164 165 166 167 171 174 176 179 182 185 187 189 191 197 203 209 215 217 221 225 232 239 241 243 245 249 253 257 259 261 264 266 269 291 294 296 298 301 303 305 307 309 311 313 315 317 319 321 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 340 341 342 342 342 342 342 342 342 343 344 345 345 345 345 345 345 345 345 345 351 353 355 357 358 359 360 360 360 360 360 360 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 367 368 369 370 371 372 373 374 375 ]);
M_.lhs = {
'N_comp'; 
'(1-I_Y)^(-theta)*(N_C/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'(1-(1-I_Y))^(-theta)*(N_I/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'lam'; 
'Y_mc'; 
'Y_sc'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)*exp(theta_I)'; 
'Gam'; 
'C'; 
'Smc'; 
'Ssc'; 
'Si'; 
'Smc_pr'; 
'Ssc_pr'; 
'Si_pr'; 
'x_mc'; 
'x_sc'; 
'x_I'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'Q_mc'; 
'Q_sc'; 
'Q_I'; 
'Y_mc'; 
'Y_sc'; 
'I'; 
'exp(g)*K_mc'; 
'exp(g)*K_sc'; 
'exp(g)*K_I'; 
'(1-phi)*W_C/p_mc'; 
'(1-phi)*W_C/p_sc'; 
'(1-phi)*W_I/p_I'; 
'(1-phi)*R_mc/p_mc'; 
'(1-phi)*R_sc/p_sc'; 
'(1-phi)*R_I/p_I'; 
'N'; 
'N_C'; 
'K'; 
'I'; 
'D'; 
'W'; 
'Y'; 
'SR'; 
'util_ND'; 
'util_D'; 
'util_sc'; 
'util'; 
'tech'; 
'g'; 
'Z_C'; 
'u_ZI'; 
'Z_I'; 
'theta_N'; 
'theta_D'; 
'theta_I'; 
'theta_b'; 
'mu_C'; 
'mu_I'; 
'log_Y'; 
'log_C'; 
'log_I'; 
'log_N'; 
'log_NC'; 
'log_NI'; 
'log_K'; 
'log_Y_N'; 
'log_D'; 
'log_p_I'; 
'log_util'; 
'log_util_ND'; 
'log_util_D'; 
'log_W'; 
'log_SR'; 
'log_tech'; 
'C_obs'; 
'I_obs'; 
'Y_obs'; 
'Y_N_obs'; 
'K_obs'; 
'w_obs'; 
'SR_obs'; 
'tech_obs'; 
'p_I_obs'; 
'N_obs'; 
'NC_obs'; 
'NI_obs'; 
'util_ND_obs'; 
'util_D_obs'; 
'util_obs'; 
'D_obs'; 
};
M_.static_tmp_nbr = [69; 12; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 52];
M_.block_structure_stat.block(1).variable = [ 62];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 53];
M_.block_structure_stat.block(2).variable = [ 20];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 56];
M_.block_structure_stat.block(3).variable = [ 24];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 57];
M_.block_structure_stat.block(4).variable = [ 25];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 58];
M_.block_structure_stat.block(5).variable = [ 26];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 59];
M_.block_structure_stat.block(6).variable = [ 27];
M_.block_structure_stat.block(7).Simulation_Type = 3;
M_.block_structure_stat.block(7).endo_nbr = 1;
M_.block_structure_stat.block(7).mfs = 1;
M_.block_structure_stat.block(7).equation = [ 60];
M_.block_structure_stat.block(7).variable = [ 28];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 61];
M_.block_structure_stat.block(8).variable = [ 29];
M_.block_structure_stat.block(9).Simulation_Type = 1;
M_.block_structure_stat.block(9).endo_nbr = 25;
M_.block_structure_stat.block(9).mfs = 25;
M_.block_structure_stat.block(9).equation = [ 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 18 19 20 12 13 14 15 16 17];
M_.block_structure_stat.block(9).variable = [ 78 79 80 82 93 91 81 90 83 84 85 86 87 88 89 92 54 55 56 36 37 38 39 40 41];
M_.block_structure_stat.block(10).Simulation_Type = 6;
M_.block_structure_stat.block(10).endo_nbr = 2;
M_.block_structure_stat.block(10).mfs = 2;
M_.block_structure_stat.block(10).equation = [ 54 55];
M_.block_structure_stat.block(10).variable = [ 21 22];
M_.block_structure_stat.block(11).Simulation_Type = 6;
M_.block_structure_stat.block(11).endo_nbr = 30;
M_.block_structure_stat.block(11).mfs = 30;
M_.block_structure_stat.block(11).equation = [ 34 35 36 37 38 32 40 9 42 43 33 25 11 26 27 21 28 29 1 2 3 24 5 6 7 8 30 23 22 31];
M_.block_structure_stat.block(11).variable = [ 16 34 43 44 49 13 15 6 9 45 47 31 2 32 11 51 12 18 17 33 19 30 3 4 42 48 7 53 52 8];
M_.block_structure_stat.block(12).Simulation_Type = 1;
M_.block_structure_stat.block(12).endo_nbr = 28;
M_.block_structure_stat.block(12).mfs = 28;
M_.block_structure_stat.block(12).equation = [ 49 48 47 45 10 39 65 62 51 50 46 44 41 77 76 75 74 73 72 71 70 69 68 67 66 64 63 4];
M_.block_structure_stat.block(12).variable = [ 60 61 59 1 46 14 66 63 23 58 5 35 10 77 57 76 75 74 73 72 71 70 69 68 67 65 64 50];
M_.block_structure_stat.variable_reordered = [ 62 20 24 25 26 27 28 29 78 79 80 82 93 91 81 90 83 84 85 86 87 88 89 92 54 55 56 36 37 38 39 40 41 21 22 16 34 43 44 49 13 15 6 9 45 47 31 2 32 11 51 12 18 17 33 19 30 3 4 42 48 7 53 52 8 60 61 59 1 46 14 66 63 23 58 5 35 10 77 57 76 75 74 73 72 71 70 69 68 67 65 64 50];
M_.block_structure_stat.equation_reordered = [ 52 53 56 57 58 59 60 61 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 18 19 20 12 13 14 15 16 17 54 55 34 35 36 37 38 32 40 9 42 43 33 25 11 26 27 21 28 29 1 2 3 24 5 6 7 8 30 23 22 31 49 48 47 45 10 39 65 62 51 50 46 44 41 77 76 75 74 73 72 71 70 69 68 67 66 64 63 4];
M_.block_structure_stat.incidence.sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 24;
 2 28;
 2 33;
 3 18;
 3 19;
 3 24;
 3 29;
 3 34;
 4 46;
 4 50;
 5 2;
 5 3;
 5 47;
 6 2;
 6 4;
 6 48;
 7 3;
 7 25;
 7 42;
 7 43;
 7 47;
 8 4;
 8 25;
 8 42;
 8 44;
 8 48;
 9 6;
 9 25;
 9 26;
 9 42;
 9 45;
 9 49;
 10 2;
 10 19;
 10 24;
 10 25;
 10 42;
 10 46;
 11 2;
 11 3;
 11 4;
 12 36;
 12 54;
 13 37;
 13 55;
 14 38;
 14 56;
 15 39;
 15 54;
 16 40;
 16 55;
 17 41;
 17 56;
 18 54;
 18 62;
 19 55;
 19 62;
 20 56;
 20 62;
 21 27;
 21 36;
 21 39;
 21 49;
 21 51;
 21 54;
 21 62;
 22 27;
 22 37;
 22 40;
 22 49;
 22 52;
 22 55;
 22 62;
 23 27;
 23 38;
 23 41;
 23 49;
 23 53;
 23 56;
 23 62;
 24 27;
 24 30;
 24 51;
 24 62;
 25 27;
 25 31;
 25 52;
 25 62;
 26 27;
 26 32;
 26 53;
 26 62;
 27 3;
 27 11;
 27 15;
 27 20;
 27 43;
 27 62;
 28 4;
 28 12;
 28 16;
 28 20;
 28 44;
 28 62;
 29 6;
 29 13;
 29 18;
 29 22;
 29 45;
 29 62;
 30 7;
 30 11;
 30 36;
 30 62;
 31 8;
 31 12;
 31 37;
 31 62;
 32 9;
 32 13;
 32 38;
 32 62;
 33 3;
 33 15;
 33 33;
 33 43;
 33 47;
 34 4;
 34 16;
 34 33;
 34 44;
 34 48;
 35 6;
 35 18;
 35 34;
 35 45;
 35 49;
 36 3;
 36 11;
 36 30;
 36 43;
 36 47;
 36 62;
 37 4;
 37 12;
 37 31;
 37 44;
 37 48;
 37 62;
 38 6;
 38 13;
 38 32;
 38 45;
 38 49;
 38 62;
 39 14;
 39 15;
 39 16;
 39 18;
 40 15;
 40 16;
 40 17;
 41 10;
 41 11;
 41 12;
 41 13;
 42 6;
 42 7;
 42 8;
 42 9;
 43 26;
 43 42;
 43 43;
 43 44;
 43 45;
 44 14;
 44 17;
 44 18;
 44 33;
 44 34;
 44 35;
 45 1;
 45 2;
 45 6;
 46 1;
 46 3;
 46 4;
 46 5;
 46 6;
 46 11;
 46 12;
 46 13;
 46 15;
 46 16;
 46 18;
 46 62;
 47 43;
 47 59;
 48 45;
 48 61;
 49 44;
 49 60;
 50 1;
 50 3;
 50 4;
 50 6;
 50 58;
 50 59;
 50 60;
 50 61;
 51 1;
 51 2;
 51 6;
 51 20;
 51 22;
 51 23;
 52 62;
 53 20;
 54 21;
 54 22;
 55 20;
 55 21;
 55 22;
 56 24;
 57 25;
 58 26;
 59 27;
 60 28;
 61 29;
 62 63;
 63 64;
 64 65;
 65 66;
 66 67;
 67 68;
 68 69;
 69 63;
 69 66;
 69 70;
 70 71;
 71 72;
 72 73;
 73 74;
 74 75;
 75 76;
 76 57;
 77 77;
 78 62;
 78 78;
 79 62;
 79 79;
 80 62;
 80 80;
 81 62;
 81 82;
 82 62;
 82 93;
 83 62;
 83 91;
 84 62;
 84 81;
 85 62;
 85 90;
 86 83;
 87 84;
 88 85;
 89 86;
 90 87;
 91 88;
 92 89;
 93 92;
];
M_.block_structure_stat.tmp_nbr = 69;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 2 1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 1 2 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 3 5 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([1 7 17 2 21 3 10 11 15 25 1 4 10 17 26 2 5 8 16 28 29 5 6 18 7 11 15 2 5 8 9 18 6 9 2 5 8 10 18 3 11 23 25 4 12 13 23 24 5 14 3 15 27 16 22 4 17 30 2 18 19 21 7 19 20 1 11 20 19 20 21 3 22 3 11 13 15 23 25 1 4 13 17 24 26 8 10 25 26 1 4 24 26 9 27 14 28 12 29 9 30 ]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([1 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 6 6 6 7 7 7 8 8 8 8 8 9 9 10 10 10 10 10 11 11 11 11 12 12 13 13 13 14 14 15 15 15 16 16 17 17 17 18 18 18 18 19 19 19 20 20 20 21 21 21 22 22 23 23 23 23 23 23 24 24 24 24 24 24 25 25 25 25 26 26 26 26 27 27 28 28 29 29 30 30 ]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 4 6 11 16 22 25 28 33 35 40 44 46 49 51 54 56 59 63 66 69 72 74 80 86 90 94 96 98 100 102 ]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([45 46 50 51 5 6 10 11 45 51 5 7 11 27 33 36 46 50 6 8 11 28 34 37 46 50 46 9 29 35 38 42 45 46 50 51 30 42 31 42 32 42 41 27 30 36 41 46 28 31 37 41 46 29 32 38 41 46 39 44 27 33 39 40 46 28 34 39 40 46 1 2 40 44 1 3 29 35 39 44 46 1 2 3 10 27 28 51 53 55 54 55 29 51 54 55 51 2 3 10 56 7 8 9 10 57 9 43 58 21 22 23 24 25 26 59 2 60 3 61 24 36 25 37 26 38 2 33 34 44 3 35 44 44 12 21 30 13 22 31 14 23 32 15 21 16 22 17 23 7 8 9 10 43 7 27 33 36 43 47 8 28 34 37 43 49 9 29 35 38 43 48 4 10 5 7 33 36 6 8 34 37 9 21 22 23 35 38 4 21 24 22 25 23 26 12 15 18 21 13 16 19 22 14 17 20 23 76 50 47 50 49 50 48 50 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 36 37 38 46 52 78 79 80 81 82 83 84 85 62 69 63 64 65 69 66 67 68 69 70 71 72 73 74 75 77 78 79 80 84 81 86 87 88 89 90 91 92 85 83 93 82 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 6 6 6 6 6 6 6 6 6 7 7 8 8 9 9 10 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 14 14 15 15 15 15 15 16 16 16 16 16 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 20 20 20 20 20 21 21 22 22 22 22 23 24 24 24 24 25 25 25 25 25 26 26 26 27 27 27 27 27 27 27 28 28 29 29 30 30 31 31 32 32 33 33 33 33 34 34 34 35 36 36 36 37 37 37 38 38 38 39 39 40 40 41 41 42 42 42 42 42 43 43 43 43 43 43 44 44 44 44 44 44 45 45 45 45 45 45 46 46 47 47 47 47 48 48 48 48 49 49 49 49 49 49 50 51 51 52 52 53 53 54 54 54 54 55 55 55 55 56 56 56 56 57 58 59 59 60 60 61 61 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 63 63 64 65 66 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 ]);
M_.static_g1_sparse_colptr = int32([1 5 11 19 27 28 37 39 41 43 44 49 54 59 61 66 71 75 82 86 91 93 97 98 102 107 110 117 119 121 123 125 127 131 134 135 138 141 144 146 148 150 155 161 167 173 175 179 183 189 190 192 194 196 200 204 208 209 210 212 214 216 244 246 247 248 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 ]);
M_.params(1) = 2.0;
sigma = M_.params(1);
M_.params(2) = 0.99;
beta = M_.params(2);
M_.params(3) = 0.0045;
g_bar = M_.params(3);
M_.params(4) = 0.72;
nu = M_.params(4);
M_.params(13) = 0.0;
ha = M_.params(13);
M_.params(7) = 1.15;
mu_ss = M_.params(7);
M_.params(5) = 0.85;
xi = M_.params(5);
M_.params(6) = 0.65;
omega_sc = M_.params(6);
sigma_ac = 0.32; 
sigma_ai = 0.32;
M_.params(8) = 1.5;
Psi_K = M_.params(8);
M_.params(9) = 0.20;
I_Y = M_.params(9);
M_.params(10) = 11;
K_Y = M_.params(10);
M_.params(11) = 0.67;
labor_share = M_.params(11);
M_.params(12) = 0.2;
nu_R = M_.params(12);
M_.params(15) = 0.20;
eta = M_.params(15);
M_.params(14) = 0.32;
phi = M_.params(14);
M_.params(16) = 0.81;
Psi = M_.params(16);
M_.params(17) = 0.5;
theta = M_.params(17);
M_.params(27) = 1.0;
p_I_ss = M_.params(27);
M_.params(28) = 0.30;
N_ss = M_.params(28);
M_.params(18) = 0.1;
rho_g = M_.params(18);
M_.params(19) = 0.9;
rho_Z = M_.params(19);
M_.params(20) = 0.9;
rho_ZI = M_.params(20);
M_.params(21) = 0.9;
rho_N = M_.params(21);
M_.params(22) = 0.9;
rho_D = M_.params(22);
M_.params(23) = 0.9;
rho_DI = M_.params(23);
M_.params(24) = 0.9;
rho_b = M_.params(24);
M_.params(25) = 0.9;
rho_muC = M_.params(25);
M_.params(26) = 0.9;
rho_muI = M_.params(26);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = 5.184e-05;
M_.Sigma_e(2, 2) = 5.184e-05;
M_.Sigma_e(3, 3) = 5.184e-05;
M_.Sigma_e(4, 4) = 5.184e-05;
M_.Sigma_e(5, 5) = 5.184e-05;
M_.Sigma_e(6, 6) = 5.184e-05;
M_.Sigma_e(7, 7) = 5.184e-05;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.param_vals(:,1)==1))
    error('Parameter sigma has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 1, 1.5, 1.0, 4.0, 1, 1.5, 0.25, 1.0, 4.0, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==13))
    error('Parameter ha has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 13, 0.5, 0.0, 0.95, 1, 0.5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==4))
    error('Parameter nu has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 4, 0.72, 0.05, 2.0, 2, 0.72, 0.25, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 0.8, 0.00, 0.999, 1, 0.32, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter eta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 0.567, 0.00, 10.0, 2, 0.2, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==5))
    error('Parameter xi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 5, 0.85, 0.5, 2.0, 2, 0.85, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==12))
    error('Parameter nu_R has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 12, 0.20, 0.01, 0.5, 1, 0.2, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter Psi_K has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 1.5, 0.0, 50, 2, 4, 1.0, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==17))
    error('Parameter theta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 17, 0.5, .00, 10, 2, 1, 0.5, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==18))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 18, 0.1, 0.0001, 0.9, 1, 0.1, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==19))
    error('Parameter rho_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 19, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter rho_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==21))
    error('Parameter rho_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 21, 0.6, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==22))
    error('Parameter rho_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 22, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==23))
    error('Parameter rho_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 23, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==24))
    error('Parameter rho_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 24, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==25))
    error('Parameter rho_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 25, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==26))
    error('Parameter rho_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 26, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for e_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.01, 0.0000001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for e_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.01, 0.00001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for e_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for e_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for e_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.01, 0.00001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for e_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for e_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, 0.01, 0.0001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==8))
    error('The standard deviation for e_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 8, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==9))
    error('The standard deviation for e_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 9, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
options_.TeX=1;
options_.MCMC_jumping_covariance = 'prior_variance';
options_.TeX = true;
options_.datafile = 'observables_sectoral';
options_.lik_init = 2;
options_.load_mh_file = true;
options_.mh_drop = 0.3;
options_.mh_init_scale = 0.0001;
options_.mh_jscale = 0.004;
options_.mh_nblck = 2;
options_.mh_replic = 0;
options_.mode_check.status = true;
options_.mode_compute = 0;
options_.mode_file = 'SU_sectoral_wo_vcu_mh_mode';
options_.optim_opt = '''MaxIter'',200';
options_.presample = 0;
options_.prior_trunc = 0;
options_.order = 1;
var_list_ = {'Y_obs';'Y_N_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'SR_obs';'util_obs';'D_obs'};
oo_recursive_=dynare_estimation(var_list_);
write_latex_parameter_table;
write_latex_definitions;
write_latex_prior_table;
collect_latex_files;
options_.irf = 20;
options_.nofunctions = true;
options_.order = 1;
options_.periods = 0;
var_list_ = {'Y_obs';'Y_N_obs';'SR_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'util_obs';'D_obs';'tech_obs'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_wo_vcu_results.mat'], 'options_mom_', '-append');
end
disp('Note: 2 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
