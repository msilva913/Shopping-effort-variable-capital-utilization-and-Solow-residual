%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'SU_sectoral_perfect_mobility';
M_.dynare_version = '6.3';
oo_.dynare_version = '6.3';
options_.dynare_version = '6.3';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(9,1);
M_.exo_names_tex = cell(9,1);
M_.exo_names_long = cell(9,1);
M_.exo_names(1) = {'e_g'};
M_.exo_names_tex(1) = {'{e_g}'};
M_.exo_names_long(1) = {'Labor-augmenting-technology growth shock'};
M_.exo_names(2) = {'e_Z'};
M_.exo_names_tex(2) = {'{e_Z}'};
M_.exo_names_long(2) = {'TFP shock'};
M_.exo_names(3) = {'e_ZI'};
M_.exo_names_tex(3) = {'{e_{ZI}}'};
M_.exo_names_long(3) = {'Investment-specific tech shock'};
M_.exo_names(4) = {'e_N'};
M_.exo_names_tex(4) = {'{e_N}'};
M_.exo_names_long(4) = {'Labor supply shock'};
M_.exo_names(5) = {'e_D'};
M_.exo_names_tex(5) = {'{e_D}'};
M_.exo_names_long(5) = {'Shopping disutility shock'};
M_.exo_names(6) = {'e_DI'};
M_.exo_names_tex(6) = {'{e_DI}'};
M_.exo_names_long(6) = {'Relative investment shopping disutility shock'};
M_.exo_names(7) = {'e_b'};
M_.exo_names_tex(7) = {'{e_b}'};
M_.exo_names_long(7) = {'Discount factor shock'};
M_.exo_names(8) = {'e_muC'};
M_.exo_names_tex(8) = {'{e_{muC}}'};
M_.exo_names_long(8) = {'Wage markup shock: C'};
M_.exo_names(9) = {'e_muI'};
M_.exo_names_tex(9) = {'{e_{muI}}'};
M_.exo_names_long(9) = {'Wage markup shock: I'};
M_.endo_names = cell(104,1);
M_.endo_names_tex = cell(104,1);
M_.endo_names_long = cell(104,1);
M_.endo_names(1) = {'Y'};
M_.endo_names_tex(1) = {'{Y}'};
M_.endo_names_long(1) = {'output'};
M_.endo_names(2) = {'C'};
M_.endo_names_tex(2) = {'{C}'};
M_.endo_names_long(2) = {'consumption'};
M_.endo_names(3) = {'Y_mc'};
M_.endo_names_tex(3) = {'{Y_{mc}}'};
M_.endo_names_long(3) = {'consumption non-durable goods'};
M_.endo_names(4) = {'Y_sc'};
M_.endo_names_tex(4) = {'Y_{sc}}'};
M_.endo_names_long(4) = {'consumption services'};
M_.endo_names(5) = {'SR'};
M_.endo_names_tex(5) = {'{SR}'};
M_.endo_names_long(5) = {'aggregate share-weighted Solow residual'};
M_.endo_names(6) = {'I'};
M_.endo_names_tex(6) = {'{I}'};
M_.endo_names_long(6) = {'investment'};
M_.endo_names(7) = {'I_mc'};
M_.endo_names_tex(7) = {'{I_C}'};
M_.endo_names_long(7) = {'investment:mc'};
M_.endo_names(8) = {'I_sc'};
M_.endo_names_tex(8) = {'{I_C}'};
M_.endo_names_long(8) = {'investment:sc'};
M_.endo_names(9) = {'I_I'};
M_.endo_names_tex(9) = {'{I_I}'};
M_.endo_names_long(9) = {'investment:I'};
M_.endo_names(10) = {'K'};
M_.endo_names_tex(10) = {'{K}'};
M_.endo_names_long(10) = {'Capital'};
M_.endo_names(11) = {'K_mc'};
M_.endo_names_tex(11) = {'{K_{mc}}'};
M_.endo_names_long(11) = {'Capital:mc'};
M_.endo_names(12) = {'K_sc'};
M_.endo_names_tex(12) = {'{K_{sc}}'};
M_.endo_names_long(12) = {'Capital:sc'};
M_.endo_names(13) = {'K_I'};
M_.endo_names_tex(13) = {'{K_I}'};
M_.endo_names_long(13) = {'Capital:I'};
M_.endo_names(14) = {'N'};
M_.endo_names_tex(14) = {'{N}'};
M_.endo_names_long(14) = {'Hours'};
M_.endo_names(15) = {'N_mc'};
M_.endo_names_tex(15) = {'{N_{mc}}'};
M_.endo_names_long(15) = {'Hours:mc'};
M_.endo_names(16) = {'N_sc'};
M_.endo_names_tex(16) = {'{N_{sc}}'};
M_.endo_names_long(16) = {'Hours:sc'};
M_.endo_names(17) = {'N_C'};
M_.endo_names_tex(17) = {'{N_C}'};
M_.endo_names_long(17) = {'Hours:C'};
M_.endo_names(18) = {'N_I'};
M_.endo_names_tex(18) = {'{N_I}'};
M_.endo_names_long(18) = {'Hours:I'};
M_.endo_names(19) = {'Z_C'};
M_.endo_names_tex(19) = {'{Z_{C}}'};
M_.endo_names_long(19) = {'Tech:mc'};
M_.endo_names(20) = {'u_ZI'};
M_.endo_names_tex(20) = {'u\_ZI'};
M_.endo_names_long(20) = {'u_ZI'};
M_.endo_names(21) = {'Z_I'};
M_.endo_names_tex(21) = {'{Z_I}'};
M_.endo_names_long(21) = {'Tech:I'};
M_.endo_names(22) = {'tech'};
M_.endo_names_tex(22) = {'{tech}'};
M_.endo_names_long(22) = {'General technology measure'};
M_.endo_names(23) = {'theta_N'};
M_.endo_names_tex(23) = {'{\theta_N}'};
M_.endo_names_long(23) = {'Labor disutility'};
M_.endo_names(24) = {'theta_D'};
M_.endo_names_tex(24) = {'{\theta_D}'};
M_.endo_names_long(24) = {'Shopping disutility'};
M_.endo_names(25) = {'theta_I'};
M_.endo_names_tex(25) = {'{\theta_I}'};
M_.endo_names_long(25) = {'Relative shopping disutility'};
M_.endo_names(26) = {'theta_b'};
M_.endo_names_tex(26) = {'{\theta_b}'};
M_.endo_names_long(26) = {'Discount factor shock'};
M_.endo_names(27) = {'mu_C'};
M_.endo_names_tex(27) = {'{\mu_C}'};
M_.endo_names_long(27) = {'mu_C'};
M_.endo_names(28) = {'mu_I'};
M_.endo_names_tex(28) = {'\mu_I}'};
M_.endo_names_long(28) = {'mu_I'};
M_.endo_names(29) = {'R_mc'};
M_.endo_names_tex(29) = {'{R_{mc}}'};
M_.endo_names_long(29) = {'Capital rental rate:mc'};
M_.endo_names(30) = {'R_sc'};
M_.endo_names_tex(30) = {'{R_{sc}}'};
M_.endo_names_long(30) = {'Capital rental rate:sc'};
M_.endo_names(31) = {'R_I'};
M_.endo_names_tex(31) = {'{R_I}'};
M_.endo_names_long(31) = {'Capital rental rate:I'};
M_.endo_names(32) = {'W'};
M_.endo_names_tex(32) = {'{W}'};
M_.endo_names_long(32) = {'Real wage'};
M_.endo_names(33) = {'W_C'};
M_.endo_names_tex(33) = {'W\_C'};
M_.endo_names_long(33) = {'W_C'};
M_.endo_names(34) = {'W_I'};
M_.endo_names_tex(34) = {'W\_I'};
M_.endo_names_long(34) = {'W_I'};
M_.endo_names(35) = {'h_mc'};
M_.endo_names_tex(35) = {'{h_mc}'};
M_.endo_names_long(35) = {'Capital utilization rate:mc'};
M_.endo_names(36) = {'h_sc'};
M_.endo_names_tex(36) = {'{h_sc}'};
M_.endo_names_long(36) = {'Capital utilization rate:sc'};
M_.endo_names(37) = {'h_I'};
M_.endo_names_tex(37) = {'{h_I}'};
M_.endo_names_long(37) = {'Capital utilization rate:I'};
M_.endo_names(38) = {'h'};
M_.endo_names_tex(38) = {'h'};
M_.endo_names_long(38) = {'Capital utilization rate: average'};
M_.endo_names(39) = {'delta_mc'};
M_.endo_names_tex(39) = {'{\delta_{mc}}'};
M_.endo_names_long(39) = {'Capital depreciation rate:mc'};
M_.endo_names(40) = {'delta_sc'};
M_.endo_names_tex(40) = {'{\delta_{sc}}'};
M_.endo_names_long(40) = {'Capital depreciation rate:sc'};
M_.endo_names(41) = {'delta_I'};
M_.endo_names_tex(41) = {'{\delta_I}'};
M_.endo_names_long(41) = {'Capital depreciation rate:I'};
M_.endo_names(42) = {'delta_mc_pr'};
M_.endo_names_tex(42) = {'{\delta_{mc,pr}'};
M_.endo_names_long(42) = {'Capital depreciation rate derivative:mc'};
M_.endo_names(43) = {'delta_sc_pr'};
M_.endo_names_tex(43) = {'{\delta_{sc,pr}}'};
M_.endo_names_long(43) = {'Capital depreciation rate derivative:sc'};
M_.endo_names(44) = {'delta_I_pr'};
M_.endo_names_tex(44) = {'{\delta_{I,pr}}'};
M_.endo_names_long(44) = {'Capital depreciation rate derivative:I'};
M_.endo_names(45) = {'Smc'};
M_.endo_names_tex(45) = {'S'};
M_.endo_names_long(45) = {'Investment adjustment cost:mc'};
M_.endo_names(46) = {'Ssc'};
M_.endo_names_tex(46) = {'S'};
M_.endo_names_long(46) = {'Investment adjustment cost:sc'};
M_.endo_names(47) = {'Si'};
M_.endo_names_tex(47) = {'S'};
M_.endo_names_long(47) = {'Investment adjustment cost:I'};
M_.endo_names(48) = {'Smc_pr'};
M_.endo_names_tex(48) = {'S_pr'};
M_.endo_names_long(48) = {'Derivative investment adjustment cost:mc'};
M_.endo_names(49) = {'Ssc_pr'};
M_.endo_names_tex(49) = {'S_pr'};
M_.endo_names_long(49) = {'Derivative investment adjustment cost:sc'};
M_.endo_names(50) = {'Si_pr'};
M_.endo_names_tex(50) = {'S_pr'};
M_.endo_names_long(50) = {'Derivative investment adjustment cost:I'};
M_.endo_names(51) = {'D'};
M_.endo_names_tex(51) = {'{D}'};
M_.endo_names_long(51) = {'Shopping effort'};
M_.endo_names(52) = {'D_mc'};
M_.endo_names_tex(52) = {'{D_{mc}}'};
M_.endo_names_long(52) = {'Shopping effort:mc'};
M_.endo_names(53) = {'D_sc'};
M_.endo_names_tex(53) = {'{D_{sc}}'};
M_.endo_names_long(53) = {'Shopping effort:sc'};
M_.endo_names(54) = {'D_I'};
M_.endo_names_tex(54) = {'{D_I}'};
M_.endo_names_long(54) = {'Shopping effort:I'};
M_.endo_names(55) = {'Gam'};
M_.endo_names_tex(55) = {'{\Gamma}'};
M_.endo_names_long(55) = {'Composite utility term'};
M_.endo_names(56) = {'p_mc'};
M_.endo_names_tex(56) = {'{p_{mc}}'};
M_.endo_names_long(56) = {'Relative non-durable price'};
M_.endo_names(57) = {'p_sc'};
M_.endo_names_tex(57) = {'{p_{sc}}'};
M_.endo_names_long(57) = {'Relative service price'};
M_.endo_names(58) = {'p_I'};
M_.endo_names_tex(58) = {'{p_I}'};
M_.endo_names_long(58) = {'Relative investment price'};
M_.endo_names(59) = {'lam'};
M_.endo_names_tex(59) = {'{\lambda}'};
M_.endo_names_long(59) = {'Marginal utility of wealth'};
M_.endo_names(60) = {'Q_mc'};
M_.endo_names_tex(60) = {'{Q}'};
M_.endo_names_long(60) = {'Relative price of capital:mc'};
M_.endo_names(61) = {'Q_sc'};
M_.endo_names_tex(61) = {'{Q}'};
M_.endo_names_long(61) = {'Relative price of capital:sc'};
M_.endo_names(62) = {'Q_I'};
M_.endo_names_tex(62) = {'{Q}'};
M_.endo_names_long(62) = {'Relative price of capital:I'};
M_.endo_names(63) = {'x_mc'};
M_.endo_names_tex(63) = {'{x}'};
M_.endo_names_long(63) = {'Growth rate of investment:mc'};
M_.endo_names(64) = {'x_sc'};
M_.endo_names_tex(64) = {'{x}'};
M_.endo_names_long(64) = {'Growth rate of investment:sc'};
M_.endo_names(65) = {'x_I'};
M_.endo_names_tex(65) = {'{x}'};
M_.endo_names_long(65) = {'Growth rate of investment:I'};
M_.endo_names(66) = {'log_SR'};
M_.endo_names_tex(66) = {'log\_SR'};
M_.endo_names_long(66) = {'Solow residual'};
M_.endo_names(67) = {'util'};
M_.endo_names_tex(67) = {'{util}'};
M_.endo_names_long(67) = {'Capacity utilization'};
M_.endo_names(68) = {'util_ND'};
M_.endo_names_tex(68) = {'{util_{ND}}'};
M_.endo_names_long(68) = {'Capacity utilization:ND'};
M_.endo_names(69) = {'util_sc'};
M_.endo_names_tex(69) = {'{util_{sc}}'};
M_.endo_names_long(69) = {'Capacity utilization:sc'};
M_.endo_names(70) = {'util_D'};
M_.endo_names_tex(70) = {'{util_D}'};
M_.endo_names_long(70) = {'Capacity utilization:D'};
M_.endo_names(71) = {'g'};
M_.endo_names_tex(71) = {'{g}'};
M_.endo_names_long(71) = {'Growth rate of stochastic trend'};
M_.endo_names(72) = {'log_Y'};
M_.endo_names_tex(72) = {'log\_Y'};
M_.endo_names_long(72) = {'log_Y'};
M_.endo_names(73) = {'log_C'};
M_.endo_names_tex(73) = {'log\_C'};
M_.endo_names_long(73) = {'log_C'};
M_.endo_names(74) = {'log_I'};
M_.endo_names_tex(74) = {'log\_I'};
M_.endo_names_long(74) = {'log_I'};
M_.endo_names(75) = {'log_N'};
M_.endo_names_tex(75) = {'log\_N'};
M_.endo_names_long(75) = {'log_N'};
M_.endo_names(76) = {'log_NC'};
M_.endo_names_tex(76) = {'log\_NC'};
M_.endo_names_long(76) = {'log_NC'};
M_.endo_names(77) = {'log_NI'};
M_.endo_names_tex(77) = {'log\_NI'};
M_.endo_names_long(77) = {'log_NI'};
M_.endo_names(78) = {'log_K'};
M_.endo_names_tex(78) = {'log\_K'};
M_.endo_names_long(78) = {'log_K'};
M_.endo_names(79) = {'log_Y_N'};
M_.endo_names_tex(79) = {'log\_Y\_N'};
M_.endo_names_long(79) = {'log_Y_N'};
M_.endo_names(80) = {'log_D'};
M_.endo_names_tex(80) = {'log\_D'};
M_.endo_names_long(80) = {'log_D'};
M_.endo_names(81) = {'log_h'};
M_.endo_names_tex(81) = {'log\_h'};
M_.endo_names_long(81) = {'log_h'};
M_.endo_names(82) = {'log_p_I'};
M_.endo_names_tex(82) = {'log\_p\_I'};
M_.endo_names_long(82) = {'log_p_I'};
M_.endo_names(83) = {'log_util'};
M_.endo_names_tex(83) = {'log\_util'};
M_.endo_names_long(83) = {'log_util'};
M_.endo_names(84) = {'log_util_ND'};
M_.endo_names_tex(84) = {'log\_util\_ND'};
M_.endo_names_long(84) = {'log_util_ND'};
M_.endo_names(85) = {'log_util_D'};
M_.endo_names_tex(85) = {'log\_util\_D'};
M_.endo_names_long(85) = {'log_util_D'};
M_.endo_names(86) = {'log_W'};
M_.endo_names_tex(86) = {'log\_W'};
M_.endo_names_long(86) = {'log_W'};
M_.endo_names(87) = {'log_tech'};
M_.endo_names_tex(87) = {'log\_tech'};
M_.endo_names_long(87) = {'log_tech'};
M_.endo_names(88) = {'C_obs'};
M_.endo_names_tex(88) = {'C\_obs'};
M_.endo_names_long(88) = {'C_obs'};
M_.endo_names(89) = {'I_obs'};
M_.endo_names_tex(89) = {'I\_obs'};
M_.endo_names_long(89) = {'I_obs'};
M_.endo_names(90) = {'Y_obs'};
M_.endo_names_tex(90) = {'Y\_obs'};
M_.endo_names_long(90) = {'Y_obs'};
M_.endo_names(91) = {'SR_obs'};
M_.endo_names_tex(91) = {'SR\_obs'};
M_.endo_names_long(91) = {'SR_obs'};
M_.endo_names(92) = {'Y_N_obs'};
M_.endo_names_tex(92) = {'Y\_N\_obs'};
M_.endo_names_long(92) = {'Y_N_obs'};
M_.endo_names(93) = {'p_I_obs'};
M_.endo_names_tex(93) = {'p\_I\_obs'};
M_.endo_names_long(93) = {'p_I_obs'};
M_.endo_names(94) = {'N_obs'};
M_.endo_names_tex(94) = {'N\_obs'};
M_.endo_names_long(94) = {'N_obs'};
M_.endo_names(95) = {'NC_obs'};
M_.endo_names_tex(95) = {'NC\_obs'};
M_.endo_names_long(95) = {'NC_obs'};
M_.endo_names(96) = {'NI_obs'};
M_.endo_names_tex(96) = {'NI\_obs'};
M_.endo_names_long(96) = {'NI_obs'};
M_.endo_names(97) = {'util_ND_obs'};
M_.endo_names_tex(97) = {'util\_ND\_obs'};
M_.endo_names_long(97) = {'util_ND_obs'};
M_.endo_names(98) = {'util_D_obs'};
M_.endo_names_tex(98) = {'util\_D\_obs'};
M_.endo_names_long(98) = {'util_D_obs'};
M_.endo_names(99) = {'util_obs'};
M_.endo_names_tex(99) = {'util\_obs'};
M_.endo_names_long(99) = {'util_obs'};
M_.endo_names(100) = {'tech_obs'};
M_.endo_names_tex(100) = {'tech\_obs'};
M_.endo_names_long(100) = {'tech_obs'};
M_.endo_names(101) = {'w_obs'};
M_.endo_names_tex(101) = {'w\_obs'};
M_.endo_names_long(101) = {'w_obs'};
M_.endo_names(102) = {'D_obs'};
M_.endo_names_tex(102) = {'D\_obs'};
M_.endo_names_long(102) = {'D_obs'};
M_.endo_names(103) = {'h_obs'};
M_.endo_names_tex(103) = {'h\_obs'};
M_.endo_names_long(103) = {'h_obs'};
M_.endo_names(104) = {'K_obs'};
M_.endo_names_tex(104) = {'K\_obs'};
M_.endo_names_long(104) = {'K_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(29,1);
M_.param_names_tex = cell(29,1);
M_.param_names_long = cell(29,1);
M_.param_names(1) = {'sigma'};
M_.param_names_tex(1) = {'{\sigma}'};
M_.param_names_long(1) = {'Risk aversion'};
M_.param_names(2) = {'beta'};
M_.param_names_tex(2) = {'{\beta}'};
M_.param_names_long(2) = {'Discount factor'};
M_.param_names(3) = {'g_bar'};
M_.param_names_tex(3) = {'{\overline{g}}'};
M_.param_names_long(3) = {'Quarterly trend growth rate'};
M_.param_names(4) = {'nu'};
M_.param_names_tex(4) = {'\nu'};
M_.param_names_long(4) = {'Frisch elasticity'};
M_.param_names(5) = {'xi'};
M_.param_names_tex(5) = {'\xi'};
M_.param_names_long(5) = {'elasticity of substitution between non-durables and services'};
M_.param_names(6) = {'omega_sc'};
M_.param_names_tex(6) = {'\omega_{sc}'};
M_.param_names_long(6) = {'Weight of services in aggregator'};
M_.param_names(7) = {'mu_ss'};
M_.param_names_tex(7) = {'\mu_{ss}'};
M_.param_names_long(7) = {'steady-state wage markup'};
M_.param_names(8) = {'sigma_ac'};
M_.param_names_tex(8) = {'{\sigma_{ac}}'};
M_.param_names_long(8) = {'Inverse elasticity of marginal utilization cost wrt rental rate:C'};
M_.param_names(9) = {'sigma_ai'};
M_.param_names_tex(9) = {'{\sigma_{ai}}'};
M_.param_names_long(9) = {'Inverse elasticity of marginal utilization cost wrt rental rate:I'};
M_.param_names(10) = {'Psi_K'};
M_.param_names_tex(10) = {'{\Psi_{K}}'};
M_.param_names_long(10) = {'Investment adjustment cost parameter'};
M_.param_names(11) = {'I_Y'};
M_.param_names_tex(11) = {'{I_Y}'};
M_.param_names_long(11) = {'Investment-output ratio'};
M_.param_names(12) = {'K_Y'};
M_.param_names_tex(12) = {'{K_Y}'};
M_.param_names_long(12) = {'Capital-output ratio (quarterly)'};
M_.param_names(13) = {'labor_share'};
M_.param_names_tex(13) = {'(labor share)'};
M_.param_names_long(13) = {'Labor share'};
M_.param_names(14) = {'nu_R'};
M_.param_names_tex(14) = {'{\nu_R}'};
M_.param_names_long(14) = {'Fixed cost share'};
M_.param_names(15) = {'ha'};
M_.param_names_tex(15) = {'{ha}'};
M_.param_names_long(15) = {'Habit persistence'};
M_.param_names(16) = {'phi'};
M_.param_names_tex(16) = {'{\phi}'};
M_.param_names_long(16) = {'Shopping matching function elasticity'};
M_.param_names(17) = {'eta'};
M_.param_names_tex(17) = {'{\eta}'};
M_.param_names_long(17) = {'Shopping disutility'};
M_.param_names(18) = {'Psi'};
M_.param_names_tex(18) = {'{\Psi}'};
M_.param_names_long(18) = {'Matching utilization'};
M_.param_names(19) = {'rho_g'};
M_.param_names_tex(19) = {'{\rho_g}'};
M_.param_names_long(19) = {'persistence TFP growth shock'};
M_.param_names(20) = {'rho_Z'};
M_.param_names_tex(20) = {'{\rho_Z}'};
M_.param_names_long(20) = {'persistence TFP shock'};
M_.param_names(21) = {'rho_ZI'};
M_.param_names_tex(21) = {'{\rho_{ZI}}'};
M_.param_names_long(21) = {'persistence I-specific shock'};
M_.param_names(22) = {'rho_N'};
M_.param_names_tex(22) = {'{\rho_N}'};
M_.param_names_long(22) = {'persistence labor supply shock'};
M_.param_names(23) = {'rho_D'};
M_.param_names_tex(23) = {'{\rho_D}'};
M_.param_names_long(23) = {'persistence shopping effort shock'};
M_.param_names(24) = {'rho_DI'};
M_.param_names_tex(24) = {'{\rho_{DI}}'};
M_.param_names_long(24) = {'persistence relative shopping effort shock'};
M_.param_names(25) = {'rho_b'};
M_.param_names_tex(25) = {'{\rho_b}'};
M_.param_names_long(25) = {'persistence discount factor shock'};
M_.param_names(26) = {'rho_muC'};
M_.param_names_tex(26) = {'{\rho_{muC}}'};
M_.param_names_long(26) = {'persistence wage markup shock:C'};
M_.param_names(27) = {'rho_muI'};
M_.param_names_tex(27) = {'{\rho_{muI}}'};
M_.param_names_long(27) = {'persistence wage markup shock:I'};
M_.param_names(28) = {'p_I_ss'};
M_.param_names_tex(28) = {'p\_I\_ss'};
M_.param_names_long(28) = {'p_I_ss'};
M_.param_names(29) = {'N_ss'};
M_.param_names_tex(29) = {'N\_ss'};
M_.param_names_long(29) = {'N_ss'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 9;
M_.endo_nbr = 104;
M_.param_nbr = 29;
M_.orig_endo_nbr = 104;
M_.aux_vars = [];
options_.varobs = cell(7, 1);
options_.varobs(1)  = {'NC_obs'};
options_.varobs(2)  = {'NI_obs'};
options_.varobs(3)  = {'C_obs'};
options_.varobs(4)  = {'I_obs'};
options_.varobs(5)  = {'p_I_obs'};
options_.varobs(6)  = {'util_ND_obs'};
options_.varobs(7)  = {'util_D_obs'};
options_.varobs_id = [ 95 96 88 89 93 97 98  ];
M_.Sigma_e = zeros(9, 9);
M_.Correlation_matrix = eye(9, 9);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 104;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 34 0;
 1 35 0;
 0 36 0;
 0 37 0;
 0 38 0;
 0 39 0;
 2 40 0;
 3 41 0;
 4 42 0;
 0 43 0;
 5 44 0;
 6 45 0;
 7 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 0 50 0;
 0 51 0;
 8 52 0;
 0 53 0;
 9 54 0;
 0 55 0;
 10 56 0;
 11 57 0;
 12 58 0;
 13 59 0;
 14 60 0;
 15 61 0;
 0 62 138;
 0 63 139;
 0 64 140;
 0 65 0;
 0 66 0;
 0 67 0;
 0 68 141;
 0 69 142;
 0 70 143;
 0 71 0;
 0 72 144;
 0 73 145;
 0 74 146;
 0 75 0;
 0 76 0;
 0 77 0;
 0 78 0;
 0 79 0;
 0 80 0;
 0 81 147;
 0 82 148;
 0 83 149;
 0 84 0;
 0 85 0;
 0 86 0;
 0 87 0;
 0 88 0;
 0 89 0;
 0 90 0;
 0 91 0;
 0 92 150;
 0 93 151;
 0 94 152;
 0 95 153;
 0 96 154;
 0 97 155;
 0 98 156;
 16 99 0;
 0 100 0;
 0 101 0;
 0 102 0;
 0 103 0;
 17 104 157;
 18 105 0;
 19 106 0;
 20 107 0;
 21 108 0;
 22 109 0;
 23 110 0;
 24 111 0;
 25 112 0;
 26 113 0;
 27 114 0;
 28 115 0;
 29 116 0;
 30 117 0;
 31 118 0;
 32 119 0;
 33 120 0;
 0 121 0;
 0 122 0;
 0 123 0;
 0 124 0;
 0 125 0;
 0 126 0;
 0 127 0;
 0 128 0;
 0 129 0;
 0 130 0;
 0 131 0;
 0 132 0;
 0 133 0;
 0 134 0;
 0 135 0;
 0 136 0;
 0 137 0;]';
M_.nstatic = 52;
M_.nfwrd   = 19;
M_.npred   = 32;
M_.nboth   = 1;
M_.nsfwrd   = 20;
M_.nspred   = 33;
M_.ndynamic   = 52;
M_.dynamic_tmp_nbr = [81; 19; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Labor leisure' ;
  2 , 'name' , 'Equality of worker wage rate' ;
  3 , 'name' , 'Marginal utility of wealth' ;
  4 , 'name' , 'Demand curve: mc' ;
  5 , 'name' , 'Demand curve: sc' ;
  6 , 'name' , 'Shopping:mc' ;
  7 , 'name' , 'Shopping:sc' ;
  8 , 'name' , 'Shopping:I' ;
  9 , 'name' , 'Composite utility term' ;
  10 , 'name' , 'Consumption CES aggregator' ;
  11 , 'name' , 'Investment adjustment cost function:mc' ;
  12 , 'name' , 'Investment adjustment cost function:mc' ;
  13 , 'name' , 'Investment adjustment cost function:I' ;
  14 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  15 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  16 , 'name' , 'Investment adjustment cost function: derivative I' ;
  17 , 'name' , 'Investment growth:mc' ;
  18 , 'name' , 'Investment growth:mc' ;
  19 , 'name' , 'Investment growth:I' ;
  20 , 'name' , 'Depreciation rate: mc' ;
  21 , 'name' , 'Depreciation rate: sc' ;
  22 , 'name' , 'Depreciation rate: I' ;
  23 , 'name' , 'Depreciation rate derivative: mc' ;
  24 , 'name' , 'Depreciation rate derivative: sc' ;
  25 , 'name' , 'Depreciation rate derivative: I' ;
  26 , 'name' , 'Tobins Q: mc' ;
  27 , 'name' , 'Tobins Q: sc' ;
  28 , 'name' , 'Tobins Q: I' ;
  29 , 'name' , 'Euler equation: mc' ;
  30 , 'name' , 'Euler equation: sc' ;
  31 , 'name' , 'Euler equation: I' ;
  32 , 'name' , 'Utilization: mc' ;
  33 , 'name' , 'Utilization: sc' ;
  34 , 'name' , 'Utilization: I' ;
  35 , 'name' , 'Non-durable goods production' ;
  36 , 'name' , 'Services production' ;
  37 , 'name' , 'Investment production' ;
  38 , 'name' , 'Capital law of motion:mc' ;
  39 , 'name' , 'Capital law of motion:sc' ;
  40 , 'name' , 'Capital law of motion:I' ;
  41 , 'name' , 'Labor demand:mc' ;
  42 , 'name' , 'Labor demand:sc' ;
  43 , 'name' , 'Labor demand:I' ;
  44 , 'name' , 'Capital demand:mc' ;
  45 , 'name' , 'Capital demand:sc' ;
  46 , 'name' , 'Capital demand:I' ;
  47 , 'name' , 'Labor composition' ;
  48 , 'name' , 'Labor composition: C' ;
  49 , 'name' , 'Capital composition' ;
  50 , 'name' , 'Investment composition' ;
  51 , 'name' , 'Shopping composition' ;
  52 , 'name' , 'Capital utilization composition' ;
  53 , 'name' , 'Aggregate wage' ;
  54 , 'name' , 'Output (base-year prices)' ;
  55 , 'name' , 'Solow residual' ;
  56 , 'name' , 'Capacity utilization' ;
  57 , 'name' , 'util_sc' ;
  58 , 'name' , 'util_D' ;
  59 , 'name' , 'util' ;
  60 , 'name' , 'General technology measure' ;
  61 , 'name' , 'stochastic trend process' ;
  62 , 'name' , 'Stationary TFP process' ;
  63 , 'name' , 'Independent component of I-specific tech' ;
  64 , 'name' , 'Investment-specific TFP process' ;
  65 , 'name' , 'Labor supply process' ;
  66 , 'name' , 'Shopping effort process' ;
  67 , 'name' , 'Relative shopping effort process' ;
  68 , 'name' , 'Consumption preference process' ;
  69 , 'name' , 'Wage-markup process: C' ;
  70 , 'name' , 'Wage-markup process: I' ;
  71 , 'name' , 'Definition log output' ;
  72 , 'name' , 'Definition log consumption' ;
  73 , 'name' , 'Definition log investment' ;
  74 , 'name' , 'Definition log hours' ;
  75 , 'name' , 'log_NC' ;
  76 , 'name' , 'log_NI' ;
  77 , 'name' , 'log capital' ;
  78 , 'name' , 'Definition log labor productivity' ;
  79 , 'name' , 'Definition log shopping effort' ;
  80 , 'name' , 'Definition log capital utilization' ;
  81 , 'name' , 'Definition of log relative investment  price' ;
  82 , 'name' , 'Definition of log capacity utilization' ;
  83 , 'name' , 'log_util_ND' ;
  84 , 'name' , 'log_util_D' ;
  85 , 'name' , 'Definition of log wages' ;
  86 , 'name' , 'Definition of log Solow residual' ;
  87 , 'name' , 'Definition of log technology' ;
  88 , 'name' , 'C_obs' ;
  89 , 'name' , 'I_obs' ;
  90 , 'name' , 'Y_obs' ;
  91 , 'name' , 'Y_N_obs' ;
  92 , 'name' , 'K_obs' ;
  93 , 'name' , 'w_obs' ;
  94 , 'name' , 'SR_obs' ;
  95 , 'name' , 'tech_obs' ;
  96 , 'name' , 'p_I_obs' ;
  97 , 'name' , 'N_obs' ;
  98 , 'name' , 'NC_obs' ;
  99 , 'name' , 'NI_obs' ;
  100 , 'name' , 'util_ND_obs' ;
  101 , 'name' , 'util_D_obs' ;
  102 , 'name' , 'util_obs' ;
  103 , 'name' , 'D_obs' ;
  104 , 'name' , 'h_obs' ;
};
M_.mapping.Y.eqidx = [52 54 55 59 60 71 ];
M_.mapping.C.eqidx = [4 5 9 10 54 60 72 ];
M_.mapping.Y_mc.eqidx = [4 6 10 35 41 44 52 55 59 ];
M_.mapping.Y_sc.eqidx = [5 7 10 36 42 45 52 55 59 ];
M_.mapping.SR.eqidx = [55 86 ];
M_.mapping.I.eqidx = [8 37 43 46 50 52 54 55 59 60 73 ];
M_.mapping.I_mc.eqidx = [17 38 50 ];
M_.mapping.I_sc.eqidx = [18 39 50 ];
M_.mapping.I_I.eqidx = [19 40 50 ];
M_.mapping.K.eqidx = [49 77 ];
M_.mapping.K_mc.eqidx = [35 38 44 49 55 56 ];
M_.mapping.K_sc.eqidx = [36 39 45 49 55 57 ];
M_.mapping.K_I.eqidx = [37 40 46 49 55 58 ];
M_.mapping.N.eqidx = [1 9 47 53 74 ];
M_.mapping.N_mc.eqidx = [35 41 47 48 55 56 ];
M_.mapping.N_sc.eqidx = [36 42 47 48 55 57 ];
M_.mapping.N_C.eqidx = [48 53 75 ];
M_.mapping.N_I.eqidx = [37 43 47 53 55 58 76 ];
M_.mapping.Z_C.eqidx = [35 36 56 57 60 62 64 ];
M_.mapping.u_ZI.eqidx = [63 64 ];
M_.mapping.Z_I.eqidx = [37 58 60 63 64 ];
M_.mapping.tech.eqidx = [60 87 ];
M_.mapping.theta_N.eqidx = [1 9 65 ];
M_.mapping.theta_D.eqidx = [6 7 8 9 66 ];
M_.mapping.theta_I.eqidx = [8 51 67 ];
M_.mapping.theta_b.eqidx = [26 27 28 29 30 31 68 ];
M_.mapping.mu_C.eqidx = [1 2 69 ];
M_.mapping.mu_I.eqidx = [2 70 ];
M_.mapping.R_mc.eqidx = [29 32 44 ];
M_.mapping.R_sc.eqidx = [30 33 45 ];
M_.mapping.R_I.eqidx = [31 34 46 ];
M_.mapping.W.eqidx = [53 85 ];
M_.mapping.W_C.eqidx = [1 2 41 42 53 ];
M_.mapping.W_I.eqidx = [2 43 53 ];
M_.mapping.h_mc.eqidx = [20 23 29 35 44 52 56 ];
M_.mapping.h_sc.eqidx = [21 24 30 36 45 52 57 ];
M_.mapping.h_I.eqidx = [22 25 31 37 46 52 58 ];
M_.mapping.h.eqidx = [52 80 ];
M_.mapping.delta_mc.eqidx = [20 29 38 ];
M_.mapping.delta_sc.eqidx = [21 30 39 ];
M_.mapping.delta_I.eqidx = [22 31 40 ];
M_.mapping.delta_mc_pr.eqidx = [23 32 ];
M_.mapping.delta_sc_pr.eqidx = [24 33 ];
M_.mapping.delta_I_pr.eqidx = [25 34 ];
M_.mapping.Smc.eqidx = [11 26 38 ];
M_.mapping.Ssc.eqidx = [12 27 39 ];
M_.mapping.Si.eqidx = [13 28 40 ];
M_.mapping.Smc_pr.eqidx = [14 26 ];
M_.mapping.Ssc_pr.eqidx = [15 27 ];
M_.mapping.Si_pr.eqidx = [16 28 ];
M_.mapping.D.eqidx = [6 7 8 9 51 79 ];
M_.mapping.D_mc.eqidx = [6 35 41 44 51 56 ];
M_.mapping.D_sc.eqidx = [7 36 42 45 51 57 ];
M_.mapping.D_I.eqidx = [8 37 43 46 51 58 ];
M_.mapping.Gam.eqidx = [3 9 ];
M_.mapping.p_mc.eqidx = [4 6 41 44 ];
M_.mapping.p_sc.eqidx = [5 7 42 45 ];
M_.mapping.p_I.eqidx = [8 26 27 28 43 46 81 ];
M_.mapping.lam.eqidx = [3 26 27 28 29 30 31 ];
M_.mapping.Q_mc.eqidx = [26 29 32 ];
M_.mapping.Q_sc.eqidx = [27 30 33 ];
M_.mapping.Q_I.eqidx = [28 31 34 ];
M_.mapping.x_mc.eqidx = [11 14 17 26 ];
M_.mapping.x_sc.eqidx = [12 15 18 27 ];
M_.mapping.x_I.eqidx = [13 16 19 28 ];
M_.mapping.log_SR.eqidx = [86 94 ];
M_.mapping.util.eqidx = [59 82 ];
M_.mapping.util_ND.eqidx = [56 59 83 ];
M_.mapping.util_sc.eqidx = [57 59 ];
M_.mapping.util_D.eqidx = [58 59 84 ];
M_.mapping.g.eqidx = [17 18 19 26 27 28 29 30 31 35 36 37 38 39 40 44 45 46 55 56 57 58 61 88 89 90 91 92 93 94 95 ];
M_.mapping.log_Y.eqidx = [71 78 90 ];
M_.mapping.log_C.eqidx = [72 88 ];
M_.mapping.log_I.eqidx = [73 89 ];
M_.mapping.log_N.eqidx = [74 78 97 ];
M_.mapping.log_NC.eqidx = [75 98 ];
M_.mapping.log_NI.eqidx = [76 99 ];
M_.mapping.log_K.eqidx = [77 92 ];
M_.mapping.log_Y_N.eqidx = [78 91 ];
M_.mapping.log_D.eqidx = [79 103 ];
M_.mapping.log_h.eqidx = [80 104 ];
M_.mapping.log_p_I.eqidx = [81 96 ];
M_.mapping.log_util.eqidx = [82 102 ];
M_.mapping.log_util_ND.eqidx = [83 100 ];
M_.mapping.log_util_D.eqidx = [84 101 ];
M_.mapping.log_W.eqidx = [85 93 ];
M_.mapping.log_tech.eqidx = [87 95 ];
M_.mapping.C_obs.eqidx = [88 ];
M_.mapping.I_obs.eqidx = [89 ];
M_.mapping.Y_obs.eqidx = [90 ];
M_.mapping.SR_obs.eqidx = [94 ];
M_.mapping.Y_N_obs.eqidx = [91 ];
M_.mapping.p_I_obs.eqidx = [96 ];
M_.mapping.N_obs.eqidx = [97 ];
M_.mapping.NC_obs.eqidx = [98 ];
M_.mapping.NI_obs.eqidx = [99 ];
M_.mapping.util_ND_obs.eqidx = [100 ];
M_.mapping.util_D_obs.eqidx = [101 ];
M_.mapping.util_obs.eqidx = [102 ];
M_.mapping.tech_obs.eqidx = [95 ];
M_.mapping.w_obs.eqidx = [93 ];
M_.mapping.D_obs.eqidx = [103 ];
M_.mapping.h_obs.eqidx = [104 ];
M_.mapping.K_obs.eqidx = [92 ];
M_.mapping.e_g.eqidx = [61 ];
M_.mapping.e_Z.eqidx = [62 ];
M_.mapping.e_ZI.eqidx = [63 ];
M_.mapping.e_N.eqidx = [65 ];
M_.mapping.e_D.eqidx = [66 ];
M_.mapping.e_DI.eqidx = [67 ];
M_.mapping.e_b.eqidx = [68 ];
M_.mapping.e_muC.eqidx = [69 ];
M_.mapping.e_muI.eqidx = [70 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 8;
M_.block_structure.block(1).mfs = 8;
M_.block_structure.block(1).equation = [ 61 62 65 66 67 68 69 70];
M_.block_structure.block(1).variable = [ 71 19 23 24 25 26 27 28];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 16;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ];
M_.block_structure.block(2).Simulation_Type = 6;
M_.block_structure.block(2).endo_nbr = 2;
M_.block_structure.block(2).mfs = 2;
M_.block_structure.block(2).equation = [ 63 64];
M_.block_structure.block(2).variable = [ 20 21];
M_.block_structure.block(2).is_linear = true;
M_.block_structure.block(2).NNZDerivatives = 4;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 2 ];
M_.block_structure.block(3).Simulation_Type = 8;
M_.block_structure.block(3).endo_nbr = 49;
M_.block_structure.block(3).mfs = 40;
M_.block_structure.block(3).equation = [ 11 13 23 24 25 5 4 50 12 9 35 36 37 41 42 43 47 51 8 7 2 1 6 10 17 18 19 38 39 40 14 15 16 20 21 22 26 27 28 29 30 31 32 33 34 44 45 46 3];
M_.block_structure.block(3).variable = [ 45 47 42 43 44 4 3 6 46 55 52 16 18 33 57 54 15 53 58 51 34 14 56 2 7 8 9 11 12 13 48 49 50 39 40 41 63 64 65 60 61 62 29 30 31 35 36 37 59];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 208;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [15 16 17 18 19 20 21 0 0 0 0 0 0 0 0 0 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 ];
M_.block_structure.block(4).Simulation_Type = 1;
M_.block_structure.block(4).endo_nbr = 45;
M_.block_structure.block(4).mfs = 45;
M_.block_structure.block(4).equation = [ 58 84 57 56 54 52 83 101 59 80 79 76 100 82 102 103 104 48 99 75 74 98 97 71 60 55 53 49 87 86 85 81 78 77 73 72 96 95 94 93 92 91 90 89 88];
M_.block_structure.block(4).variable = [ 70 85 69 68 1 38 84 98 67 81 80 77 97 83 99 102 103 17 96 76 75 95 94 72 22 5 32 10 87 66 86 82 79 78 74 73 93 100 91 101 104 92 90 89 88];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 99;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [2 7 10 11 12 14 20 21 24 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 2 2 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 1 2 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 3 4 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([1 16 17 18 2 19 37 3 20 38 4 21 39 1 40 2 5 9 14 37 3 6 8 4 7 8 5 6 12 13 3 6 11 15 38 4 7 9 10 39 2 5 8 3 6 9 11 38 7 10 28 29 30 39 1 9 10 11 14 7 12 1 8 13 2 5 14 15 37 1 2 3 5 6 11 14 15 37 38 4 7 10 16 19 39 4 7 10 17 20 39 4 7 10 18 21 39 19 20 21 22 28 23 29 24 30 19 25 20 26 21 27 16 19 22 28 17 20 23 29 18 21 24 30 28 31 34 29 32 35 30 33 36 34 37 35 38 36 39 2 25 34 37 3 26 35 38 4 27 36 39 28 29 30 31 32 33 40 28 29 30 31 32 33 28 29 30 28 31 29 32 30 33 31 32 33 31 32 33 28 29 30 31 32 33 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([15 16 17 18 19 19 19 20 20 20 21 21 21 41 41 42 42 42 42 42 43 43 43 44 44 44 45 45 45 45 46 46 46 46 46 47 47 47 47 47 48 48 48 49 49 49 49 49 50 50 50 50 50 50 51 51 51 51 51 52 52 53 53 53 54 54 54 54 54 55 55 55 55 55 55 55 55 55 55 56 56 56 56 56 56 57 57 57 57 57 57 58 58 58 58 58 58 59 60 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 68 68 69 69 69 69 70 70 70 70 71 71 71 72 72 72 73 73 73 74 74 75 75 76 76 77 77 77 77 78 78 78 78 79 79 79 79 80 80 80 80 80 80 80 102 103 104 105 106 107 108 109 110 111 111 112 112 113 113 114 115 116 117 118 119 120 120 120 120 120 120 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 8 11 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 16 21 24 27 31 36 41 44 49 55 60 62 65 70 80 86 92 98 99 100 101 103 105 107 109 111 113 117 121 125 128 131 134 136 138 140 144 148 152 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 160 161 162 163 164 165 166 167 168 170 172 174 175 176 177 178 179 180 186 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([]);
M_.block_structure.block(4).g1_sparse_colval = int32([]);
M_.block_structure.block(4).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 71 19 23 24 25 26 27 28 20 21 45 47 42 43 44 4 3 6 46 55 52 16 18 33 57 54 15 53 58 51 34 14 56 2 7 8 9 11 12 13 48 49 50 39 40 41 63 64 65 60 61 62 29 30 31 35 36 37 59 70 85 69 68 1 38 84 98 67 81 80 77 97 83 99 102 103 17 96 76 75 95 94 72 22 5 32 10 87 66 86 82 79 78 74 73 93 100 91 101 104 92 90 89 88];
M_.block_structure.equation_reordered = [ 61 62 65 66 67 68 69 70 63 64 11 13 23 24 25 5 4 50 12 9 35 36 37 41 42 43 47 51 8 7 2 1 6 10 17 18 19 38 39 40 14 15 16 20 21 22 26 27 28 29 30 31 32 33 34 44 45 46 3 58 84 57 56 54 52 83 101 59 80 79 76 100 82 102 103 104 48 99 75 74 98 97 71 60 55 53 49 87 86 85 81 78 77 73 72 96 95 94 93 92 91 90 89 88];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 9 2;
 17 7;
 18 8;
 19 9;
 35 11;
 36 12;
 37 13;
 38 11;
 39 12;
 40 13;
 44 11;
 45 12;
 46 13;
 55 11;
 55 12;
 55 13;
 56 11;
 57 12;
 58 13;
 61 71;
 62 19;
 63 21;
 65 23;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 88 73;
 89 74;
 90 72;
 91 79;
 92 78;
 93 86;
 94 66;
 95 87;
 96 82;
 97 75;
 98 76;
 99 77;
 100 84;
 101 85;
 102 83;
 103 80;
 104 81;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 14;
 1 23;
 1 27;
 1 33;
 2 27;
 2 28;
 2 33;
 2 34;
 3 55;
 3 59;
 4 2;
 4 3;
 4 56;
 5 2;
 5 4;
 5 57;
 6 3;
 6 24;
 6 51;
 6 52;
 6 56;
 7 4;
 7 24;
 7 51;
 7 53;
 7 57;
 8 6;
 8 24;
 8 25;
 8 51;
 8 54;
 8 58;
 9 2;
 9 14;
 9 23;
 9 24;
 9 51;
 9 55;
 10 2;
 10 3;
 10 4;
 11 45;
 11 63;
 12 46;
 12 64;
 13 47;
 13 65;
 14 48;
 14 63;
 15 49;
 15 64;
 16 50;
 16 65;
 17 7;
 17 63;
 17 71;
 18 8;
 18 64;
 18 71;
 19 9;
 19 65;
 19 71;
 20 35;
 20 39;
 21 36;
 21 40;
 22 37;
 22 41;
 23 35;
 23 42;
 24 36;
 24 43;
 25 37;
 25 44;
 26 26;
 26 45;
 26 48;
 26 58;
 26 59;
 26 60;
 26 63;
 27 26;
 27 46;
 27 49;
 27 58;
 27 59;
 27 61;
 27 64;
 28 26;
 28 47;
 28 50;
 28 58;
 28 59;
 28 62;
 28 65;
 29 26;
 29 59;
 29 60;
 30 26;
 30 59;
 30 61;
 31 26;
 31 59;
 31 62;
 32 29;
 32 42;
 32 60;
 33 30;
 33 43;
 33 61;
 34 31;
 34 44;
 34 62;
 35 3;
 35 15;
 35 19;
 35 35;
 35 52;
 35 71;
 36 4;
 36 16;
 36 19;
 36 36;
 36 53;
 36 71;
 37 6;
 37 18;
 37 21;
 37 37;
 37 54;
 37 71;
 38 7;
 38 11;
 38 39;
 38 45;
 38 71;
 39 8;
 39 12;
 39 40;
 39 46;
 39 71;
 40 9;
 40 13;
 40 41;
 40 47;
 40 71;
 41 3;
 41 15;
 41 33;
 41 52;
 41 56;
 42 4;
 42 16;
 42 33;
 42 53;
 42 57;
 43 6;
 43 18;
 43 34;
 43 54;
 43 58;
 44 3;
 44 29;
 44 35;
 44 52;
 44 56;
 44 71;
 45 4;
 45 30;
 45 36;
 45 53;
 45 57;
 45 71;
 46 6;
 46 31;
 46 37;
 46 54;
 46 58;
 46 71;
 47 14;
 47 15;
 47 16;
 47 18;
 48 15;
 48 16;
 48 17;
 49 10;
 49 11;
 49 12;
 49 13;
 50 6;
 50 7;
 50 8;
 50 9;
 51 25;
 51 51;
 51 52;
 51 53;
 51 54;
 52 1;
 52 3;
 52 4;
 52 6;
 52 35;
 52 36;
 52 37;
 52 38;
 53 14;
 53 17;
 53 18;
 53 32;
 53 33;
 53 34;
 54 1;
 54 2;
 54 6;
 55 1;
 55 3;
 55 4;
 55 5;
 55 6;
 55 15;
 55 16;
 55 18;
 55 71;
 56 15;
 56 19;
 56 35;
 56 52;
 56 68;
 56 71;
 57 16;
 57 19;
 57 36;
 57 53;
 57 69;
 57 71;
 58 18;
 58 21;
 58 37;
 58 54;
 58 70;
 58 71;
 59 1;
 59 3;
 59 4;
 59 6;
 59 67;
 59 68;
 59 69;
 59 70;
 60 1;
 60 2;
 60 6;
 60 19;
 60 21;
 60 22;
 61 71;
 62 19;
 63 20;
 64 19;
 64 20;
 64 21;
 65 23;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 71 1;
 71 72;
 72 2;
 72 73;
 73 6;
 73 74;
 74 14;
 74 75;
 75 17;
 75 76;
 76 18;
 76 77;
 77 10;
 77 78;
 78 72;
 78 75;
 78 79;
 79 51;
 79 80;
 80 38;
 80 81;
 81 58;
 81 82;
 82 67;
 82 83;
 83 68;
 83 84;
 84 70;
 84 85;
 85 32;
 85 86;
 86 5;
 86 66;
 87 22;
 87 87;
 88 71;
 88 73;
 88 88;
 89 71;
 89 74;
 89 89;
 90 71;
 90 72;
 90 90;
 91 71;
 91 79;
 91 92;
 92 71;
 92 78;
 92 104;
 93 71;
 93 86;
 93 101;
 94 66;
 94 71;
 94 91;
 95 71;
 95 87;
 95 100;
 96 82;
 96 93;
 97 75;
 97 94;
 98 76;
 98 95;
 99 77;
 99 96;
 100 84;
 100 97;
 101 85;
 101 98;
 102 83;
 102 99;
 103 80;
 103 102;
 104 81;
 104 103;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 26 48;
 26 59;
 26 60;
 26 63;
 26 71;
 27 49;
 27 59;
 27 61;
 27 64;
 27 71;
 28 50;
 28 59;
 28 62;
 28 65;
 28 71;
 29 29;
 29 35;
 29 39;
 29 59;
 29 60;
 29 71;
 30 30;
 30 36;
 30 40;
 30 59;
 30 61;
 30 71;
 31 31;
 31 37;
 31 41;
 31 59;
 31 62;
 31 71;
];
M_.block_structure.dyn_tmp_nbr = 62;
M_.state_var = [71 19 23 24 25 26 27 28 21 2 7 8 9 11 12 13 85 84 81 80 77 83 76 75 72 87 66 86 82 79 78 74 73 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(104, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(9, 1);
M_.params = NaN(29, 1);
M_.endo_trends = struct('deflator', cell(104, 1), 'log_deflator', cell(104, 1), 'growth_factor', cell(104, 1), 'log_growth_factor', cell(104, 1));
M_.NNZDerivatives = [433; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([9 17 18 19 35 38 44 55 56 36 39 45 55 57 37 40 46 55 58 62 63 65 66 67 68 69 70 94 61 90 88 89 97 98 99 92 91 103 104 96 102 100 101 93 95 52 54 55 59 60 71 4 5 9 10 54 60 72 4 6 10 35 41 44 52 55 59 5 7 10 36 42 45 52 55 59 55 86 8 37 43 46 50 52 54 55 59 60 73 17 38 50 18 39 50 19 40 50 49 77 38 49 39 49 40 49 1 9 47 53 74 35 41 47 48 55 56 36 42 47 48 55 57 48 53 75 37 43 47 53 55 58 76 35 36 56 57 60 62 64 63 64 37 58 60 64 60 87 1 9 65 6 7 8 9 66 8 51 67 26 27 28 29 30 31 68 1 2 69 2 70 32 44 33 45 34 46 53 85 1 2 41 42 53 2 43 53 20 23 35 44 52 56 21 24 36 45 52 57 22 25 37 46 52 58 52 80 20 38 21 39 22 40 23 32 24 33 25 34 11 26 38 12 27 39 13 28 40 14 26 15 27 16 28 6 7 8 9 51 79 6 35 41 44 51 56 7 36 42 45 51 57 8 37 43 46 51 58 3 9 4 6 41 44 5 7 42 45 8 26 27 28 43 46 81 3 26 27 28 29 30 31 26 29 32 27 30 33 28 31 34 11 14 17 26 12 15 18 27 13 16 19 28 86 94 59 82 56 59 83 57 59 58 59 84 17 18 19 35 36 37 38 39 40 44 45 46 55 56 57 58 61 88 89 90 91 92 93 94 95 71 78 90 72 88 73 89 74 78 97 75 98 76 99 77 92 78 91 79 103 80 104 81 96 82 102 83 100 84 101 85 93 87 95 88 89 90 94 91 96 97 98 99 100 101 102 95 93 103 104 92 29 30 31 29 30 31 29 30 31 26 27 28 26 27 28 29 30 31 26 29 27 30 28 31 26 27 28 26 27 28 29 30 31 61 62 63 65 66 67 68 69 70 ]);
M_.dynamic_g1_sparse_colval = int32([2 7 8 9 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 19 21 23 24 25 26 27 28 66 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 105 105 105 105 105 105 106 106 106 106 106 106 106 107 107 107 107 107 107 107 107 107 108 108 108 108 108 108 108 108 108 109 109 110 110 110 110 110 110 110 110 110 110 110 111 111 111 112 112 112 113 113 113 114 114 115 115 116 116 117 117 118 118 118 118 118 119 119 119 119 119 119 120 120 120 120 120 120 121 121 121 122 122 122 122 122 122 122 123 123 123 123 123 123 123 124 124 125 125 125 125 126 126 127 127 127 128 128 128 128 128 129 129 129 130 130 130 130 130 130 130 131 131 131 132 132 133 133 134 134 135 135 136 136 137 137 137 137 137 138 138 138 139 139 139 139 139 139 140 140 140 140 140 140 141 141 141 141 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149 149 150 150 150 151 151 151 152 152 153 153 154 154 155 155 155 155 155 155 156 156 156 156 156 156 157 157 157 157 157 157 158 158 158 158 158 158 159 159 160 160 160 160 161 161 161 161 162 162 162 162 162 162 162 163 163 163 163 163 163 163 164 164 164 165 165 165 166 166 166 167 167 167 167 168 168 168 168 169 169 169 169 170 170 171 171 172 172 172 173 173 174 174 174 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 176 176 176 177 177 178 178 179 179 179 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 189 190 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 237 238 239 243 244 245 247 248 249 256 257 258 267 267 267 267 267 267 268 268 269 269 270 270 271 272 273 279 279 279 279 279 279 313 314 315 316 317 318 319 320 321 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 2 2 2 2 2 3 4 5 5 10 15 20 20 20 20 20 20 21 21 22 22 23 24 25 26 27 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 52 59 68 77 79 90 93 96 99 101 103 105 107 112 118 124 127 134 141 143 147 149 152 157 160 167 170 172 174 176 178 180 185 188 194 200 206 208 210 212 214 216 218 220 223 226 229 231 233 235 241 247 253 259 261 265 269 276 283 286 289 292 296 300 304 306 308 311 313 316 341 344 346 348 351 353 355 357 359 361 363 365 367 369 371 373 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 393 394 395 395 395 395 396 397 398 398 399 400 401 401 401 401 401 401 401 402 403 404 404 404 404 404 404 404 404 404 410 412 414 416 417 418 419 419 419 419 419 419 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 426 427 428 429 430 431 432 433 434 ]);
M_.lhs = {
'N^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'W_C/(mu_ss*exp(mu_C))'; 
'lam'; 
'Y_mc'; 
'Y_sc'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)*exp(theta_I)'; 
'Gam'; 
'C'; 
'Smc'; 
'Ssc'; 
'Si'; 
'Smc_pr'; 
'Ssc_pr'; 
'Si_pr'; 
'x_mc'; 
'x_sc'; 
'x_I'; 
'delta_mc'; 
'delta_sc'; 
'delta_I'; 
'delta_mc_pr'; 
'delta_sc_pr'; 
'delta_I_pr'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'Q_mc'; 
'Q_sc'; 
'Q_I'; 
'delta_mc_pr*Q_mc'; 
'delta_sc_pr*Q_sc'; 
'delta_I_pr*Q_I'; 
'Y_mc'; 
'Y_sc'; 
'I'; 
'exp(g)*K_mc'; 
'exp(g)*K_sc'; 
'exp(g)*K_I'; 
'(1-phi)*W_C/p_mc'; 
'(1-phi)*W_C/p_sc'; 
'(1-phi)*W_I/p_I'; 
'(1-phi)*R_mc/p_mc'; 
'(1-phi)*R_sc/p_sc'; 
'(1-phi)*R_I/p_I'; 
'N'; 
'N_C'; 
'K'; 
'I'; 
'D'; 
'h'; 
'W'; 
'Y'; 
'SR'; 
'util_ND'; 
'util_sc'; 
'util_D'; 
'util'; 
'tech'; 
'g'; 
'Z_C'; 
'u_ZI'; 
'Z_I'; 
'theta_N'; 
'theta_D'; 
'theta_I'; 
'theta_b'; 
'mu_C'; 
'mu_I'; 
'log_Y'; 
'log_C'; 
'log_I'; 
'log_N'; 
'log_NC'; 
'log_NI'; 
'log_K'; 
'log_Y_N'; 
'log_D'; 
'log_h'; 
'log_p_I'; 
'log_util'; 
'log_util_ND'; 
'log_util_D'; 
'log_W'; 
'log_SR'; 
'log_tech'; 
'C_obs'; 
'I_obs'; 
'Y_obs'; 
'Y_N_obs'; 
'K_obs'; 
'w_obs'; 
'SR_obs'; 
'tech_obs'; 
'p_I_obs'; 
'N_obs'; 
'NC_obs'; 
'NI_obs'; 
'util_ND_obs'; 
'util_D_obs'; 
'util_obs'; 
'D_obs'; 
'h_obs'; 
};
M_.static_tmp_nbr = [80; 17; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 61];
M_.block_structure_stat.block(1).variable = [ 71];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 62];
M_.block_structure_stat.block(2).variable = [ 19];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 65];
M_.block_structure_stat.block(3).variable = [ 23];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 66];
M_.block_structure_stat.block(4).variable = [ 24];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 67];
M_.block_structure_stat.block(5).variable = [ 25];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 68];
M_.block_structure_stat.block(6).variable = [ 26];
M_.block_structure_stat.block(7).Simulation_Type = 3;
M_.block_structure_stat.block(7).endo_nbr = 1;
M_.block_structure_stat.block(7).mfs = 1;
M_.block_structure_stat.block(7).equation = [ 69];
M_.block_structure_stat.block(7).variable = [ 27];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 70];
M_.block_structure_stat.block(8).variable = [ 28];
M_.block_structure_stat.block(9).Simulation_Type = 1;
M_.block_structure_stat.block(9).endo_nbr = 26;
M_.block_structure_stat.block(9).mfs = 26;
M_.block_structure_stat.block(9).equation = [ 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 17 18 19 11 12 13 14 15 16];
M_.block_structure_stat.block(9).variable = [ 88 89 90 92 104 101 91 100 93 94 95 96 97 98 99 102 103 63 64 65 45 46 47 48 49 50];
M_.block_structure_stat.block(10).Simulation_Type = 6;
M_.block_structure_stat.block(10).endo_nbr = 2;
M_.block_structure_stat.block(10).mfs = 2;
M_.block_structure_stat.block(10).equation = [ 63 64];
M_.block_structure_stat.block(10).variable = [ 20 21];
M_.block_structure_stat.block(11).Simulation_Type = 6;
M_.block_structure_stat.block(11).endo_nbr = 38;
M_.block_structure_stat.block(11).mfs = 38;
M_.block_structure_stat.block(11).equation = [ 35 36 37 38 39 40 41 42 43 44 45 46 47 27 10 50 51 29 30 28 31 20 21 22 32 33 1 2 25 4 5 6 7 8 34 24 23 26];
M_.block_structure_stat.block(11).variable = [ 11 16 6 7 12 9 52 33 18 56 57 13 15 61 2 8 54 29 30 62 31 39 40 41 42 43 14 34 37 3 4 51 53 58 44 36 35 60];
M_.block_structure_stat.block(12).Simulation_Type = 1;
M_.block_structure_stat.block(12).endo_nbr = 30;
M_.block_structure_stat.block(12).mfs = 30;
M_.block_structure_stat.block(12).equation = [ 58 57 56 54 48 74 71 60 59 55 53 52 49 9 87 86 85 84 83 82 81 80 79 78 77 76 75 73 72 3];
M_.block_structure_stat.block(12).variable = [ 70 69 68 1 17 75 72 22 67 5 32 38 10 55 87 66 86 85 84 83 82 81 80 79 78 77 76 74 73 59];
M_.block_structure_stat.variable_reordered = [ 71 19 23 24 25 26 27 28 88 89 90 92 104 101 91 100 93 94 95 96 97 98 99 102 103 63 64 65 45 46 47 48 49 50 20 21 11 16 6 7 12 9 52 33 18 56 57 13 15 61 2 8 54 29 30 62 31 39 40 41 42 43 14 34 37 3 4 51 53 58 44 36 35 60 70 69 68 1 17 75 72 22 67 5 32 38 10 55 87 66 86 85 84 83 82 81 80 79 78 77 76 74 73 59];
M_.block_structure_stat.equation_reordered = [ 61 62 65 66 67 68 69 70 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 17 18 19 11 12 13 14 15 16 63 64 35 36 37 38 39 40 41 42 43 44 45 46 47 27 10 50 51 29 30 28 31 20 21 22 32 33 1 2 25 4 5 6 7 8 34 24 23 26 58 57 56 54 48 74 71 60 59 55 53 52 49 9 87 86 85 84 83 82 81 80 79 78 77 76 75 73 72 3];
M_.block_structure_stat.incidence.sparse_IM = [
 1 14;
 1 23;
 1 27;
 1 33;
 2 27;
 2 28;
 2 33;
 2 34;
 3 55;
 3 59;
 4 2;
 4 3;
 4 56;
 5 2;
 5 4;
 5 57;
 6 3;
 6 24;
 6 51;
 6 52;
 6 56;
 7 4;
 7 24;
 7 51;
 7 53;
 7 57;
 8 6;
 8 24;
 8 25;
 8 51;
 8 54;
 8 58;
 9 2;
 9 14;
 9 23;
 9 24;
 9 51;
 9 55;
 10 2;
 10 3;
 10 4;
 11 45;
 11 63;
 12 46;
 12 64;
 13 47;
 13 65;
 14 48;
 14 63;
 15 49;
 15 64;
 16 50;
 16 65;
 17 63;
 17 71;
 18 64;
 18 71;
 19 65;
 19 71;
 20 35;
 20 39;
 21 36;
 21 40;
 22 37;
 22 41;
 23 35;
 23 42;
 24 36;
 24 43;
 25 37;
 25 44;
 26 26;
 26 45;
 26 48;
 26 58;
 26 60;
 26 63;
 26 71;
 27 26;
 27 46;
 27 49;
 27 58;
 27 61;
 27 64;
 27 71;
 28 26;
 28 47;
 28 50;
 28 58;
 28 62;
 28 65;
 28 71;
 29 26;
 29 29;
 29 35;
 29 39;
 29 60;
 29 71;
 30 26;
 30 30;
 30 36;
 30 40;
 30 61;
 30 71;
 31 26;
 31 31;
 31 37;
 31 41;
 31 62;
 31 71;
 32 29;
 32 42;
 32 60;
 33 30;
 33 43;
 33 61;
 34 31;
 34 44;
 34 62;
 35 3;
 35 11;
 35 15;
 35 19;
 35 35;
 35 52;
 35 71;
 36 4;
 36 12;
 36 16;
 36 19;
 36 36;
 36 53;
 36 71;
 37 6;
 37 13;
 37 18;
 37 21;
 37 37;
 37 54;
 37 71;
 38 7;
 38 11;
 38 39;
 38 45;
 38 71;
 39 8;
 39 12;
 39 40;
 39 46;
 39 71;
 40 9;
 40 13;
 40 41;
 40 47;
 40 71;
 41 3;
 41 15;
 41 33;
 41 52;
 41 56;
 42 4;
 42 16;
 42 33;
 42 53;
 42 57;
 43 6;
 43 18;
 43 34;
 43 54;
 43 58;
 44 3;
 44 11;
 44 29;
 44 35;
 44 52;
 44 56;
 44 71;
 45 4;
 45 12;
 45 30;
 45 36;
 45 53;
 45 57;
 45 71;
 46 6;
 46 13;
 46 31;
 46 37;
 46 54;
 46 58;
 46 71;
 47 14;
 47 15;
 47 16;
 47 18;
 48 15;
 48 16;
 48 17;
 49 10;
 49 11;
 49 12;
 49 13;
 50 6;
 50 7;
 50 8;
 50 9;
 51 25;
 51 51;
 51 52;
 51 53;
 51 54;
 52 1;
 52 3;
 52 4;
 52 6;
 52 35;
 52 36;
 52 37;
 52 38;
 53 14;
 53 17;
 53 18;
 53 32;
 53 33;
 53 34;
 54 1;
 54 2;
 54 6;
 55 1;
 55 3;
 55 4;
 55 5;
 55 6;
 55 11;
 55 12;
 55 13;
 55 15;
 55 16;
 55 18;
 55 71;
 56 11;
 56 15;
 56 19;
 56 35;
 56 52;
 56 68;
 56 71;
 57 12;
 57 16;
 57 19;
 57 36;
 57 53;
 57 69;
 57 71;
 58 13;
 58 18;
 58 21;
 58 37;
 58 54;
 58 70;
 58 71;
 59 1;
 59 3;
 59 4;
 59 6;
 59 67;
 59 68;
 59 69;
 59 70;
 60 1;
 60 2;
 60 6;
 60 19;
 60 21;
 60 22;
 61 71;
 62 19;
 63 20;
 63 21;
 64 19;
 64 20;
 64 21;
 65 23;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 71 72;
 72 73;
 73 74;
 74 75;
 75 76;
 76 77;
 77 78;
 78 72;
 78 75;
 78 79;
 79 80;
 80 81;
 81 82;
 82 83;
 83 84;
 84 85;
 85 86;
 86 66;
 87 87;
 88 71;
 88 88;
 89 71;
 89 89;
 90 71;
 90 90;
 91 71;
 91 92;
 92 71;
 92 104;
 93 71;
 93 101;
 94 71;
 94 91;
 95 71;
 95 100;
 96 93;
 97 94;
 98 95;
 99 96;
 100 97;
 101 98;
 102 99;
 103 102;
 104 103;
];
M_.block_structure_stat.tmp_nbr = 53;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 2 1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 1 2 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 3 5 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([1 4 10 2 8 13 3 9 12 16 34 4 16 2 5 11 6 16 1 7 10 17 32 7 8 27 28 3 9 13 7 10 30 32 8 11 31 33 3 6 12 1 7 13 14 19 26 15 30 31 5 16 3 9 12 17 34 10 18 25 11 19 26 20 21 35 12 21 35 4 18 22 5 19 23 6 21 24 25 37 26 36 13 27 9 28 3 12 21 24 29 1 7 10 15 30 32 2 8 11 15 31 33 17 32 33 34 2 8 11 17 33 9 12 14 20 34 38 29 35 2 11 19 23 36 1 10 18 22 37 18 25 38 ]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([1 1 1 2 2 2 3 3 3 3 3 4 4 5 5 5 6 6 7 7 7 7 7 8 8 8 8 9 9 9 10 10 10 10 11 11 11 11 12 12 12 13 13 13 14 14 14 15 15 15 16 16 17 17 17 17 17 18 18 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 26 26 27 27 28 28 29 29 29 29 29 30 30 30 30 30 30 31 31 31 31 31 31 32 32 32 32 33 33 33 33 33 34 34 34 34 34 34 35 35 36 36 36 36 36 37 37 37 37 37 38 38 38 ]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 4 7 12 14 17 19 24 28 31 35 39 42 45 48 51 53 58 61 64 67 70 73 76 79 81 83 85 87 92 98 104 108 113 119 121 126 131 134 ]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([52 54 55 59 60 4 5 9 10 54 60 4 6 10 35 41 44 52 55 59 5 7 10 36 42 45 52 55 59 55 8 37 43 46 50 52 54 55 59 60 38 50 39 50 40 50 49 35 38 44 49 55 56 36 39 45 49 55 57 37 40 46 49 55 58 1 9 47 53 35 41 47 48 55 56 36 42 47 48 55 57 48 53 37 43 47 53 55 58 35 36 56 57 60 62 64 63 64 37 58 60 63 64 60 1 9 65 6 7 8 9 66 8 51 67 26 27 28 29 30 31 68 1 2 69 2 70 29 32 44 30 33 45 31 34 46 53 1 2 41 42 53 2 43 53 20 23 29 35 44 52 56 21 24 30 36 45 52 57 22 25 31 37 46 52 58 52 20 29 38 21 30 39 22 31 40 23 32 24 33 25 34 11 26 38 12 27 39 13 28 40 14 26 15 27 16 28 6 7 8 9 51 6 35 41 44 51 56 7 36 42 45 51 57 8 37 43 46 51 58 3 9 4 6 41 44 5 7 42 45 8 26 27 28 43 46 3 26 29 32 27 30 33 28 31 34 11 14 17 26 12 15 18 27 13 16 19 28 86 59 56 59 57 59 58 59 17 18 19 26 27 28 29 30 31 35 36 37 38 39 40 44 45 46 55 56 57 58 61 88 89 90 91 92 93 94 95 71 78 72 73 74 78 75 76 77 78 79 80 81 82 83 84 85 87 88 89 90 94 91 96 97 98 99 100 101 102 95 93 103 104 92 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 6 6 6 6 6 6 6 6 6 6 7 7 8 8 9 9 10 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 14 14 14 14 15 15 15 15 15 15 16 16 16 16 16 16 17 17 18 18 18 18 18 18 19 19 19 19 19 19 19 20 20 21 21 21 21 21 22 23 23 23 24 24 24 24 24 25 25 25 26 26 26 26 26 26 26 27 27 27 28 28 29 29 29 30 30 30 31 31 31 32 33 33 33 33 33 34 34 34 35 35 35 35 35 35 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 38 39 39 39 40 40 40 41 41 41 42 42 43 43 44 44 45 45 45 46 46 46 47 47 47 48 48 49 49 50 50 51 51 51 51 51 52 52 52 52 52 52 53 53 53 53 53 53 54 54 54 54 54 54 55 55 56 56 56 56 57 57 57 57 58 58 58 58 58 58 59 60 60 60 61 61 61 62 62 62 63 63 63 63 64 64 64 64 65 65 65 65 66 67 68 68 69 69 70 70 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 72 72 73 74 75 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 ]);
M_.static_g1_sparse_colptr = int32([1 6 12 21 30 31 41 43 45 47 48 54 60 66 70 76 82 84 90 97 99 104 105 108 113 116 123 126 128 131 134 137 138 143 146 153 160 167 168 171 174 177 179 181 183 186 189 192 194 196 198 203 209 215 221 223 227 231 237 238 241 244 247 251 255 259 260 261 263 265 267 298 300 301 302 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 ]);
M_.params(1) = 2.0;
sigma = M_.params(1);
M_.params(2) = 0.99;
beta = M_.params(2);
M_.params(3) = 0.0045;
g_bar = M_.params(3);
M_.params(4) = 0.72;
nu = M_.params(4);
M_.params(15) = 0.0;
ha = M_.params(15);
M_.params(7) = 1.15;
mu_ss = M_.params(7);
M_.params(5) = 0.85;
xi = M_.params(5);
M_.params(6) = 0.65;
omega_sc = M_.params(6);
M_.params(8) = 0.32;
sigma_ac = M_.params(8);
M_.params(9) = 0.32;
sigma_ai = M_.params(9);
M_.params(10) = 1.5;
Psi_K = M_.params(10);
M_.params(11) = 0.20;
I_Y = M_.params(11);
M_.params(12) = 11;
K_Y = M_.params(12);
M_.params(13) = 0.67;
labor_share = M_.params(13);
M_.params(14) = 0.2;
nu_R = M_.params(14);
M_.params(17) = 0.20;
eta = M_.params(17);
M_.params(16) = 0.32;
phi = M_.params(16);
M_.params(18) = 0.81;
Psi = M_.params(18);
M_.params(28) = 1.0;
p_I_ss = M_.params(28);
M_.params(29) = 0.30;
N_ss = M_.params(29);
M_.params(19) = 0.1;
rho_g = M_.params(19);
M_.params(20) = 0.9;
rho_Z = M_.params(20);
M_.params(21) = 0.9;
rho_ZI = M_.params(21);
M_.params(22) = 0.9;
rho_N = M_.params(22);
M_.params(23) = 0.9;
rho_D = M_.params(23);
M_.params(24) = 0.9;
rho_DI = M_.params(24);
M_.params(25) = 0.9;
rho_b = M_.params(25);
M_.params(26) = 0.9;
rho_muC = M_.params(26);
M_.params(27) = 0.9;
rho_muI = M_.params(27);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = 5.184e-05;
M_.Sigma_e(2, 2) = 5.184e-05;
M_.Sigma_e(3, 3) = 5.184e-05;
M_.Sigma_e(4, 4) = 5.184e-05;
M_.Sigma_e(5, 5) = 5.184e-05;
M_.Sigma_e(6, 6) = 5.184e-05;
M_.Sigma_e(7, 7) = 5.184e-05;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.param_vals(:,1)==1))
    error('Parameter sigma has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 1, 1.5, 1.0, 4.0, 1, 1.5, 0.25, 1.0, 4.0, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter ha has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 0.5, 0.0, 0.95, 1, 0.5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==4))
    error('Parameter nu has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 4, 0.72, 0.05, 2.0, 2, 0.72, 0.25, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==16))
    error('Parameter phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 16, 0.8, 0.00, 0.999, 1, 0.32, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==17))
    error('Parameter eta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 17, 0.567, 0.00, 10.0, 2, 0.2, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==5))
    error('Parameter xi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 5, 0.85, 0.5, 2.0, 2, 0.85, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter nu_R has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 0.20, 0.01, 0.5, 1, 0.2, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter sigma_ac has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==9))
    error('Parameter sigma_ai has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 9, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==10))
    error('Parameter Psi_K has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 10, 1.5, 0.0, 50, 2, 4, 1.0, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==19))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 19, 0.1, 0.0001, 0.9, 1, 0.1, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter rho_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==21))
    error('Parameter rho_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 21, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==22))
    error('Parameter rho_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 22, 0.6, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==23))
    error('Parameter rho_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 23, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==24))
    error('Parameter rho_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 24, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==25))
    error('Parameter rho_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 25, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==26))
    error('Parameter rho_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 26, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==27))
    error('Parameter rho_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 27, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for e_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.01, 0.0000001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for e_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.01, 0.00001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for e_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for e_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for e_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.01, 0.00001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for e_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for e_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, 0.01, 0.0001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==8))
    error('The standard deviation for e_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 8, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==9))
    error('The standard deviation for e_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 9, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
options_.TeX=1;
options_.MCMC_jumping_covariance = 'hessian';
options_.TeX = true;
options_.datafile = 'observables_sectoral';
options_.lik_init = 2;
options_.load_mh_file = true;
options_.mh_drop = 0.3;
options_.mh_init_scale = 0.1;
options_.mh_jscale = 0.23688;
options_.mh_nblck = 2;
options_.mh_replic = 100000;
options_.mode_check.status = true;
options_.mode_compute = 0;
options_.mode_file = 'SU_sectoral_perfect_mobility_mh_mode';
options_.optim_opt = '''MaxIter'',200';
options_.presample = 0;
options_.prior_trunc = 0;
options_.order = 1;
var_list_ = {'Y_obs';'Y_N_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'SR_obs';'util_obs';'D_obs';'h_obs'};
oo_recursive_=dynare_estimation(var_list_);
write_latex_parameter_table;
write_latex_definitions;
write_latex_prior_table;
collect_latex_files;
options_.irf = 20;
options_.nofunctions = true;
options_.order = 1;
options_.periods = 0;
var_list_ = {'Y_obs';'Y_N_obs';'SR_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'util_obs';'D_obs';'h_obs';'tech_obs'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_sectoral_perfect_mobility_results.mat'], 'options_mom_', '-append');
end
disp('Note: 4 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
