%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'BRS_sectoral';
M_.dynare_version = '6.2';
oo_.dynare_version = '6.2';
options_.dynare_version = '6.2';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(9,1);
M_.exo_names_tex = cell(9,1);
M_.exo_names_long = cell(9,1);
M_.exo_names(1) = {'e_g'};
M_.exo_names_tex(1) = {'{e_g}'};
M_.exo_names_long(1) = {'Labor-augmenting-technology growth shock'};
M_.exo_names(2) = {'e_Z'};
M_.exo_names_tex(2) = {'{e_Z}'};
M_.exo_names_long(2) = {'TFP shock'};
M_.exo_names(3) = {'e_ZI'};
M_.exo_names_tex(3) = {'{e_{ZI}}'};
M_.exo_names_long(3) = {'Investment-specific tech shock'};
M_.exo_names(4) = {'e_N'};
M_.exo_names_tex(4) = {'{e_N}'};
M_.exo_names_long(4) = {'Labor supply shock'};
M_.exo_names(5) = {'e_D'};
M_.exo_names_tex(5) = {'{e_D}'};
M_.exo_names_long(5) = {'Shopping disutility shock'};
M_.exo_names(6) = {'e_DI'};
M_.exo_names_tex(6) = {'{e_DI}'};
M_.exo_names_long(6) = {'Relative investment shopping disutility shock'};
M_.exo_names(7) = {'e_b'};
M_.exo_names_tex(7) = {'{e_b}'};
M_.exo_names_long(7) = {'Discount factor shock'};
M_.exo_names(8) = {'e_muC'};
M_.exo_names_tex(8) = {'{e_{muC}}'};
M_.exo_names_long(8) = {'Wage markup shock: C'};
M_.exo_names(9) = {'e_muI'};
M_.exo_names_tex(9) = {'{e_{muI}}'};
M_.exo_names_long(9) = {'Wage markup shock: I'};
M_.endo_names = cell(105,1);
M_.endo_names_tex = cell(105,1);
M_.endo_names_long = cell(105,1);
M_.endo_names(1) = {'Y'};
M_.endo_names_tex(1) = {'{Y}'};
M_.endo_names_long(1) = {'output'};
M_.endo_names(2) = {'C'};
M_.endo_names_tex(2) = {'{C}'};
M_.endo_names_long(2) = {'consumption'};
M_.endo_names(3) = {'Y_mc'};
M_.endo_names_tex(3) = {'{Y_{mc}}'};
M_.endo_names_long(3) = {'consumption non-durable goods'};
M_.endo_names(4) = {'Y_sc'};
M_.endo_names_tex(4) = {'Y_{sc}}'};
M_.endo_names_long(4) = {'consumption services'};
M_.endo_names(5) = {'SR'};
M_.endo_names_tex(5) = {'{SR}'};
M_.endo_names_long(5) = {'aggregate share-weighted Solow residual'};
M_.endo_names(6) = {'I'};
M_.endo_names_tex(6) = {'{I}'};
M_.endo_names_long(6) = {'investment'};
M_.endo_names(7) = {'I_mc'};
M_.endo_names_tex(7) = {'{I_C}'};
M_.endo_names_long(7) = {'investment:mc'};
M_.endo_names(8) = {'I_sc'};
M_.endo_names_tex(8) = {'{I_C}'};
M_.endo_names_long(8) = {'investment:sc'};
M_.endo_names(9) = {'I_I'};
M_.endo_names_tex(9) = {'{I_I}'};
M_.endo_names_long(9) = {'investment:I'};
M_.endo_names(10) = {'K'};
M_.endo_names_tex(10) = {'{K}'};
M_.endo_names_long(10) = {'Capital'};
M_.endo_names(11) = {'K_mc'};
M_.endo_names_tex(11) = {'{K_{mc}}'};
M_.endo_names_long(11) = {'Capital:mc'};
M_.endo_names(12) = {'K_sc'};
M_.endo_names_tex(12) = {'{K_{sc}}'};
M_.endo_names_long(12) = {'Capital:sc'};
M_.endo_names(13) = {'K_I'};
M_.endo_names_tex(13) = {'{K_I}'};
M_.endo_names_long(13) = {'Capital:I'};
M_.endo_names(14) = {'N'};
M_.endo_names_tex(14) = {'{N}'};
M_.endo_names_long(14) = {'Hours'};
M_.endo_names(15) = {'N_mc'};
M_.endo_names_tex(15) = {'{N_{mc}}'};
M_.endo_names_long(15) = {'Hours:mc'};
M_.endo_names(16) = {'N_sc'};
M_.endo_names_tex(16) = {'{N_{sc}}'};
M_.endo_names_long(16) = {'Hours:sc'};
M_.endo_names(17) = {'N_C'};
M_.endo_names_tex(17) = {'{N_C}'};
M_.endo_names_long(17) = {'Hours:C'};
M_.endo_names(18) = {'N_I'};
M_.endo_names_tex(18) = {'{N_I}'};
M_.endo_names_long(18) = {'Hours:I'};
M_.endo_names(19) = {'N_comp'};
M_.endo_names_tex(19) = {'{N}'};
M_.endo_names_long(19) = {'Labor CES aggregate'};
M_.endo_names(20) = {'Z_C'};
M_.endo_names_tex(20) = {'{Z_{C}}'};
M_.endo_names_long(20) = {'Tech:mc'};
M_.endo_names(21) = {'u_ZI'};
M_.endo_names_tex(21) = {'u\_ZI'};
M_.endo_names_long(21) = {'u_ZI'};
M_.endo_names(22) = {'Z_I'};
M_.endo_names_tex(22) = {'{Z_I}'};
M_.endo_names_long(22) = {'Tech:I'};
M_.endo_names(23) = {'tech'};
M_.endo_names_tex(23) = {'{tech}'};
M_.endo_names_long(23) = {'General technology measure'};
M_.endo_names(24) = {'theta_N'};
M_.endo_names_tex(24) = {'{\theta_N}'};
M_.endo_names_long(24) = {'Labor disutility'};
M_.endo_names(25) = {'theta_D'};
M_.endo_names_tex(25) = {'{\theta_D}'};
M_.endo_names_long(25) = {'Shopping disutility'};
M_.endo_names(26) = {'theta_I'};
M_.endo_names_tex(26) = {'{\theta_I}'};
M_.endo_names_long(26) = {'Relative shopping disutility'};
M_.endo_names(27) = {'theta_b'};
M_.endo_names_tex(27) = {'{\theta_b}'};
M_.endo_names_long(27) = {'Discount factor shock'};
M_.endo_names(28) = {'mu_C'};
M_.endo_names_tex(28) = {'{\mu_C}'};
M_.endo_names_long(28) = {'mu_C'};
M_.endo_names(29) = {'mu_I'};
M_.endo_names_tex(29) = {'\mu_I}'};
M_.endo_names_long(29) = {'mu_I'};
M_.endo_names(30) = {'R_mc'};
M_.endo_names_tex(30) = {'{R_{mc}}'};
M_.endo_names_long(30) = {'Capital rental rate:mc'};
M_.endo_names(31) = {'R_sc'};
M_.endo_names_tex(31) = {'{R_{sc}}'};
M_.endo_names_long(31) = {'Capital rental rate:sc'};
M_.endo_names(32) = {'R_I'};
M_.endo_names_tex(32) = {'{R_I}'};
M_.endo_names_long(32) = {'Capital rental rate:I'};
M_.endo_names(33) = {'W_C'};
M_.endo_names_tex(33) = {'{W_C}'};
M_.endo_names_long(33) = {'Real wage:C'};
M_.endo_names(34) = {'W_I'};
M_.endo_names_tex(34) = {'{W_I}'};
M_.endo_names_long(34) = {'Real wage:I'};
M_.endo_names(35) = {'W'};
M_.endo_names_tex(35) = {'{W}'};
M_.endo_names_long(35) = {'Real wage'};
M_.endo_names(36) = {'h_mc'};
M_.endo_names_tex(36) = {'{h_mc}'};
M_.endo_names_long(36) = {'Capital utilization rate:mc'};
M_.endo_names(37) = {'h_sc'};
M_.endo_names_tex(37) = {'{h_sc}'};
M_.endo_names_long(37) = {'Capital utilization rate:sc'};
M_.endo_names(38) = {'h_I'};
M_.endo_names_tex(38) = {'{h_I}'};
M_.endo_names_long(38) = {'Capital utilization rate:I'};
M_.endo_names(39) = {'h'};
M_.endo_names_tex(39) = {'h'};
M_.endo_names_long(39) = {'Capital utilization rate: average'};
M_.endo_names(40) = {'delta_mc'};
M_.endo_names_tex(40) = {'{\delta_{mc}}'};
M_.endo_names_long(40) = {'Capital depreciation rate:mc'};
M_.endo_names(41) = {'delta_sc'};
M_.endo_names_tex(41) = {'{\delta_{sc}}'};
M_.endo_names_long(41) = {'Capital depreciation rate:sc'};
M_.endo_names(42) = {'delta_I'};
M_.endo_names_tex(42) = {'{\delta_I}'};
M_.endo_names_long(42) = {'Capital depreciation rate:I'};
M_.endo_names(43) = {'delta_mc_pr'};
M_.endo_names_tex(43) = {'{\delta_{mc,pr}'};
M_.endo_names_long(43) = {'Capital depreciation rate derivative:mc'};
M_.endo_names(44) = {'delta_sc_pr'};
M_.endo_names_tex(44) = {'{\delta_{sc,pr}}'};
M_.endo_names_long(44) = {'Capital depreciation rate derivative:sc'};
M_.endo_names(45) = {'delta_I_pr'};
M_.endo_names_tex(45) = {'{\delta_{I,pr}}'};
M_.endo_names_long(45) = {'Capital depreciation rate derivative:I'};
M_.endo_names(46) = {'Smc'};
M_.endo_names_tex(46) = {'S'};
M_.endo_names_long(46) = {'Investment adjustment cost:mc'};
M_.endo_names(47) = {'Ssc'};
M_.endo_names_tex(47) = {'S'};
M_.endo_names_long(47) = {'Investment adjustment cost:sc'};
M_.endo_names(48) = {'Si'};
M_.endo_names_tex(48) = {'S'};
M_.endo_names_long(48) = {'Investment adjustment cost:I'};
M_.endo_names(49) = {'Smc_pr'};
M_.endo_names_tex(49) = {'S_pr'};
M_.endo_names_long(49) = {'Derivative investment adjustment cost:mc'};
M_.endo_names(50) = {'Ssc_pr'};
M_.endo_names_tex(50) = {'S_pr'};
M_.endo_names_long(50) = {'Derivative investment adjustment cost:sc'};
M_.endo_names(51) = {'Si_pr'};
M_.endo_names_tex(51) = {'S_pr'};
M_.endo_names_long(51) = {'Derivative investment adjustment cost:I'};
M_.endo_names(52) = {'D'};
M_.endo_names_tex(52) = {'{D}'};
M_.endo_names_long(52) = {'Shopping effort'};
M_.endo_names(53) = {'D_mc'};
M_.endo_names_tex(53) = {'{D_{mc}}'};
M_.endo_names_long(53) = {'Shopping effort:mc'};
M_.endo_names(54) = {'D_sc'};
M_.endo_names_tex(54) = {'{D_{sc}}'};
M_.endo_names_long(54) = {'Shopping effort:sc'};
M_.endo_names(55) = {'D_I'};
M_.endo_names_tex(55) = {'{D_I}'};
M_.endo_names_long(55) = {'Shopping effort:I'};
M_.endo_names(56) = {'Gam'};
M_.endo_names_tex(56) = {'{\Gamma}'};
M_.endo_names_long(56) = {'Composite utility term'};
M_.endo_names(57) = {'p_mc'};
M_.endo_names_tex(57) = {'{p_{mc}}'};
M_.endo_names_long(57) = {'Relative non-durable price'};
M_.endo_names(58) = {'p_sc'};
M_.endo_names_tex(58) = {'{p_{sc}}'};
M_.endo_names_long(58) = {'Relative service price'};
M_.endo_names(59) = {'p_I'};
M_.endo_names_tex(59) = {'{p_I}'};
M_.endo_names_long(59) = {'Relative investment price'};
M_.endo_names(60) = {'lam'};
M_.endo_names_tex(60) = {'{\lambda}'};
M_.endo_names_long(60) = {'Marginal utility of wealth'};
M_.endo_names(61) = {'Q_mc'};
M_.endo_names_tex(61) = {'{Q}'};
M_.endo_names_long(61) = {'Relative price of capital:mc'};
M_.endo_names(62) = {'Q_sc'};
M_.endo_names_tex(62) = {'{Q}'};
M_.endo_names_long(62) = {'Relative price of capital:sc'};
M_.endo_names(63) = {'Q_I'};
M_.endo_names_tex(63) = {'{Q}'};
M_.endo_names_long(63) = {'Relative price of capital:I'};
M_.endo_names(64) = {'x_mc'};
M_.endo_names_tex(64) = {'{x}'};
M_.endo_names_long(64) = {'Growth rate of investment:mc'};
M_.endo_names(65) = {'x_sc'};
M_.endo_names_tex(65) = {'{x}'};
M_.endo_names_long(65) = {'Growth rate of investment:sc'};
M_.endo_names(66) = {'x_I'};
M_.endo_names_tex(66) = {'{x}'};
M_.endo_names_long(66) = {'Growth rate of investment:I'};
M_.endo_names(67) = {'log_SR'};
M_.endo_names_tex(67) = {'log\_SR'};
M_.endo_names_long(67) = {'Solow residual'};
M_.endo_names(68) = {'util'};
M_.endo_names_tex(68) = {'{util}'};
M_.endo_names_long(68) = {'Capacity utilization'};
M_.endo_names(69) = {'util_ND'};
M_.endo_names_tex(69) = {'{util_{ND}}'};
M_.endo_names_long(69) = {'Capacity utilization:ND'};
M_.endo_names(70) = {'util_sc'};
M_.endo_names_tex(70) = {'{util_{sc}}'};
M_.endo_names_long(70) = {'Capacity utilization:sc'};
M_.endo_names(71) = {'util_D'};
M_.endo_names_tex(71) = {'{util_D}'};
M_.endo_names_long(71) = {'Capacity utilization:D'};
M_.endo_names(72) = {'g'};
M_.endo_names_tex(72) = {'{g}'};
M_.endo_names_long(72) = {'Growth rate of stochastic trend'};
M_.endo_names(73) = {'log_Y'};
M_.endo_names_tex(73) = {'log\_Y'};
M_.endo_names_long(73) = {'log_Y'};
M_.endo_names(74) = {'log_C'};
M_.endo_names_tex(74) = {'log\_C'};
M_.endo_names_long(74) = {'log_C'};
M_.endo_names(75) = {'log_I'};
M_.endo_names_tex(75) = {'log\_I'};
M_.endo_names_long(75) = {'log_I'};
M_.endo_names(76) = {'log_N'};
M_.endo_names_tex(76) = {'log\_N'};
M_.endo_names_long(76) = {'log_N'};
M_.endo_names(77) = {'log_NC'};
M_.endo_names_tex(77) = {'log\_NC'};
M_.endo_names_long(77) = {'log_NC'};
M_.endo_names(78) = {'log_NI'};
M_.endo_names_tex(78) = {'log\_NI'};
M_.endo_names_long(78) = {'log_NI'};
M_.endo_names(79) = {'log_K'};
M_.endo_names_tex(79) = {'log\_K'};
M_.endo_names_long(79) = {'log_K'};
M_.endo_names(80) = {'log_Y_N'};
M_.endo_names_tex(80) = {'log\_Y\_N'};
M_.endo_names_long(80) = {'log_Y_N'};
M_.endo_names(81) = {'log_D'};
M_.endo_names_tex(81) = {'log\_D'};
M_.endo_names_long(81) = {'log_D'};
M_.endo_names(82) = {'log_h'};
M_.endo_names_tex(82) = {'log\_h'};
M_.endo_names_long(82) = {'log_h'};
M_.endo_names(83) = {'log_p_I'};
M_.endo_names_tex(83) = {'log\_p\_I'};
M_.endo_names_long(83) = {'log_p_I'};
M_.endo_names(84) = {'log_util'};
M_.endo_names_tex(84) = {'log\_util'};
M_.endo_names_long(84) = {'log_util'};
M_.endo_names(85) = {'log_util_ND'};
M_.endo_names_tex(85) = {'log\_util\_ND'};
M_.endo_names_long(85) = {'log_util_ND'};
M_.endo_names(86) = {'log_util_D'};
M_.endo_names_tex(86) = {'log\_util\_D'};
M_.endo_names_long(86) = {'log_util_D'};
M_.endo_names(87) = {'log_W'};
M_.endo_names_tex(87) = {'log\_W'};
M_.endo_names_long(87) = {'log_W'};
M_.endo_names(88) = {'log_tech'};
M_.endo_names_tex(88) = {'log\_tech'};
M_.endo_names_long(88) = {'log_tech'};
M_.endo_names(89) = {'C_obs'};
M_.endo_names_tex(89) = {'C\_obs'};
M_.endo_names_long(89) = {'C_obs'};
M_.endo_names(90) = {'I_obs'};
M_.endo_names_tex(90) = {'I\_obs'};
M_.endo_names_long(90) = {'I_obs'};
M_.endo_names(91) = {'Y_obs'};
M_.endo_names_tex(91) = {'Y\_obs'};
M_.endo_names_long(91) = {'Y_obs'};
M_.endo_names(92) = {'SR_obs'};
M_.endo_names_tex(92) = {'SR\_obs'};
M_.endo_names_long(92) = {'SR_obs'};
M_.endo_names(93) = {'Y_N_obs'};
M_.endo_names_tex(93) = {'Y\_N\_obs'};
M_.endo_names_long(93) = {'Y_N_obs'};
M_.endo_names(94) = {'p_I_obs'};
M_.endo_names_tex(94) = {'p\_I\_obs'};
M_.endo_names_long(94) = {'p_I_obs'};
M_.endo_names(95) = {'N_obs'};
M_.endo_names_tex(95) = {'N\_obs'};
M_.endo_names_long(95) = {'N_obs'};
M_.endo_names(96) = {'NC_obs'};
M_.endo_names_tex(96) = {'NC\_obs'};
M_.endo_names_long(96) = {'NC_obs'};
M_.endo_names(97) = {'NI_obs'};
M_.endo_names_tex(97) = {'NI\_obs'};
M_.endo_names_long(97) = {'NI_obs'};
M_.endo_names(98) = {'util_ND_obs'};
M_.endo_names_tex(98) = {'util\_ND\_obs'};
M_.endo_names_long(98) = {'util_ND_obs'};
M_.endo_names(99) = {'util_D_obs'};
M_.endo_names_tex(99) = {'util\_D\_obs'};
M_.endo_names_long(99) = {'util_D_obs'};
M_.endo_names(100) = {'util_obs'};
M_.endo_names_tex(100) = {'util\_obs'};
M_.endo_names_long(100) = {'util_obs'};
M_.endo_names(101) = {'tech_obs'};
M_.endo_names_tex(101) = {'tech\_obs'};
M_.endo_names_long(101) = {'tech_obs'};
M_.endo_names(102) = {'w_obs'};
M_.endo_names_tex(102) = {'w\_obs'};
M_.endo_names_long(102) = {'w_obs'};
M_.endo_names(103) = {'D_obs'};
M_.endo_names_tex(103) = {'D\_obs'};
M_.endo_names_long(103) = {'D_obs'};
M_.endo_names(104) = {'h_obs'};
M_.endo_names_tex(104) = {'h\_obs'};
M_.endo_names_long(104) = {'h_obs'};
M_.endo_names(105) = {'K_obs'};
M_.endo_names_tex(105) = {'K\_obs'};
M_.endo_names_long(105) = {'K_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(30,1);
M_.param_names_tex = cell(30,1);
M_.param_names_long = cell(30,1);
M_.param_names(1) = {'sigma'};
M_.param_names_tex(1) = {'{\sigma}'};
M_.param_names_long(1) = {'Risk aversion'};
M_.param_names(2) = {'beta'};
M_.param_names_tex(2) = {'{\beta}'};
M_.param_names_long(2) = {'Discount factor'};
M_.param_names(3) = {'g_bar'};
M_.param_names_tex(3) = {'{\overline{g}}'};
M_.param_names_long(3) = {'Quarterly trend growth rate'};
M_.param_names(4) = {'nu'};
M_.param_names_tex(4) = {'\nu'};
M_.param_names_long(4) = {'Frisch elasticity'};
M_.param_names(5) = {'xi'};
M_.param_names_tex(5) = {'\xi'};
M_.param_names_long(5) = {'elasticity of substitution between non-durables and services'};
M_.param_names(6) = {'omega_sc'};
M_.param_names_tex(6) = {'\omega_{sc}'};
M_.param_names_long(6) = {'Weight of services in aggregator'};
M_.param_names(7) = {'mu_ss'};
M_.param_names_tex(7) = {'\mu_{ss}'};
M_.param_names_long(7) = {'steady-state wage markup'};
M_.param_names(8) = {'sigma_ac'};
M_.param_names_tex(8) = {'{\sigma_{ac}}'};
M_.param_names_long(8) = {'Inverse elasticity of marginal utilization cost wrt rental rate:C'};
M_.param_names(9) = {'sigma_ai'};
M_.param_names_tex(9) = {'{\sigma_{ai}}'};
M_.param_names_long(9) = {'Inverse elasticity of marginal utilization cost wrt rental rate:I'};
M_.param_names(10) = {'Psi_K'};
M_.param_names_tex(10) = {'{\Psi_{K}}'};
M_.param_names_long(10) = {'Investment adjustment cost parameter'};
M_.param_names(11) = {'I_Y'};
M_.param_names_tex(11) = {'{I_Y}'};
M_.param_names_long(11) = {'Investment-output ratio'};
M_.param_names(12) = {'K_Y'};
M_.param_names_tex(12) = {'{K_Y}'};
M_.param_names_long(12) = {'Capital-output ratio (quarterly)'};
M_.param_names(13) = {'labor_share'};
M_.param_names_tex(13) = {'(labor share)'};
M_.param_names_long(13) = {'Labor share'};
M_.param_names(14) = {'nu_R'};
M_.param_names_tex(14) = {'{\nu_R}'};
M_.param_names_long(14) = {'Fixed cost share'};
M_.param_names(15) = {'ha'};
M_.param_names_tex(15) = {'{ha}'};
M_.param_names_long(15) = {'Habit persistence'};
M_.param_names(16) = {'phi'};
M_.param_names_tex(16) = {'{\phi}'};
M_.param_names_long(16) = {'Shopping matching function elasticity'};
M_.param_names(17) = {'eta'};
M_.param_names_tex(17) = {'{\eta}'};
M_.param_names_long(17) = {'Shopping disutility'};
M_.param_names(18) = {'Psi'};
M_.param_names_tex(18) = {'{\Psi}'};
M_.param_names_long(18) = {'Matching utilization'};
M_.param_names(19) = {'theta'};
M_.param_names_tex(19) = {'{\theta}'};
M_.param_names_long(19) = {'Inverse intersectoral elasticity of labor supply'};
M_.param_names(20) = {'rho_g'};
M_.param_names_tex(20) = {'{\rho_g}'};
M_.param_names_long(20) = {'persistence TFP growth shock'};
M_.param_names(21) = {'rho_Z'};
M_.param_names_tex(21) = {'{\rho_Z}'};
M_.param_names_long(21) = {'persistence TFP shock'};
M_.param_names(22) = {'rho_ZI'};
M_.param_names_tex(22) = {'{\rho_{ZI}}'};
M_.param_names_long(22) = {'persistence I-specific shock'};
M_.param_names(23) = {'rho_N'};
M_.param_names_tex(23) = {'{\rho_N}'};
M_.param_names_long(23) = {'persistence labor supply shock'};
M_.param_names(24) = {'rho_D'};
M_.param_names_tex(24) = {'{\rho_D}'};
M_.param_names_long(24) = {'persistence shopping effort shock'};
M_.param_names(25) = {'rho_DI'};
M_.param_names_tex(25) = {'{\rho_{DI}}'};
M_.param_names_long(25) = {'persistence relative shopping effort shock'};
M_.param_names(26) = {'rho_b'};
M_.param_names_tex(26) = {'{\rho_b}'};
M_.param_names_long(26) = {'persistence discount factor shock'};
M_.param_names(27) = {'rho_muC'};
M_.param_names_tex(27) = {'{\rho_{muC}}'};
M_.param_names_long(27) = {'persistence wage markup shock:C'};
M_.param_names(28) = {'rho_muI'};
M_.param_names_tex(28) = {'{\rho_{muI}}'};
M_.param_names_long(28) = {'persistence wage markup shock:I'};
M_.param_names(29) = {'p_I_ss'};
M_.param_names_tex(29) = {'p\_I\_ss'};
M_.param_names_long(29) = {'p_I_ss'};
M_.param_names(30) = {'N_ss'};
M_.param_names_tex(30) = {'N\_ss'};
M_.param_names_long(30) = {'N_ss'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 9;
M_.endo_nbr = 105;
M_.param_nbr = 30;
M_.orig_endo_nbr = 105;
M_.aux_vars = [];
options_.varobs = cell(7, 1);
options_.varobs(1)  = {'NC_obs'};
options_.varobs(2)  = {'NI_obs'};
options_.varobs(3)  = {'C_obs'};
options_.varobs(4)  = {'I_obs'};
options_.varobs(5)  = {'p_I_obs'};
options_.varobs(6)  = {'util_ND_obs'};
options_.varobs(7)  = {'util_D_obs'};
options_.varobs_id = [ 96 97 89 90 94 98 99  ];
M_.Sigma_e = zeros(9, 9);
M_.Correlation_matrix = eye(9, 9);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 105;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 34 0;
 1 35 0;
 0 36 0;
 0 37 0;
 0 38 0;
 0 39 0;
 2 40 0;
 3 41 0;
 4 42 0;
 0 43 0;
 5 44 0;
 6 45 0;
 7 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 0 50 0;
 0 51 0;
 0 52 0;
 8 53 0;
 0 54 0;
 9 55 0;
 0 56 0;
 10 57 0;
 11 58 0;
 12 59 0;
 13 60 0;
 14 61 0;
 15 62 0;
 0 63 139;
 0 64 140;
 0 65 141;
 0 66 0;
 0 67 0;
 0 68 0;
 0 69 142;
 0 70 143;
 0 71 144;
 0 72 0;
 0 73 145;
 0 74 146;
 0 75 147;
 0 76 0;
 0 77 0;
 0 78 0;
 0 79 0;
 0 80 0;
 0 81 0;
 0 82 148;
 0 83 149;
 0 84 150;
 0 85 0;
 0 86 0;
 0 87 0;
 0 88 0;
 0 89 0;
 0 90 0;
 0 91 0;
 0 92 0;
 0 93 151;
 0 94 152;
 0 95 153;
 0 96 154;
 0 97 155;
 0 98 156;
 0 99 157;
 16 100 0;
 0 101 0;
 0 102 0;
 0 103 0;
 0 104 0;
 17 105 158;
 18 106 0;
 19 107 0;
 20 108 0;
 21 109 0;
 22 110 0;
 23 111 0;
 24 112 0;
 25 113 0;
 26 114 0;
 27 115 0;
 28 116 0;
 29 117 0;
 30 118 0;
 31 119 0;
 32 120 0;
 33 121 0;
 0 122 0;
 0 123 0;
 0 124 0;
 0 125 0;
 0 126 0;
 0 127 0;
 0 128 0;
 0 129 0;
 0 130 0;
 0 131 0;
 0 132 0;
 0 133 0;
 0 134 0;
 0 135 0;
 0 136 0;
 0 137 0;
 0 138 0;]';
M_.nstatic = 53;
M_.nfwrd   = 19;
M_.npred   = 32;
M_.nboth   = 1;
M_.nsfwrd   = 20;
M_.nspred   = 33;
M_.ndynamic   = 52;
M_.dynamic_tmp_nbr = [86; 23; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Labor composite' ;
  2 , 'name' , 'Labor leisure:C' ;
  3 , 'name' , 'Labor leisure:I' ;
  4 , 'name' , 'Marginal utility of wealth' ;
  5 , 'name' , 'Demand curve: mc' ;
  6 , 'name' , 'Demand curve: sc' ;
  7 , 'name' , 'Shopping:mc' ;
  8 , 'name' , 'Shopping:sc' ;
  9 , 'name' , 'Shopping:I' ;
  10 , 'name' , 'Composite utility term' ;
  11 , 'name' , 'Consumption CES aggregator' ;
  12 , 'name' , 'Investment adjustment cost function:mc' ;
  13 , 'name' , 'Investment adjustment cost function:mc' ;
  14 , 'name' , 'Investment adjustment cost function:I' ;
  15 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  16 , 'name' , 'Investment adjustment cost function: derivative mc' ;
  17 , 'name' , 'Investment adjustment cost function: derivative I' ;
  18 , 'name' , 'Investment growth:mc' ;
  19 , 'name' , 'Investment growth:mc' ;
  20 , 'name' , 'Investment growth:I' ;
  21 , 'name' , 'Depreciation rate: mc' ;
  22 , 'name' , 'Depreciation rate: sc' ;
  23 , 'name' , 'Depreciation rate: I' ;
  24 , 'name' , 'Depreciation rate derivative: mc' ;
  25 , 'name' , 'Depreciation rate derivative: sc' ;
  26 , 'name' , 'Depreciation rate derivative: I' ;
  27 , 'name' , 'Tobins Q: mc' ;
  28 , 'name' , 'Tobins Q: sc' ;
  29 , 'name' , 'Tobins Q: I' ;
  30 , 'name' , 'Euler equation: mc' ;
  31 , 'name' , 'Euler equation: sc' ;
  32 , 'name' , 'Euler equation: I' ;
  33 , 'name' , 'Utilization: mc' ;
  34 , 'name' , 'Utilization: sc' ;
  35 , 'name' , 'Utilization: I' ;
  36 , 'name' , 'Non-durable goods production' ;
  37 , 'name' , 'Services production' ;
  38 , 'name' , 'Investment production' ;
  39 , 'name' , 'Capital law of motion:mc' ;
  40 , 'name' , 'Capital law of motion:sc' ;
  41 , 'name' , 'Capital law of motion:I' ;
  42 , 'name' , 'Labor demand:mc' ;
  43 , 'name' , 'Labor demand:sc' ;
  44 , 'name' , 'Labor demand:I' ;
  45 , 'name' , 'Capital demand:mc' ;
  46 , 'name' , 'Capital demand:sc' ;
  47 , 'name' , 'Capital demand:I' ;
  48 , 'name' , 'Labor composition' ;
  49 , 'name' , 'Labor composition: C' ;
  50 , 'name' , 'Capital composition' ;
  51 , 'name' , 'Investment composition' ;
  52 , 'name' , 'Shopping composition' ;
  53 , 'name' , 'Capital utilization composition' ;
  54 , 'name' , 'Aggregate wage' ;
  55 , 'name' , 'Output (base-year prices)' ;
  56 , 'name' , 'Solow residual' ;
  57 , 'name' , 'Capacity utilization' ;
  58 , 'name' , 'util_sc' ;
  59 , 'name' , 'util_D' ;
  60 , 'name' , 'util' ;
  61 , 'name' , 'General technology measure' ;
  62 , 'name' , 'stochastic trend process' ;
  63 , 'name' , 'Stationary TFP process' ;
  64 , 'name' , 'Independent component of I-specific tech' ;
  65 , 'name' , 'Investment-specific TFP process' ;
  66 , 'name' , 'Labor supply process' ;
  67 , 'name' , 'Shopping effort process' ;
  68 , 'name' , 'Relative shopping effort process' ;
  69 , 'name' , 'Consumption preference process' ;
  70 , 'name' , 'Wage-markup process: C' ;
  71 , 'name' , 'Wage-markup process: I' ;
  72 , 'name' , 'Definition log output' ;
  73 , 'name' , 'Definition log consumption' ;
  74 , 'name' , 'Definition log investment' ;
  75 , 'name' , 'Definition log hours' ;
  76 , 'name' , 'log_NC' ;
  77 , 'name' , 'log_NI' ;
  78 , 'name' , 'log capital' ;
  79 , 'name' , 'Definition log labor productivity' ;
  80 , 'name' , 'Definition log shopping effort' ;
  81 , 'name' , 'Definition log capital utilization' ;
  82 , 'name' , 'Definition of log relative investment  price' ;
  83 , 'name' , 'Definition of log capacity utilization' ;
  84 , 'name' , 'log_util_ND' ;
  85 , 'name' , 'log_util_D' ;
  86 , 'name' , 'Definition of log wages' ;
  87 , 'name' , 'Definition of log Solow residual' ;
  88 , 'name' , 'Definition of log technology' ;
  89 , 'name' , 'C_obs' ;
  90 , 'name' , 'I_obs' ;
  91 , 'name' , 'Y_obs' ;
  92 , 'name' , 'Y_N_obs' ;
  93 , 'name' , 'K_obs' ;
  94 , 'name' , 'w_obs' ;
  95 , 'name' , 'SR_obs' ;
  96 , 'name' , 'tech_obs' ;
  97 , 'name' , 'p_I_obs' ;
  98 , 'name' , 'N_obs' ;
  99 , 'name' , 'NC_obs' ;
  100 , 'name' , 'NI_obs' ;
  101 , 'name' , 'util_ND_obs' ;
  102 , 'name' , 'util_D_obs' ;
  103 , 'name' , 'util_obs' ;
  104 , 'name' , 'D_obs' ;
  105 , 'name' , 'h_obs' ;
};
M_.mapping.Y.eqidx = [53 55 56 60 61 72 ];
M_.mapping.C.eqidx = [5 6 10 11 55 61 73 ];
M_.mapping.Y_mc.eqidx = [5 7 11 36 42 45 53 56 60 ];
M_.mapping.Y_sc.eqidx = [6 8 11 37 43 46 53 56 60 ];
M_.mapping.SR.eqidx = [56 87 ];
M_.mapping.I.eqidx = [9 38 44 47 51 53 55 56 60 61 74 ];
M_.mapping.I_mc.eqidx = [18 39 51 ];
M_.mapping.I_sc.eqidx = [19 40 51 ];
M_.mapping.I_I.eqidx = [20 41 51 ];
M_.mapping.K.eqidx = [50 78 ];
M_.mapping.K_mc.eqidx = [36 39 45 50 56 57 ];
M_.mapping.K_sc.eqidx = [37 40 46 50 56 58 ];
M_.mapping.K_I.eqidx = [38 41 47 50 56 59 ];
M_.mapping.N.eqidx = [48 54 75 ];
M_.mapping.N_mc.eqidx = [36 42 48 49 56 57 ];
M_.mapping.N_sc.eqidx = [37 43 48 49 56 58 ];
M_.mapping.N_C.eqidx = [1 2 49 54 76 ];
M_.mapping.N_I.eqidx = [1 3 38 44 48 54 56 59 77 ];
M_.mapping.N_comp.eqidx = [1 2 3 10 ];
M_.mapping.Z_C.eqidx = [36 37 57 58 61 63 65 ];
M_.mapping.u_ZI.eqidx = [64 65 ];
M_.mapping.Z_I.eqidx = [38 59 61 64 65 ];
M_.mapping.tech.eqidx = [61 88 ];
M_.mapping.theta_N.eqidx = [2 3 10 66 ];
M_.mapping.theta_D.eqidx = [7 8 9 10 67 ];
M_.mapping.theta_I.eqidx = [9 52 68 ];
M_.mapping.theta_b.eqidx = [27 28 29 30 31 32 69 ];
M_.mapping.mu_C.eqidx = [2 70 ];
M_.mapping.mu_I.eqidx = [3 71 ];
M_.mapping.R_mc.eqidx = [30 33 45 ];
M_.mapping.R_sc.eqidx = [31 34 46 ];
M_.mapping.R_I.eqidx = [32 35 47 ];
M_.mapping.W_C.eqidx = [2 42 43 54 ];
M_.mapping.W_I.eqidx = [3 44 54 ];
M_.mapping.W.eqidx = [54 86 ];
M_.mapping.h_mc.eqidx = [21 24 30 36 45 53 57 ];
M_.mapping.h_sc.eqidx = [22 25 31 37 46 53 58 ];
M_.mapping.h_I.eqidx = [23 26 32 38 47 53 59 ];
M_.mapping.h.eqidx = [53 81 ];
M_.mapping.delta_mc.eqidx = [21 30 39 ];
M_.mapping.delta_sc.eqidx = [22 31 40 ];
M_.mapping.delta_I.eqidx = [23 32 41 ];
M_.mapping.delta_mc_pr.eqidx = [24 33 ];
M_.mapping.delta_sc_pr.eqidx = [25 34 ];
M_.mapping.delta_I_pr.eqidx = [26 35 ];
M_.mapping.Smc.eqidx = [12 27 39 ];
M_.mapping.Ssc.eqidx = [13 28 40 ];
M_.mapping.Si.eqidx = [14 29 41 ];
M_.mapping.Smc_pr.eqidx = [15 27 ];
M_.mapping.Ssc_pr.eqidx = [16 28 ];
M_.mapping.Si_pr.eqidx = [17 29 ];
M_.mapping.D.eqidx = [7 8 9 10 52 80 ];
M_.mapping.D_mc.eqidx = [7 36 42 45 52 57 ];
M_.mapping.D_sc.eqidx = [8 37 43 46 52 58 ];
M_.mapping.D_I.eqidx = [9 38 44 47 52 59 ];
M_.mapping.Gam.eqidx = [4 10 ];
M_.mapping.p_mc.eqidx = [5 7 42 45 ];
M_.mapping.p_sc.eqidx = [6 8 43 46 ];
M_.mapping.p_I.eqidx = [9 27 28 29 44 47 82 ];
M_.mapping.lam.eqidx = [4 27 28 29 30 31 32 ];
M_.mapping.Q_mc.eqidx = [27 30 33 ];
M_.mapping.Q_sc.eqidx = [28 31 34 ];
M_.mapping.Q_I.eqidx = [29 32 35 ];
M_.mapping.x_mc.eqidx = [12 15 18 27 ];
M_.mapping.x_sc.eqidx = [13 16 19 28 ];
M_.mapping.x_I.eqidx = [14 17 20 29 ];
M_.mapping.log_SR.eqidx = [87 95 ];
M_.mapping.util.eqidx = [60 83 ];
M_.mapping.util_ND.eqidx = [57 60 84 ];
M_.mapping.util_sc.eqidx = [58 60 ];
M_.mapping.util_D.eqidx = [59 60 85 ];
M_.mapping.g.eqidx = [18 19 20 27 28 29 30 31 32 36 37 38 39 40 41 45 46 47 56 57 58 59 62 89 90 91 92 93 94 95 96 ];
M_.mapping.log_Y.eqidx = [72 79 91 ];
M_.mapping.log_C.eqidx = [73 89 ];
M_.mapping.log_I.eqidx = [74 90 ];
M_.mapping.log_N.eqidx = [75 79 98 ];
M_.mapping.log_NC.eqidx = [76 99 ];
M_.mapping.log_NI.eqidx = [77 100 ];
M_.mapping.log_K.eqidx = [78 93 ];
M_.mapping.log_Y_N.eqidx = [79 92 ];
M_.mapping.log_D.eqidx = [80 104 ];
M_.mapping.log_h.eqidx = [81 105 ];
M_.mapping.log_p_I.eqidx = [82 97 ];
M_.mapping.log_util.eqidx = [83 103 ];
M_.mapping.log_util_ND.eqidx = [84 101 ];
M_.mapping.log_util_D.eqidx = [85 102 ];
M_.mapping.log_W.eqidx = [86 94 ];
M_.mapping.log_tech.eqidx = [88 96 ];
M_.mapping.C_obs.eqidx = [89 ];
M_.mapping.I_obs.eqidx = [90 ];
M_.mapping.Y_obs.eqidx = [91 ];
M_.mapping.SR_obs.eqidx = [95 ];
M_.mapping.Y_N_obs.eqidx = [92 ];
M_.mapping.p_I_obs.eqidx = [97 ];
M_.mapping.N_obs.eqidx = [98 ];
M_.mapping.NC_obs.eqidx = [99 ];
M_.mapping.NI_obs.eqidx = [100 ];
M_.mapping.util_ND_obs.eqidx = [101 ];
M_.mapping.util_D_obs.eqidx = [102 ];
M_.mapping.util_obs.eqidx = [103 ];
M_.mapping.tech_obs.eqidx = [96 ];
M_.mapping.w_obs.eqidx = [94 ];
M_.mapping.D_obs.eqidx = [104 ];
M_.mapping.h_obs.eqidx = [105 ];
M_.mapping.K_obs.eqidx = [93 ];
M_.mapping.e_g.eqidx = [62 ];
M_.mapping.e_Z.eqidx = [63 ];
M_.mapping.e_ZI.eqidx = [64 ];
M_.mapping.e_N.eqidx = [66 ];
M_.mapping.e_D.eqidx = [67 ];
M_.mapping.e_DI.eqidx = [68 ];
M_.mapping.e_b.eqidx = [69 ];
M_.mapping.e_muC.eqidx = [70 ];
M_.mapping.e_muI.eqidx = [71 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 1;
M_.block_structure.block(1).endo_nbr = 8;
M_.block_structure.block(1).mfs = 8;
M_.block_structure.block(1).equation = [ 62 63 66 67 68 69 70 71];
M_.block_structure.block(1).variable = [ 72 20 24 25 26 27 28 29];
M_.block_structure.block(1).is_linear = true;
M_.block_structure.block(1).NNZDerivatives = 16;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ];
M_.block_structure.block(2).Simulation_Type = 6;
M_.block_structure.block(2).endo_nbr = 2;
M_.block_structure.block(2).mfs = 2;
M_.block_structure.block(2).equation = [ 64 65];
M_.block_structure.block(2).variable = [ 21 22];
M_.block_structure.block(2).is_linear = true;
M_.block_structure.block(2).NNZDerivatives = 4;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 2 ];
M_.block_structure.block(3).Simulation_Type = 8;
M_.block_structure.block(3).endo_nbr = 50;
M_.block_structure.block(3).mfs = 43;
M_.block_structure.block(3).equation = [ 12 14 24 25 26 51 13 9 10 11 42 43 44 46 47 5 49 4 52 3 8 7 2 1 18 19 20 39 40 41 6 15 16 17 21 22 23 27 28 29 30 31 32 33 34 35 36 37 38 45];
M_.block_structure.block(3).variable = [ 46 48 43 44 45 6 47 52 19 3 15 58 18 54 59 57 16 56 55 34 4 53 33 17 7 8 9 11 12 13 2 49 50 51 40 41 42 64 65 66 60 62 63 61 31 32 36 37 38 30];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 206;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [18 19 20 21 22 23 24 0 0 0 0 0 0 0 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 ];
M_.block_structure.block(4).Simulation_Type = 1;
M_.block_structure.block(4).endo_nbr = 45;
M_.block_structure.block(4).mfs = 45;
M_.block_structure.block(4).equation = [ 59 85 58 57 55 53 84 102 60 81 80 77 101 83 103 104 105 48 100 76 75 99 98 72 61 56 54 50 88 87 86 82 79 78 74 73 97 96 95 94 93 92 91 90 89];
M_.block_structure.block(4).variable = [ 71 86 70 69 1 39 85 99 68 82 81 78 98 84 100 103 104 14 97 77 76 96 95 73 23 5 35 10 88 67 87 83 80 79 75 74 94 101 92 102 105 93 91 90 89];
M_.block_structure.block(4).is_linear = true;
M_.block_structure.block(4).NNZDerivatives = 99;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [2 7 10 11 12 14 20 21 24 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([]);
M_.block_structure.block(1).g1_sparse_colval = int32([]);
M_.block_structure.block(1).g1_sparse_colptr = int32([]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 2 2 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 1 2 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 3 4 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([18 19 20 21 40 43 7 22 41 8 23 42 2 1 2 12 14 15 2 13 16 17 3 4 9 15 40 43 4 10 40 5 7 14 24 6 13 17 42 5 7 12 14 41 1 6 8 31 32 33 4 9 15 43 5 10 41 2 11 1 6 8 12 42 6 13 3 5 7 14 24 41 4 12 15 40 43 4 5 16 10 16 17 1 6 8 18 21 42 1 6 8 19 22 42 1 6 8 20 23 42 21 22 23 2 3 9 24 25 31 26 32 27 33 21 28 22 29 23 30 18 21 25 31 19 22 26 32 20 23 27 33 11 31 32 33 34 35 36 32 35 38 33 36 39 31 34 37 7 38 8 39 28 37 40 43 7 29 38 41 8 30 39 42 37 43 31 32 33 34 35 36 31 32 33 31 32 33 34 35 36 32 35 33 36 31 34 35 36 34 35 36 34 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([18 19 20 21 21 21 22 22 22 23 23 23 24 44 44 44 44 44 45 45 45 45 46 46 46 46 46 46 47 47 47 48 48 48 48 49 49 49 49 50 50 50 50 50 51 51 51 51 51 51 52 52 52 52 53 53 53 54 54 55 55 55 55 55 56 56 57 57 57 57 57 57 58 58 58 58 58 59 59 59 60 60 60 61 61 61 61 61 61 62 62 62 62 62 62 63 63 63 63 63 63 64 65 66 67 67 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 74 74 75 75 75 75 76 76 76 76 77 77 77 77 77 77 77 78 78 78 79 79 79 80 80 80 81 81 82 82 83 83 83 83 84 84 84 84 85 85 85 85 86 86 111 112 113 114 115 116 117 118 119 120 120 120 120 120 120 121 121 122 122 123 123 124 125 126 127 128 129 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 7 10 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 19 23 29 32 36 40 45 51 55 58 60 65 67 73 78 81 84 90 96 102 103 104 105 109 111 113 115 117 119 121 125 129 133 140 143 146 149 151 153 157 161 165 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 168 169 170 171 172 173 174 175 176 182 184 186 188 189 190 191 192 193 194 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([]);
M_.block_structure.block(4).g1_sparse_colval = int32([]);
M_.block_structure.block(4).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 72 20 24 25 26 27 28 29 21 22 46 48 43 44 45 6 47 52 19 3 15 58 18 54 59 57 16 56 55 34 4 53 33 17 7 8 9 11 12 13 2 49 50 51 40 41 42 64 65 66 60 62 63 61 31 32 36 37 38 30 71 86 70 69 1 39 85 99 68 82 81 78 98 84 100 103 104 14 97 77 76 96 95 73 23 5 35 10 88 67 87 83 80 79 75 74 94 101 92 102 105 93 91 90 89];
M_.block_structure.equation_reordered = [ 62 63 66 67 68 69 70 71 64 65 12 14 24 25 26 51 13 9 10 11 42 43 44 46 47 5 49 4 52 3 8 7 2 1 18 19 20 39 40 41 6 15 16 17 21 22 23 27 28 29 30 31 32 33 34 35 36 37 38 45 59 85 58 57 55 53 84 102 60 81 80 77 101 83 103 104 105 48 100 76 75 99 98 72 61 56 54 50 88 87 86 82 79 78 74 73 97 96 95 94 93 92 91 90 89];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 10 2;
 18 7;
 19 8;
 20 9;
 36 11;
 37 12;
 38 13;
 39 11;
 40 12;
 41 13;
 45 11;
 46 12;
 47 13;
 56 11;
 56 12;
 56 13;
 57 11;
 58 12;
 59 13;
 62 72;
 63 20;
 64 22;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 71 29;
 89 74;
 90 75;
 91 73;
 92 80;
 93 79;
 94 87;
 95 67;
 96 88;
 97 83;
 98 76;
 99 77;
 100 78;
 101 85;
 102 86;
 103 84;
 104 81;
 105 82;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 24;
 2 28;
 2 33;
 3 18;
 3 19;
 3 24;
 3 29;
 3 34;
 4 56;
 4 60;
 5 2;
 5 3;
 5 57;
 6 2;
 6 4;
 6 58;
 7 3;
 7 25;
 7 52;
 7 53;
 7 57;
 8 4;
 8 25;
 8 52;
 8 54;
 8 58;
 9 6;
 9 25;
 9 26;
 9 52;
 9 55;
 9 59;
 10 2;
 10 19;
 10 24;
 10 25;
 10 52;
 10 56;
 11 2;
 11 3;
 11 4;
 12 46;
 12 64;
 13 47;
 13 65;
 14 48;
 14 66;
 15 49;
 15 64;
 16 50;
 16 65;
 17 51;
 17 66;
 18 7;
 18 64;
 18 72;
 19 8;
 19 65;
 19 72;
 20 9;
 20 66;
 20 72;
 21 36;
 21 40;
 22 37;
 22 41;
 23 38;
 23 42;
 24 36;
 24 43;
 25 37;
 25 44;
 26 38;
 26 45;
 27 27;
 27 46;
 27 49;
 27 59;
 27 60;
 27 61;
 27 64;
 28 27;
 28 47;
 28 50;
 28 59;
 28 60;
 28 62;
 28 65;
 29 27;
 29 48;
 29 51;
 29 59;
 29 60;
 29 63;
 29 66;
 30 27;
 30 60;
 30 61;
 31 27;
 31 60;
 31 62;
 32 27;
 32 60;
 32 63;
 33 30;
 33 43;
 33 61;
 34 31;
 34 44;
 34 62;
 35 32;
 35 45;
 35 63;
 36 3;
 36 15;
 36 20;
 36 36;
 36 53;
 36 72;
 37 4;
 37 16;
 37 20;
 37 37;
 37 54;
 37 72;
 38 6;
 38 18;
 38 22;
 38 38;
 38 55;
 38 72;
 39 7;
 39 11;
 39 40;
 39 46;
 39 72;
 40 8;
 40 12;
 40 41;
 40 47;
 40 72;
 41 9;
 41 13;
 41 42;
 41 48;
 41 72;
 42 3;
 42 15;
 42 33;
 42 53;
 42 57;
 43 4;
 43 16;
 43 33;
 43 54;
 43 58;
 44 6;
 44 18;
 44 34;
 44 55;
 44 59;
 45 3;
 45 30;
 45 36;
 45 53;
 45 57;
 45 72;
 46 4;
 46 31;
 46 37;
 46 54;
 46 58;
 46 72;
 47 6;
 47 32;
 47 38;
 47 55;
 47 59;
 47 72;
 48 14;
 48 15;
 48 16;
 48 18;
 49 15;
 49 16;
 49 17;
 50 10;
 50 11;
 50 12;
 50 13;
 51 6;
 51 7;
 51 8;
 51 9;
 52 26;
 52 52;
 52 53;
 52 54;
 52 55;
 53 1;
 53 3;
 53 4;
 53 6;
 53 36;
 53 37;
 53 38;
 53 39;
 54 14;
 54 17;
 54 18;
 54 33;
 54 34;
 54 35;
 55 1;
 55 2;
 55 6;
 56 1;
 56 3;
 56 4;
 56 5;
 56 6;
 56 15;
 56 16;
 56 18;
 56 72;
 57 15;
 57 20;
 57 36;
 57 53;
 57 69;
 57 72;
 58 16;
 58 20;
 58 37;
 58 54;
 58 70;
 58 72;
 59 18;
 59 22;
 59 38;
 59 55;
 59 71;
 59 72;
 60 1;
 60 3;
 60 4;
 60 6;
 60 68;
 60 69;
 60 70;
 60 71;
 61 1;
 61 2;
 61 6;
 61 20;
 61 22;
 61 23;
 62 72;
 63 20;
 64 21;
 65 20;
 65 21;
 65 22;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 71 29;
 72 1;
 72 73;
 73 2;
 73 74;
 74 6;
 74 75;
 75 14;
 75 76;
 76 17;
 76 77;
 77 18;
 77 78;
 78 10;
 78 79;
 79 73;
 79 76;
 79 80;
 80 52;
 80 81;
 81 39;
 81 82;
 82 59;
 82 83;
 83 68;
 83 84;
 84 69;
 84 85;
 85 71;
 85 86;
 86 35;
 86 87;
 87 5;
 87 67;
 88 23;
 88 88;
 89 72;
 89 74;
 89 89;
 90 72;
 90 75;
 90 90;
 91 72;
 91 73;
 91 91;
 92 72;
 92 80;
 92 93;
 93 72;
 93 79;
 93 105;
 94 72;
 94 87;
 94 102;
 95 67;
 95 72;
 95 92;
 96 72;
 96 88;
 96 101;
 97 83;
 97 94;
 98 76;
 98 95;
 99 77;
 99 96;
 100 78;
 100 97;
 101 85;
 101 98;
 102 86;
 102 99;
 103 84;
 103 100;
 104 81;
 104 103;
 105 82;
 105 104;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 27 49;
 27 60;
 27 61;
 27 64;
 27 72;
 28 50;
 28 60;
 28 62;
 28 65;
 28 72;
 29 51;
 29 60;
 29 63;
 29 66;
 29 72;
 30 30;
 30 36;
 30 40;
 30 60;
 30 61;
 30 72;
 31 31;
 31 37;
 31 41;
 31 60;
 31 62;
 31 72;
 32 32;
 32 38;
 32 42;
 32 60;
 32 63;
 32 72;
];
M_.block_structure.dyn_tmp_nbr = 73;
M_.state_var = [72 20 24 25 26 27 28 29 22 7 8 9 11 12 13 2 86 85 82 81 78 84 77 76 73 88 67 87 83 80 79 75 74 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(105, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(9, 1);
M_.params = NaN(30, 1);
M_.endo_trends = struct('deflator', cell(105, 1), 'log_deflator', cell(105, 1), 'growth_factor', cell(105, 1), 'log_growth_factor', cell(105, 1));
M_.NNZDerivatives = [438; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([10 18 19 20 36 39 45 56 57 37 40 46 56 58 38 41 47 56 59 63 64 66 67 68 69 70 71 95 62 91 89 90 98 99 100 93 92 104 105 97 103 101 102 94 96 53 55 56 60 61 72 5 6 10 11 55 61 73 5 7 11 36 42 45 53 56 60 6 8 11 37 43 46 53 56 60 56 87 9 38 44 47 51 53 55 56 60 61 74 18 39 51 19 40 51 20 41 51 50 78 39 50 40 50 41 50 48 54 75 36 42 48 49 56 57 37 43 48 49 56 58 1 2 49 54 76 1 3 38 44 48 54 56 59 77 1 2 3 10 36 37 57 58 61 63 65 64 65 38 59 61 65 61 88 2 3 10 66 7 8 9 10 67 9 52 68 27 28 29 30 31 32 69 2 70 3 71 33 45 34 46 35 47 2 42 43 54 3 44 54 54 86 21 24 36 45 53 57 22 25 37 46 53 58 23 26 38 47 53 59 53 81 21 39 22 40 23 41 24 33 25 34 26 35 12 27 39 13 28 40 14 29 41 15 27 16 28 17 29 7 8 9 10 52 80 7 36 42 45 52 57 8 37 43 46 52 58 9 38 44 47 52 59 4 10 5 7 42 45 6 8 43 46 9 27 28 29 44 47 82 4 27 28 29 30 31 32 27 30 33 28 31 34 29 32 35 12 15 18 27 13 16 19 28 14 17 20 29 87 95 60 83 57 60 84 58 60 59 60 85 18 19 20 36 37 38 39 40 41 45 46 47 56 57 58 59 62 89 90 91 92 93 94 95 96 72 79 91 73 89 74 90 75 79 98 76 99 77 100 78 93 79 92 80 104 81 105 82 97 83 103 84 101 85 102 86 94 88 96 89 90 91 95 92 97 98 99 100 101 102 103 96 94 104 105 93 30 31 32 30 31 32 30 31 32 27 28 29 27 28 29 30 31 32 27 30 28 31 29 32 27 28 29 27 28 29 30 31 32 62 63 64 66 67 68 69 70 71 ]);
M_.dynamic_g1_sparse_colval = int32([2 7 8 9 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 20 22 24 25 26 27 28 29 67 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 106 106 106 106 106 106 107 107 107 107 107 107 107 108 108 108 108 108 108 108 108 108 109 109 109 109 109 109 109 109 109 110 110 111 111 111 111 111 111 111 111 111 111 111 112 112 112 113 113 113 114 114 114 115 115 116 116 117 117 118 118 119 119 119 120 120 120 120 120 120 121 121 121 121 121 121 122 122 122 122 122 123 123 123 123 123 123 123 123 123 124 124 124 124 125 125 125 125 125 125 125 126 126 127 127 127 127 128 128 129 129 129 129 130 130 130 130 130 131 131 131 132 132 132 132 132 132 132 133 133 134 134 135 135 136 136 137 137 138 138 138 138 139 139 139 140 140 141 141 141 141 141 141 142 142 142 142 142 142 143 143 143 143 143 143 144 144 145 145 146 146 147 147 148 148 149 149 150 150 151 151 151 152 152 152 153 153 153 154 154 155 155 156 156 157 157 157 157 157 157 158 158 158 158 158 158 159 159 159 159 159 159 160 160 160 160 160 160 161 161 162 162 162 162 163 163 163 163 164 164 164 164 164 164 164 165 165 165 165 165 165 165 166 166 166 167 167 167 168 168 168 169 169 169 169 170 170 170 170 171 171 171 171 172 172 173 173 174 174 174 175 175 176 176 176 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 178 178 178 179 179 180 180 181 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 189 190 190 191 191 192 192 193 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 240 241 242 246 247 248 250 251 252 259 260 261 270 270 270 270 270 270 271 271 272 272 273 273 274 275 276 282 282 282 282 282 282 316 317 318 319 320 321 322 323 324 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 2 2 2 2 2 3 4 5 5 10 15 20 20 20 20 20 20 20 21 21 22 22 23 24 25 26 27 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 46 52 59 68 77 79 90 93 96 99 101 103 105 107 110 116 122 127 136 140 147 149 153 155 159 164 167 174 176 178 180 182 184 188 191 193 199 205 211 213 215 217 219 221 223 225 228 231 234 236 238 240 246 252 258 264 266 270 274 281 288 291 294 297 301 305 309 311 313 316 318 321 346 349 351 353 356 358 360 362 364 366 368 370 372 374 376 378 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 398 399 400 400 400 400 401 402 403 403 404 405 406 406 406 406 406 406 406 407 408 409 409 409 409 409 409 409 409 409 415 417 419 421 422 423 424 424 424 424 424 424 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 431 432 433 434 435 436 437 438 439 ]);
M_.lhs = {
'N_comp'; 
'(1-I_Y)^(-theta)*(N_C/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'(1-(1-I_Y))^(-theta)*(N_I/N_comp)^theta*N_comp^(1/nu)*exp(theta_N)*(1-phi)*labor_share/N_ss/(N_ss^(1/nu)*mu_ss)'; 
'lam'; 
'Y_mc'; 
'Y_sc'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)*exp(theta_I)'; 
'Gam'; 
'C'; 
'Smc'; 
'Ssc'; 
'Si'; 
'Smc_pr'; 
'Ssc_pr'; 
'Si_pr'; 
'x_mc'; 
'x_sc'; 
'x_I'; 
'delta_mc'; 
'delta_sc'; 
'delta_I'; 
'delta_mc_pr'; 
'delta_sc_pr'; 
'delta_I_pr'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'p_I/(1-phi)'; 
'Q_mc'; 
'Q_sc'; 
'Q_I'; 
'delta_mc_pr*Q_mc'; 
'delta_sc_pr*Q_sc'; 
'delta_I_pr*Q_I'; 
'Y_mc'; 
'Y_sc'; 
'I'; 
'exp(g)*K_mc'; 
'exp(g)*K_sc'; 
'exp(g)*K_I'; 
'(1-phi)*W_C/p_mc'; 
'(1-phi)*W_C/p_sc'; 
'(1-phi)*W_I/p_I'; 
'(1-phi)*R_mc/p_mc'; 
'(1-phi)*R_sc/p_sc'; 
'(1-phi)*R_I/p_I'; 
'N'; 
'N_C'; 
'K'; 
'I'; 
'D'; 
'h'; 
'W'; 
'Y'; 
'SR'; 
'util_ND'; 
'util_sc'; 
'util_D'; 
'util'; 
'tech'; 
'g'; 
'Z_C'; 
'u_ZI'; 
'Z_I'; 
'theta_N'; 
'theta_D'; 
'theta_I'; 
'theta_b'; 
'mu_C'; 
'mu_I'; 
'log_Y'; 
'log_C'; 
'log_I'; 
'log_N'; 
'log_NC'; 
'log_NI'; 
'log_K'; 
'log_Y_N'; 
'log_D'; 
'log_h'; 
'log_p_I'; 
'log_util'; 
'log_util_ND'; 
'log_util_D'; 
'log_W'; 
'log_SR'; 
'log_tech'; 
'C_obs'; 
'I_obs'; 
'Y_obs'; 
'Y_N_obs'; 
'K_obs'; 
'w_obs'; 
'SR_obs'; 
'tech_obs'; 
'p_I_obs'; 
'N_obs'; 
'NC_obs'; 
'NI_obs'; 
'util_ND_obs'; 
'util_D_obs'; 
'util_obs'; 
'D_obs'; 
'h_obs'; 
};
M_.static_tmp_nbr = [85; 21; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 62];
M_.block_structure_stat.block(1).variable = [ 72];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 63];
M_.block_structure_stat.block(2).variable = [ 20];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 66];
M_.block_structure_stat.block(3).variable = [ 24];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 67];
M_.block_structure_stat.block(4).variable = [ 25];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 68];
M_.block_structure_stat.block(5).variable = [ 26];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 69];
M_.block_structure_stat.block(6).variable = [ 27];
M_.block_structure_stat.block(7).Simulation_Type = 3;
M_.block_structure_stat.block(7).endo_nbr = 1;
M_.block_structure_stat.block(7).mfs = 1;
M_.block_structure_stat.block(7).equation = [ 70];
M_.block_structure_stat.block(7).variable = [ 28];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 71];
M_.block_structure_stat.block(8).variable = [ 29];
M_.block_structure_stat.block(9).Simulation_Type = 1;
M_.block_structure_stat.block(9).endo_nbr = 26;
M_.block_structure_stat.block(9).mfs = 26;
M_.block_structure_stat.block(9).equation = [ 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 18 19 20 12 13 14 15 16 17];
M_.block_structure_stat.block(9).variable = [ 89 90 91 93 105 102 92 101 94 95 96 97 98 99 100 103 104 64 65 66 46 47 48 49 50 51];
M_.block_structure_stat.block(10).Simulation_Type = 6;
M_.block_structure_stat.block(10).endo_nbr = 2;
M_.block_structure_stat.block(10).mfs = 2;
M_.block_structure_stat.block(10).equation = [ 64 65];
M_.block_structure_stat.block(10).variable = [ 21 22];
M_.block_structure_stat.block(11).Simulation_Type = 6;
M_.block_structure_stat.block(11).endo_nbr = 39;
M_.block_structure_stat.block(11).mfs = 39;
M_.block_structure_stat.block(11).equation = [ 35 36 37 38 39 40 41 42 43 44 45 46 47 34 49 9 51 52 26 11 27 29 28 21 22 30 31 1 2 3 25 5 6 7 8 32 24 23 33];
M_.block_structure_stat.block(11).variable = [ 45 15 16 55 7 12 9 57 58 34 11 37 13 62 17 6 8 53 38 2 61 63 59 36 41 40 31 18 33 19 44 3 4 52 54 32 43 42 30];
M_.block_structure_stat.block(12).Simulation_Type = 1;
M_.block_structure_stat.block(12).endo_nbr = 30;
M_.block_structure_stat.block(12).mfs = 30;
M_.block_structure_stat.block(12).equation = [ 59 58 57 55 10 48 75 72 61 60 56 54 53 50 88 87 86 85 84 83 82 81 80 79 78 77 76 74 73 4];
M_.block_structure_stat.block(12).variable = [ 71 70 69 1 56 14 76 73 23 68 5 35 39 10 88 67 87 86 85 84 83 82 81 80 79 78 77 75 74 60];
M_.block_structure_stat.variable_reordered = [ 72 20 24 25 26 27 28 29 89 90 91 93 105 102 92 101 94 95 96 97 98 99 100 103 104 64 65 66 46 47 48 49 50 51 21 22 45 15 16 55 7 12 9 57 58 34 11 37 13 62 17 6 8 53 38 2 61 63 59 36 41 40 31 18 33 19 44 3 4 52 54 32 43 42 30 71 70 69 1 56 14 76 73 23 68 5 35 39 10 88 67 87 86 85 84 83 82 81 80 79 78 77 75 74 60];
M_.block_structure_stat.equation_reordered = [ 62 63 66 67 68 69 70 71 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 18 19 20 12 13 14 15 16 17 64 65 35 36 37 38 39 40 41 42 43 44 45 46 47 34 49 9 51 52 26 11 27 29 28 21 22 30 31 1 2 3 25 5 6 7 8 32 24 23 33 59 58 57 55 10 48 75 72 61 60 56 54 53 50 88 87 86 85 84 83 82 81 80 79 78 77 76 74 73 4];
M_.block_structure_stat.incidence.sparse_IM = [
 1 17;
 1 18;
 1 19;
 2 17;
 2 19;
 2 24;
 2 28;
 2 33;
 3 18;
 3 19;
 3 24;
 3 29;
 3 34;
 4 56;
 4 60;
 5 2;
 5 3;
 5 57;
 6 2;
 6 4;
 6 58;
 7 3;
 7 25;
 7 52;
 7 53;
 7 57;
 8 4;
 8 25;
 8 52;
 8 54;
 8 58;
 9 6;
 9 25;
 9 26;
 9 52;
 9 55;
 9 59;
 10 2;
 10 19;
 10 24;
 10 25;
 10 52;
 10 56;
 11 2;
 11 3;
 11 4;
 12 46;
 12 64;
 13 47;
 13 65;
 14 48;
 14 66;
 15 49;
 15 64;
 16 50;
 16 65;
 17 51;
 17 66;
 18 64;
 18 72;
 19 65;
 19 72;
 20 66;
 20 72;
 21 36;
 21 40;
 22 37;
 22 41;
 23 38;
 23 42;
 24 36;
 24 43;
 25 37;
 25 44;
 26 38;
 26 45;
 27 27;
 27 46;
 27 49;
 27 59;
 27 61;
 27 64;
 27 72;
 28 27;
 28 47;
 28 50;
 28 59;
 28 62;
 28 65;
 28 72;
 29 27;
 29 48;
 29 51;
 29 59;
 29 63;
 29 66;
 29 72;
 30 27;
 30 30;
 30 36;
 30 40;
 30 61;
 30 72;
 31 27;
 31 31;
 31 37;
 31 41;
 31 62;
 31 72;
 32 27;
 32 32;
 32 38;
 32 42;
 32 63;
 32 72;
 33 30;
 33 43;
 33 61;
 34 31;
 34 44;
 34 62;
 35 32;
 35 45;
 35 63;
 36 3;
 36 11;
 36 15;
 36 20;
 36 36;
 36 53;
 36 72;
 37 4;
 37 12;
 37 16;
 37 20;
 37 37;
 37 54;
 37 72;
 38 6;
 38 13;
 38 18;
 38 22;
 38 38;
 38 55;
 38 72;
 39 7;
 39 11;
 39 40;
 39 46;
 39 72;
 40 8;
 40 12;
 40 41;
 40 47;
 40 72;
 41 9;
 41 13;
 41 42;
 41 48;
 41 72;
 42 3;
 42 15;
 42 33;
 42 53;
 42 57;
 43 4;
 43 16;
 43 33;
 43 54;
 43 58;
 44 6;
 44 18;
 44 34;
 44 55;
 44 59;
 45 3;
 45 11;
 45 30;
 45 36;
 45 53;
 45 57;
 45 72;
 46 4;
 46 12;
 46 31;
 46 37;
 46 54;
 46 58;
 46 72;
 47 6;
 47 13;
 47 32;
 47 38;
 47 55;
 47 59;
 47 72;
 48 14;
 48 15;
 48 16;
 48 18;
 49 15;
 49 16;
 49 17;
 50 10;
 50 11;
 50 12;
 50 13;
 51 6;
 51 7;
 51 8;
 51 9;
 52 26;
 52 52;
 52 53;
 52 54;
 52 55;
 53 1;
 53 3;
 53 4;
 53 6;
 53 36;
 53 37;
 53 38;
 53 39;
 54 14;
 54 17;
 54 18;
 54 33;
 54 34;
 54 35;
 55 1;
 55 2;
 55 6;
 56 1;
 56 3;
 56 4;
 56 5;
 56 6;
 56 11;
 56 12;
 56 13;
 56 15;
 56 16;
 56 18;
 56 72;
 57 11;
 57 15;
 57 20;
 57 36;
 57 53;
 57 69;
 57 72;
 58 12;
 58 16;
 58 20;
 58 37;
 58 54;
 58 70;
 58 72;
 59 13;
 59 18;
 59 22;
 59 38;
 59 55;
 59 71;
 59 72;
 60 1;
 60 3;
 60 4;
 60 6;
 60 68;
 60 69;
 60 70;
 60 71;
 61 1;
 61 2;
 61 6;
 61 20;
 61 22;
 61 23;
 62 72;
 63 20;
 64 21;
 64 22;
 65 20;
 65 21;
 65 22;
 66 24;
 67 25;
 68 26;
 69 27;
 70 28;
 71 29;
 72 73;
 73 74;
 74 75;
 75 76;
 76 77;
 77 78;
 78 79;
 79 73;
 79 76;
 79 80;
 80 81;
 81 82;
 82 83;
 83 84;
 84 85;
 85 86;
 86 87;
 87 67;
 88 88;
 89 72;
 89 89;
 90 72;
 90 90;
 91 72;
 91 91;
 92 72;
 92 93;
 93 72;
 93 105;
 94 72;
 94 102;
 95 72;
 95 92;
 96 72;
 96 101;
 97 94;
 98 95;
 99 96;
 100 97;
 101 98;
 102 99;
 103 100;
 104 103;
 105 104;
];
M_.block_structure_stat.tmp_nbr = 63;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 2 1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 1 2 2 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 3 5 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([1 19 2 8 15 3 9 15 4 10 13 16 18 5 17 3 6 12 7 17 8 11 32 34 9 12 33 35 10 30 2 5 11 3 12 25 27 31 4 7 13 14 23 27 15 28 29 4 10 13 16 17 6 17 2 8 11 18 34 4 13 19 36 38 20 32 33 21 26 39 1 22 36 10 13 16 21 22 23 2 11 24 26 37 6 25 27 5 24 26 12 14 27 4 10 28 30 8 9 29 28 29 30 14 31 2 8 11 20 32 34 3 9 12 20 33 35 16 18 34 35 3 9 12 18 35 1 13 36 37 39 7 36 38 11 26 39 ]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([1 1 2 2 2 3 3 3 4 4 4 4 4 5 5 6 6 6 7 7 8 8 8 8 9 9 9 9 10 10 11 11 11 12 12 12 12 12 13 13 13 14 14 14 15 15 15 16 16 16 16 16 17 17 18 18 18 18 18 19 19 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 23 23 23 24 24 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 28 29 29 29 30 30 30 31 31 32 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 35 35 35 35 35 36 36 36 37 37 38 38 38 39 39 39 ]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 3 6 9 14 16 19 21 25 29 31 34 39 42 45 48 53 55 60 65 68 71 74 80 85 88 91 94 98 101 104 106 112 118 122 127 130 132 135 138 ]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([53 55 56 60 61 5 6 10 11 55 61 5 7 11 36 42 45 53 56 60 6 8 11 37 43 46 53 56 60 56 9 38 44 47 51 53 55 56 60 61 39 51 40 51 41 51 50 36 39 45 50 56 57 37 40 46 50 56 58 38 41 47 50 56 59 48 54 36 42 48 49 56 57 37 43 48 49 56 58 1 2 49 54 1 3 38 44 48 54 56 59 1 2 3 10 36 37 57 58 61 63 65 64 65 38 59 61 64 65 61 2 3 10 66 7 8 9 10 67 9 52 68 27 28 29 30 31 32 69 2 70 3 71 30 33 45 31 34 46 32 35 47 2 42 43 54 3 44 54 54 21 24 30 36 45 53 57 22 25 31 37 46 53 58 23 26 32 38 47 53 59 53 21 30 39 22 31 40 23 32 41 24 33 25 34 26 35 12 27 39 13 28 40 14 29 41 15 27 16 28 17 29 7 8 9 10 52 7 36 42 45 52 57 8 37 43 46 52 58 9 38 44 47 52 59 4 10 5 7 42 45 6 8 43 46 9 27 28 29 44 47 4 27 30 33 28 31 34 29 32 35 12 15 18 27 13 16 19 28 14 17 20 29 87 60 57 60 58 60 59 60 18 19 20 27 28 29 30 31 32 36 37 38 39 40 41 45 46 47 56 57 58 59 62 89 90 91 92 93 94 95 96 72 79 73 74 75 79 76 77 78 79 80 81 82 83 84 85 86 88 89 90 91 95 92 97 98 99 100 101 102 103 96 94 104 105 93 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 6 6 6 6 6 6 6 6 6 6 7 7 8 8 9 9 10 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 14 14 15 15 15 15 15 15 16 16 16 16 16 16 17 17 17 17 18 18 18 18 18 18 18 18 19 19 19 19 20 20 20 20 20 20 20 21 21 22 22 22 22 22 23 24 24 24 24 25 25 25 25 25 26 26 26 27 27 27 27 27 27 27 28 28 29 29 30 30 30 31 31 31 32 32 32 33 33 33 33 34 34 34 35 36 36 36 36 36 36 36 37 37 37 37 37 37 37 38 38 38 38 38 38 38 39 40 40 40 41 41 41 42 42 42 43 43 44 44 45 45 46 46 46 47 47 47 48 48 48 49 49 50 50 51 51 52 52 52 52 52 53 53 53 53 53 53 54 54 54 54 54 54 55 55 55 55 55 55 56 56 57 57 57 57 58 58 58 58 59 59 59 59 59 59 60 61 61 61 62 62 62 63 63 63 64 64 64 64 65 65 65 65 66 66 66 66 67 68 69 69 70 70 71 71 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 73 73 74 75 76 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 ]);
M_.static_g1_sparse_colptr = int32([1 6 12 21 30 31 41 43 45 47 48 54 60 66 68 74 80 84 92 96 103 105 110 111 115 120 123 130 132 134 137 140 143 147 150 151 158 165 172 173 176 179 182 184 186 188 191 194 197 199 201 203 208 214 220 226 228 232 236 242 243 246 249 252 256 260 264 265 266 268 270 272 303 305 306 307 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 ]);
M_.params(1) = 2.0;
sigma = M_.params(1);
M_.params(2) = 0.99;
beta = M_.params(2);
M_.params(3) = 0.0045;
g_bar = M_.params(3);
M_.params(4) = 0.72;
nu = M_.params(4);
M_.params(15) = 0.0;
ha = M_.params(15);
M_.params(7) = 1.15;
mu_ss = M_.params(7);
M_.params(5) = 0.85;
xi = M_.params(5);
M_.params(6) = 0.65;
omega_sc = M_.params(6);
M_.params(8) = 0.32;
sigma_ac = M_.params(8);
M_.params(9) = 0.32;
sigma_ai = M_.params(9);
M_.params(10) = 1.5;
Psi_K = M_.params(10);
M_.params(11) = 0.20;
I_Y = M_.params(11);
M_.params(12) = 11;
K_Y = M_.params(12);
M_.params(13) = 0.67;
labor_share = M_.params(13);
M_.params(14) = 0.2;
nu_R = M_.params(14);
M_.params(17) = 0.20;
eta = M_.params(17);
M_.params(16) = 0.32;
phi = M_.params(16);
M_.params(18) = 0.81;
Psi = M_.params(18);
M_.params(19) = 0.5;
theta = M_.params(19);
M_.params(29) = 1.0;
p_I_ss = M_.params(29);
M_.params(30) = 0.30;
N_ss = M_.params(30);
M_.params(20) = 0.1;
rho_g = M_.params(20);
M_.params(21) = 0.9;
rho_Z = M_.params(21);
M_.params(22) = 0.9;
rho_ZI = M_.params(22);
M_.params(23) = 0.9;
rho_N = M_.params(23);
M_.params(24) = 0.9;
rho_D = M_.params(24);
M_.params(25) = 0.9;
rho_DI = M_.params(25);
M_.params(26) = 0.9;
rho_b = M_.params(26);
M_.params(27) = 0.9;
rho_muC = M_.params(27);
M_.params(28) = 0.9;
rho_muI = M_.params(28);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = 5.184e-05;
M_.Sigma_e(2, 2) = 5.184e-05;
M_.Sigma_e(3, 3) = 5.184e-05;
M_.Sigma_e(4, 4) = 5.184e-05;
M_.Sigma_e(5, 5) = 5.184e-05;
M_.Sigma_e(6, 6) = 5.184e-05;
M_.Sigma_e(7, 7) = 5.184e-05;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.param_vals(:,1)==1))
    error('Parameter sigma has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 1, 1.5, 1.0, 4.0, 1, 1.5, 0.25, 1.0, 4.0, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter ha has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 0.5, 0.0, 0.95, 1, 0.5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==4))
    error('Parameter nu has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 4, 0.72, 0.05, 2.0, 2, 0.72, 0.25, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==16))
    error('Parameter phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 16, 0.8, 0.00, 0.999, 1, 0.32, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==17))
    error('Parameter eta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 17, 0.567, 0.00, 10.0, 2, 0.2, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==5))
    error('Parameter xi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 5, 0.85, 0.5, 2.0, 2, 0.85, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter nu_R has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 0.20, 0.01, 0.5, 1, 0.2, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter sigma_ac has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==9))
    error('Parameter sigma_ai has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 9, 0.32, 0.0, 10, 4, 1, 1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==10))
    error('Parameter Psi_K has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 10, 1.5, 0.0, 50, 2, 4, 1.0, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==19))
    error('Parameter theta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 19, 0.5, .00, 10, 2, 1, 0.5, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, 0.1, 0.0001, 0.9, 1, 0.1, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==21))
    error('Parameter rho_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 21, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==22))
    error('Parameter rho_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 22, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==23))
    error('Parameter rho_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 23, 0.6, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==24))
    error('Parameter rho_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 24, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==25))
    error('Parameter rho_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 25, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==26))
    error('Parameter rho_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 26, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==27))
    error('Parameter rho_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 27, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==28))
    error('Parameter rho_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 28, 0.95, 0.01, 0.99999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for e_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.01, 0.0000001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for e_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.01, 0.00001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for e_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for e_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for e_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.01, 0.00001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for e_DI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for e_b has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, 0.01, 0.0001, 0.4, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==8))
    error('The standard deviation for e_muC has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 8, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==9))
    error('The standard deviation for e_muI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 9, 0.01, 0.0001, 0.2, 2, 0.01, 0.01, NaN, NaN, NaN ];
options_.TeX=1;
options_.MCMC_jumping_covariance = 'prior_variance';
options_.TeX = true;
options_.datafile = 'observables_sectoral';
options_.lik_init = 2;
options_.load_mh_file = true;
options_.mh_drop = 0.3;
options_.mh_init_scale = 0.0001;
options_.mh_jscale = 0.006;
options_.mh_nblck = 2;
options_.mh_replic = 100000;
options_.mode_check.status = true;
options_.mode_compute = 0;
options_.mode_file = 'BRS_sectoral_mh_mode';
options_.optim_opt = '''MaxIter'',200';
options_.presample = 0;
options_.prior_trunc = 0;
options_.order = 1;
var_list_ = {'Y_obs';'Y_N_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'SR_obs';'util_obs';'D_obs';'h_obs'};
oo_recursive_=dynare_estimation(var_list_);
write_latex_parameter_table;
write_latex_definitions;
write_latex_prior_table;
collect_latex_files;
options_.irf = 20;
options_.nofunctions = true;
options_.order = 1;
options_.periods = 0;
var_list_ = {'Y_obs';'Y_N_obs';'SR_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'util_ND_obs';'util_D_obs';'util_obs';'D_obs';'h_obs';'tech_obs'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'BRS_sectoral_results.mat'], 'options_mom_', '-append');
end
disp('Note: 4 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
