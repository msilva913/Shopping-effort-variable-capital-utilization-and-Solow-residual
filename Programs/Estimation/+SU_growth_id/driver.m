%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'SU_growth_id';
M_.dynare_version = '6.3';
oo_.dynare_version = '6.3';
options_.dynare_version = '6.3';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(5,1);
M_.exo_names_tex = cell(5,1);
M_.exo_names_long = cell(5,1);
M_.exo_names(1) = {'e_g'};
M_.exo_names_tex(1) = {'{e_g}'};
M_.exo_names_long(1) = {'TFP shock'};
M_.exo_names(2) = {'e_Z'};
M_.exo_names_tex(2) = {'{e_Z}'};
M_.exo_names_long(2) = {'TFP shock'};
M_.exo_names(3) = {'e_ZI'};
M_.exo_names_tex(3) = {'{e_{ZI}}'};
M_.exo_names_long(3) = {'Investment-specific tech shock'};
M_.exo_names(4) = {'e_N'};
M_.exo_names_tex(4) = {'{e_N}'};
M_.exo_names_long(4) = {'Labor supply shock'};
M_.exo_names(5) = {'e_D'};
M_.exo_names_tex(5) = {'{e_D}'};
M_.exo_names_long(5) = {'Shopping disutility shock'};
M_.endo_names = cell(49,1);
M_.endo_names_tex = cell(49,1);
M_.endo_names_long = cell(49,1);
M_.endo_names(1) = {'Y'};
M_.endo_names_tex(1) = {'{Y}'};
M_.endo_names_long(1) = {'output'};
M_.endo_names(2) = {'C'};
M_.endo_names_tex(2) = {'{C}'};
M_.endo_names_long(2) = {'consumption'};
M_.endo_names(3) = {'I'};
M_.endo_names_tex(3) = {'{I}'};
M_.endo_names_long(3) = {'investment'};
M_.endo_names(4) = {'SR'};
M_.endo_names_tex(4) = {'{SR}'};
M_.endo_names_long(4) = {'aggregate share-weighted Solow residual'};
M_.endo_names(5) = {'K'};
M_.endo_names_tex(5) = {'{K}'};
M_.endo_names_long(5) = {'Capital'};
M_.endo_names(6) = {'K_C'};
M_.endo_names_tex(6) = {'{K_C}'};
M_.endo_names_long(6) = {'Capital:C'};
M_.endo_names(7) = {'K_I'};
M_.endo_names_tex(7) = {'{K_I}'};
M_.endo_names_long(7) = {'Capital:I'};
M_.endo_names(8) = {'N'};
M_.endo_names_tex(8) = {'{N}'};
M_.endo_names_long(8) = {'Hours'};
M_.endo_names(9) = {'N_C'};
M_.endo_names_tex(9) = {'{N_C}'};
M_.endo_names_long(9) = {'Hours:C'};
M_.endo_names(10) = {'N_I'};
M_.endo_names_tex(10) = {'{N_I}'};
M_.endo_names_long(10) = {'Hours:I'};
M_.endo_names(11) = {'Z_C'};
M_.endo_names_tex(11) = {'{Z_C}'};
M_.endo_names_long(11) = {'Tech:C'};
M_.endo_names(12) = {'u_ZI'};
M_.endo_names_tex(12) = {'u\_ZI'};
M_.endo_names_long(12) = {'u_ZI'};
M_.endo_names(13) = {'Z_I'};
M_.endo_names_tex(13) = {'{Z_I}'};
M_.endo_names_long(13) = {'Tech:I'};
M_.endo_names(14) = {'theta_N'};
M_.endo_names_tex(14) = {'{\theta_N}'};
M_.endo_names_long(14) = {'Labor disutility'};
M_.endo_names(15) = {'theta_D'};
M_.endo_names_tex(15) = {'{\theta_D}'};
M_.endo_names_long(15) = {'Shopping disutility'};
M_.endo_names(16) = {'R_C'};
M_.endo_names_tex(16) = {'{R_C}'};
M_.endo_names_long(16) = {'Capital rental rate:C'};
M_.endo_names(17) = {'R_I'};
M_.endo_names_tex(17) = {'{R_I}'};
M_.endo_names_long(17) = {'Capital rental rate:I'};
M_.endo_names(18) = {'W'};
M_.endo_names_tex(18) = {'{W}'};
M_.endo_names_long(18) = {'Real wage'};
M_.endo_names(19) = {'D'};
M_.endo_names_tex(19) = {'{D}'};
M_.endo_names_long(19) = {'Shopping effort'};
M_.endo_names(20) = {'D_C'};
M_.endo_names_tex(20) = {'{D}'};
M_.endo_names_long(20) = {'Shopping effort:C'};
M_.endo_names(21) = {'D_I'};
M_.endo_names_tex(21) = {'{D}'};
M_.endo_names_long(21) = {'Shopping effort:I'};
M_.endo_names(22) = {'Gam'};
M_.endo_names_tex(22) = {'{\Gamma}'};
M_.endo_names_long(22) = {'Composite utility term'};
M_.endo_names(23) = {'p_I'};
M_.endo_names_tex(23) = {'{p_I}'};
M_.endo_names_long(23) = {'Relative investment price'};
M_.endo_names(24) = {'g'};
M_.endo_names_tex(24) = {'{g}'};
M_.endo_names_long(24) = {'Output growth rate (labor-augmenting technology)'};
M_.endo_names(25) = {'util_C'};
M_.endo_names_tex(25) = {'util\_C'};
M_.endo_names_long(25) = {'util_C'};
M_.endo_names(26) = {'util_I'};
M_.endo_names_tex(26) = {'util\_I'};
M_.endo_names_long(26) = {'util_I'};
M_.endo_names(27) = {'util'};
M_.endo_names_tex(27) = {'util'};
M_.endo_names_long(27) = {'util'};
M_.endo_names(28) = {'log_Y'};
M_.endo_names_tex(28) = {'log\_Y'};
M_.endo_names_long(28) = {'log_Y'};
M_.endo_names(29) = {'log_C'};
M_.endo_names_tex(29) = {'log\_C'};
M_.endo_names_long(29) = {'log_C'};
M_.endo_names(30) = {'log_I'};
M_.endo_names_tex(30) = {'log\_I'};
M_.endo_names_long(30) = {'log_I'};
M_.endo_names(31) = {'log_N'};
M_.endo_names_tex(31) = {'log\_N'};
M_.endo_names_long(31) = {'log_N'};
M_.endo_names(32) = {'log_NC'};
M_.endo_names_tex(32) = {'log\_NC'};
M_.endo_names_long(32) = {'log_NC'};
M_.endo_names(33) = {'log_NI'};
M_.endo_names_tex(33) = {'log\_NI'};
M_.endo_names_long(33) = {'log_NI'};
M_.endo_names(34) = {'log_Y_N'};
M_.endo_names_tex(34) = {'log\_Y\_N'};
M_.endo_names_long(34) = {'log_Y_N'};
M_.endo_names(35) = {'log_SR'};
M_.endo_names_tex(35) = {'log\_SR'};
M_.endo_names_long(35) = {'log_SR'};
M_.endo_names(36) = {'log_D'};
M_.endo_names_tex(36) = {'log\_D'};
M_.endo_names_long(36) = {'log_D'};
M_.endo_names(37) = {'log_p_I'};
M_.endo_names_tex(37) = {'log\_p\_I'};
M_.endo_names_long(37) = {'log_p_I'};
M_.endo_names(38) = {'log_util'};
M_.endo_names_tex(38) = {'log\_util'};
M_.endo_names_long(38) = {'log_util'};
M_.endo_names(39) = {'C_obs'};
M_.endo_names_tex(39) = {'C\_obs'};
M_.endo_names_long(39) = {'C_obs'};
M_.endo_names(40) = {'I_obs'};
M_.endo_names_tex(40) = {'I\_obs'};
M_.endo_names_long(40) = {'I_obs'};
M_.endo_names(41) = {'Y_obs'};
M_.endo_names_tex(41) = {'Y\_obs'};
M_.endo_names_long(41) = {'Y_obs'};
M_.endo_names(42) = {'SR_obs'};
M_.endo_names_tex(42) = {'SR\_obs'};
M_.endo_names_long(42) = {'SR_obs'};
M_.endo_names(43) = {'Y_N_obs'};
M_.endo_names_tex(43) = {'Y\_N\_obs'};
M_.endo_names_long(43) = {'Y_N_obs'};
M_.endo_names(44) = {'p_I_obs'};
M_.endo_names_tex(44) = {'p\_I\_obs'};
M_.endo_names_long(44) = {'p_I_obs'};
M_.endo_names(45) = {'NC_obs'};
M_.endo_names_tex(45) = {'NC\_obs'};
M_.endo_names_long(45) = {'NC_obs'};
M_.endo_names(46) = {'NI_obs'};
M_.endo_names_tex(46) = {'NI\_obs'};
M_.endo_names_long(46) = {'NI_obs'};
M_.endo_names(47) = {'N_obs'};
M_.endo_names_tex(47) = {'N\_obs'};
M_.endo_names_long(47) = {'N_obs'};
M_.endo_names(48) = {'D_obs'};
M_.endo_names_tex(48) = {'D\_obs'};
M_.endo_names_long(48) = {'D_obs'};
M_.endo_names(49) = {'util_obs'};
M_.endo_names_tex(49) = {'util\_obs'};
M_.endo_names_long(49) = {'util_obs'};
M_.endo_partitions = struct();
M_.param_names = cell(17,1);
M_.param_names_tex = cell(17,1);
M_.param_names_long = cell(17,1);
M_.param_names(1) = {'sigma'};
M_.param_names_tex(1) = {'{\sigma}'};
M_.param_names_long(1) = {'Risk aversion'};
M_.param_names(2) = {'beta'};
M_.param_names_tex(2) = {'{\beta}'};
M_.param_names_long(2) = {'Discount factor'};
M_.param_names(3) = {'g_bar'};
M_.param_names_tex(3) = {'{\overline{g}}'};
M_.param_names_long(3) = {'Quarterly growth rate'};
M_.param_names(4) = {'nu'};
M_.param_names_tex(4) = {'(\nu)'};
M_.param_names_long(4) = {'Frisch elasticity'};
M_.param_names(5) = {'I_Y'};
M_.param_names_tex(5) = {'(I_Y)'};
M_.param_names_long(5) = {'Investment-output ratio'};
M_.param_names(6) = {'K_Y'};
M_.param_names_tex(6) = {'(K_Y)'};
M_.param_names_long(6) = {'Capital-output ratio (quarterly)'};
M_.param_names(7) = {'labor_share'};
M_.param_names_tex(7) = {'(labor share)'};
M_.param_names_long(7) = {'Labor share'};
M_.param_names(8) = {'phi'};
M_.param_names_tex(8) = {'(\phi)'};
M_.param_names_long(8) = {'Shopping matching function elasticity'};
M_.param_names(9) = {'eta'};
M_.param_names_tex(9) = {'(\eta)'};
M_.param_names_long(9) = {'Shopping disutility'};
M_.param_names(10) = {'Psi'};
M_.param_names_tex(10) = {'(\Psi)'};
M_.param_names_long(10) = {'Matching utilization'};
M_.param_names(11) = {'rho_g'};
M_.param_names_tex(11) = {'{\rho_g}'};
M_.param_names_long(11) = {'persistence shock to labor-augmenting technology growth rate'};
M_.param_names(12) = {'rho_Z'};
M_.param_names_tex(12) = {'{\rho_Z}'};
M_.param_names_long(12) = {'persistence TFP shock'};
M_.param_names(13) = {'rho_ZI'};
M_.param_names_tex(13) = {'{\rho_{ZI}}'};
M_.param_names_long(13) = {'persistence I-specific shock'};
M_.param_names(14) = {'rho_N'};
M_.param_names_tex(14) = {'{\rho_N}'};
M_.param_names_long(14) = {'persistence labor supply shock'};
M_.param_names(15) = {'rho_D'};
M_.param_names_tex(15) = {'{\rho_D}'};
M_.param_names_long(15) = {'persistence shopping effort shock'};
M_.param_names(16) = {'p_I_ss'};
M_.param_names_tex(16) = {'p\_I\_ss'};
M_.param_names_long(16) = {'p_I_ss'};
M_.param_names(17) = {'N_ss'};
M_.param_names_tex(17) = {'N\_ss'};
M_.param_names_long(17) = {'N_ss'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 5;
M_.endo_nbr = 49;
M_.param_nbr = 17;
M_.orig_endo_nbr = 49;
M_.aux_vars = [];
options_.varobs = cell(4, 1);
options_.varobs(1)  = {'I_obs'};
options_.varobs(2)  = {'Y_obs'};
options_.varobs(3)  = {'p_I_obs'};
options_.varobs(4)  = {'Y_N_obs'};
options_.varobs_id = [ 40 41 44 43  ];
M_.Sigma_e = zeros(5, 5);
M_.Correlation_matrix = eye(5, 5);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 49;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 19 0;
 0 20 0;
 0 21 0;
 0 22 0;
 0 23 0;
 1 24 0;
 2 25 0;
 0 26 0;
 0 27 0;
 0 28 0;
 3 29 0;
 0 30 0;
 4 31 0;
 5 32 0;
 6 33 0;
 0 34 68;
 0 35 69;
 0 36 0;
 0 37 0;
 0 38 0;
 0 39 0;
 0 40 70;
 0 41 71;
 7 42 72;
 0 43 0;
 0 44 0;
 0 45 0;
 8 46 0;
 9 47 0;
 10 48 0;
 11 49 0;
 12 50 0;
 13 51 0;
 14 52 0;
 15 53 0;
 16 54 0;
 17 55 0;
 18 56 0;
 0 57 0;
 0 58 0;
 0 59 0;
 0 60 0;
 0 61 0;
 0 62 0;
 0 63 0;
 0 64 0;
 0 65 0;
 0 66 0;
 0 67 0;]';
M_.nstatic = 27;
M_.nfwrd   = 4;
M_.npred   = 17;
M_.nboth   = 1;
M_.nsfwrd   = 5;
M_.nspred   = 18;
M_.ndynamic   = 22;
M_.dynamic_tmp_nbr = [38; 4; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'Labor leisure' ;
  2 , 'name' , 'Shopping:C' ;
  3 , 'name' , 'Shopping:I' ;
  4 , 'name' , 'Composite utility term' ;
  5 , 'name' , 'Euler equation: C' ;
  6 , 'name' , 'Euler equation: I' ;
  7 , 'name' , 'Consumption production' ;
  8 , 'name' , 'Investment production' ;
  9 , 'name' , 'Capital law of motion' ;
  10 , 'name' , 'Labor demand:C' ;
  11 , 'name' , 'Capital demand:C' ;
  12 , 'name' , 'Labor demand:I' ;
  13 , 'name' , 'Capital demand:I' ;
  14 , 'name' , 'Labor composition' ;
  15 , 'name' , 'Capital composition' ;
  16 , 'name' , 'Shopping composition' ;
  17 , 'name' , 'Output (base-year prices)' ;
  18 , 'name' , 'Solow residual' ;
  19 , 'name' , 'util_C' ;
  20 , 'name' , 'util_I' ;
  21 , 'name' , 'util' ;
  22 , 'name' , 'exogenous labor-augmenting growth process' ;
  23 , 'name' , 'Stationary TFP process' ;
  24 , 'name' , 'Independent component of I-specific tech' ;
  25 , 'name' , 'Investment-specific TFP process' ;
  26 , 'name' , 'Labor supply process' ;
  27 , 'name' , 'Shopping effort process' ;
  28 , 'name' , 'Definition log output' ;
  29 , 'name' , 'Definition log consumption' ;
  30 , 'name' , 'Definition log investment' ;
  31 , 'name' , 'Definition log hours' ;
  32 , 'name' , 'log_NC' ;
  33 , 'name' , 'log_NI' ;
  34 , 'name' , 'Definition log labor productivity' ;
  35 , 'name' , 'Definition of log Solow residual' ;
  36 , 'name' , 'Definition log shopping effort' ;
  37 , 'name' , 'Definition of log relative investment  price' ;
  38 , 'name' , 'Definition log util' ;
  39 , 'name' , 'C_obs' ;
  40 , 'name' , 'I_obs' ;
  41 , 'name' , 'Y_obs' ;
  42 , 'name' , 'Y_N_obs' ;
  43 , 'name' , 'SR_obs' ;
  44 , 'name' , 'p_I_obs' ;
  45 , 'name' , 'N_obs' ;
  46 , 'name' , 'NC_obs' ;
  47 , 'name' , 'NI_obs' ;
  48 , 'name' , 'D_obs' ;
  49 , 'name' , 'util_obs' ;
};
M_.mapping.Y.eqidx = [17 18 28 ];
M_.mapping.C.eqidx = [2 4 7 10 11 17 18 21 29 ];
M_.mapping.I.eqidx = [3 8 9 12 13 17 18 21 30 ];
M_.mapping.SR.eqidx = [18 35 ];
M_.mapping.K.eqidx = [15 ];
M_.mapping.K_C.eqidx = [7 9 11 15 18 ];
M_.mapping.K_I.eqidx = [8 9 13 15 18 ];
M_.mapping.N.eqidx = [1 4 14 31 ];
M_.mapping.N_C.eqidx = [7 10 14 18 32 ];
M_.mapping.N_I.eqidx = [8 12 14 18 33 ];
M_.mapping.Z_C.eqidx = [7 23 25 ];
M_.mapping.u_ZI.eqidx = [24 25 ];
M_.mapping.Z_I.eqidx = [8 24 25 ];
M_.mapping.theta_N.eqidx = [1 4 26 ];
M_.mapping.theta_D.eqidx = [2 3 4 27 ];
M_.mapping.R_C.eqidx = [5 6 11 ];
M_.mapping.R_I.eqidx = [6 13 ];
M_.mapping.W.eqidx = [1 10 12 ];
M_.mapping.D.eqidx = [2 3 4 16 36 ];
M_.mapping.D_C.eqidx = [2 7 16 19 ];
M_.mapping.D_I.eqidx = [3 8 16 20 ];
M_.mapping.Gam.eqidx = [4 5 ];
M_.mapping.p_I.eqidx = [3 5 12 13 37 ];
M_.mapping.g.eqidx = [5 7 8 9 11 13 18 22 39 40 41 42 43 ];
M_.mapping.util_C.eqidx = [19 21 ];
M_.mapping.util_I.eqidx = [20 21 ];
M_.mapping.util.eqidx = [21 38 ];
M_.mapping.log_Y.eqidx = [28 34 41 ];
M_.mapping.log_C.eqidx = [29 39 ];
M_.mapping.log_I.eqidx = [30 40 ];
M_.mapping.log_N.eqidx = [31 34 45 ];
M_.mapping.log_NC.eqidx = [32 46 ];
M_.mapping.log_NI.eqidx = [33 47 ];
M_.mapping.log_Y_N.eqidx = [34 42 ];
M_.mapping.log_SR.eqidx = [35 43 ];
M_.mapping.log_D.eqidx = [36 48 ];
M_.mapping.log_p_I.eqidx = [37 44 ];
M_.mapping.log_util.eqidx = [38 49 ];
M_.mapping.C_obs.eqidx = [39 ];
M_.mapping.I_obs.eqidx = [40 ];
M_.mapping.Y_obs.eqidx = [41 ];
M_.mapping.SR_obs.eqidx = [43 ];
M_.mapping.Y_N_obs.eqidx = [42 ];
M_.mapping.p_I_obs.eqidx = [44 ];
M_.mapping.NC_obs.eqidx = [46 ];
M_.mapping.NI_obs.eqidx = [47 ];
M_.mapping.N_obs.eqidx = [45 ];
M_.mapping.D_obs.eqidx = [48 ];
M_.mapping.util_obs.eqidx = [49 ];
M_.mapping.e_g.eqidx = [22 ];
M_.mapping.e_Z.eqidx = [23 ];
M_.mapping.e_ZI.eqidx = [24 ];
M_.mapping.e_N.eqidx = [26 ];
M_.mapping.e_D.eqidx = [27 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.state_var = [6 7 11 13 14 15 24 28 29 30 31 32 33 34 35 36 37 38 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(49, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(5, 1);
M_.params = NaN(17, 1);
M_.endo_trends = struct('deflator', cell(49, 1), 'log_deflator', cell(49, 1), 'growth_factor', cell(49, 1), 'log_growth_factor', cell(49, 1));
M_.NNZDerivatives = [169; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([7 9 11 18 8 9 13 18 23 24 26 27 22 41 39 40 45 46 47 42 43 48 44 49 17 18 28 2 4 7 10 11 17 18 21 29 3 8 9 12 13 17 18 21 30 18 35 15 9 15 9 15 1 4 14 31 7 10 14 18 32 8 12 14 18 33 7 23 25 24 25 8 25 1 4 26 2 3 4 27 11 13 1 10 12 2 3 4 16 36 2 7 16 19 3 8 16 20 4 5 3 5 12 13 37 7 8 9 11 13 18 22 39 40 41 42 43 19 21 20 21 21 38 28 34 41 29 39 30 40 31 34 45 32 46 33 47 34 42 35 43 36 48 37 44 38 49 39 40 41 43 42 44 46 47 45 48 49 5 6 6 5 5 5 22 23 24 26 27 ]);
M_.dynamic_g1_sparse_colval = int32([6 6 6 6 7 7 7 7 11 13 14 15 24 28 29 30 31 32 33 34 35 36 37 38 50 50 50 51 51 51 51 51 51 51 51 51 52 52 52 52 52 52 52 52 52 53 53 54 55 55 56 56 57 57 57 57 58 58 58 58 58 59 59 59 59 59 60 60 60 61 61 62 62 63 63 63 64 64 64 64 65 66 67 67 67 68 68 68 68 68 69 69 69 69 70 70 70 70 71 71 72 72 72 72 72 73 73 73 73 73 73 73 73 73 73 73 73 74 74 75 75 76 76 77 77 77 78 78 79 79 80 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 89 90 91 92 93 94 95 96 97 98 114 114 115 120 121 122 148 149 150 151 152 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 1 1 1 1 5 9 9 9 9 10 10 11 12 13 13 13 13 13 13 13 13 13 14 14 14 14 15 16 17 18 19 20 21 22 23 24 25 25 25 25 25 25 25 25 25 25 25 25 28 37 46 48 49 51 53 57 62 67 70 72 74 77 81 82 83 86 91 95 99 101 106 118 120 122 124 127 129 131 134 136 138 140 142 144 146 148 149 150 151 152 153 154 155 156 157 158 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 161 162 162 162 162 162 163 164 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 165 166 167 168 169 170 ]);
M_.lhs = {
'N^(1/nu)*exp(theta_N)*(1-phi)*I_Y*(1-phi)*labor_share*p_I_ss/(1-phi)/(I_Y*N_ss)/N_ss^(1/nu)'; 
'exp(theta_D)*D^(1/eta)'; 
'exp(theta_D)*D^(1/eta)'; 
'Gam'; 
'p_I*Gam^(-sigma)'; 
'R_I(1)'; 
'C'; 
'I'; 
'I*exp(g)'; 
'(1-phi)*W'; 
'(1-phi)*R_C'; 
'(1-phi)*W/p_I'; 
'(1-phi)*R_I/p_I'; 
'N'; 
'K'; 
'D'; 
'Y'; 
'SR'; 
'util_C'; 
'util_I'; 
'util'; 
'g'; 
'Z_C'; 
'u_ZI'; 
'Z_I'; 
'theta_N'; 
'theta_D'; 
'log_Y'; 
'log_C'; 
'log_I'; 
'log_N'; 
'log_NC'; 
'log_NI'; 
'log_Y_N'; 
'log_SR'; 
'log_D'; 
'log_p_I'; 
'log_util'; 
'C_obs'; 
'I_obs'; 
'Y_obs'; 
'Y_N_obs'; 
'SR_obs'; 
'p_I_obs'; 
'N_obs'; 
'NC_obs'; 
'NI_obs'; 
'D_obs'; 
'util_obs'; 
};
M_.static_tmp_nbr = [37; 5; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 22];
M_.block_structure_stat.block(1).variable = [ 24];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 23];
M_.block_structure_stat.block(2).variable = [ 11];
M_.block_structure_stat.block(3).Simulation_Type = 3;
M_.block_structure_stat.block(3).endo_nbr = 1;
M_.block_structure_stat.block(3).mfs = 1;
M_.block_structure_stat.block(3).equation = [ 26];
M_.block_structure_stat.block(3).variable = [ 14];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 27];
M_.block_structure_stat.block(4).variable = [ 15];
M_.block_structure_stat.block(5).Simulation_Type = 1;
M_.block_structure_stat.block(5).endo_nbr = 11;
M_.block_structure_stat.block(5).mfs = 11;
M_.block_structure_stat.block(5).equation = [ 39 40 41 42 43 44 45 46 47 48 49];
M_.block_structure_stat.block(5).variable = [ 39 40 41 43 42 44 47 45 46 48 49];
M_.block_structure_stat.block(6).Simulation_Type = 6;
M_.block_structure_stat.block(6).endo_nbr = 2;
M_.block_structure_stat.block(6).mfs = 2;
M_.block_structure_stat.block(6).equation = [ 24 25];
M_.block_structure_stat.block(6).variable = [ 12 13];
M_.block_structure_stat.block(7).Simulation_Type = 6;
M_.block_structure_stat.block(7).endo_nbr = 15;
M_.block_structure_stat.block(7).mfs = 15;
M_.block_structure_stat.block(7).equation = [ 16 10 6 11 12 5 1 2 3 4 7 8 14 9 13];
M_.block_structure_stat.block(7).variable = [ 21 9 17 16 10 22 18 19 23 2 20 3 8 6 7];
M_.block_structure_stat.block(8).Simulation_Type = 1;
M_.block_structure_stat.block(8).endo_nbr = 9;
M_.block_structure_stat.block(8).mfs = 9;
M_.block_structure_stat.block(8).equation = [ 20 19 17 31 15 28 21 18 38];
M_.block_structure_stat.block(8).variable = [ 26 25 1 31 5 28 27 4 38];
M_.block_structure_stat.block(9).Simulation_Type = 3;
M_.block_structure_stat.block(9).endo_nbr = 1;
M_.block_structure_stat.block(9).mfs = 1;
M_.block_structure_stat.block(9).equation = [ 37];
M_.block_structure_stat.block(9).variable = [ 37];
M_.block_structure_stat.block(10).Simulation_Type = 1;
M_.block_structure_stat.block(10).endo_nbr = 7;
M_.block_structure_stat.block(10).mfs = 7;
M_.block_structure_stat.block(10).equation = [ 36 35 34 33 32 30 29];
M_.block_structure_stat.block(10).variable = [ 36 35 34 33 32 30 29];
M_.block_structure_stat.variable_reordered = [ 24 11 14 15 39 40 41 43 42 44 47 45 46 48 49 12 13 21 9 17 16 10 22 18 19 23 2 20 3 8 6 7 26 25 1 31 5 28 27 4 38 37 36 35 34 33 32 30 29];
M_.block_structure_stat.equation_reordered = [ 22 23 26 27 39 40 41 42 43 44 45 46 47 48 49 24 25 16 10 6 11 12 5 1 2 3 4 7 8 14 9 13 20 19 17 31 15 28 21 18 38 37 36 35 34 33 32 30 29];
M_.block_structure_stat.incidence.sparse_IM = [
 1 8;
 1 14;
 1 18;
 2 2;
 2 15;
 2 19;
 2 20;
 3 3;
 3 15;
 3 19;
 3 21;
 3 23;
 4 2;
 4 8;
 4 14;
 4 15;
 4 19;
 4 22;
 5 16;
 5 22;
 5 23;
 5 24;
 6 16;
 6 17;
 7 2;
 7 6;
 7 9;
 7 11;
 7 20;
 7 24;
 8 3;
 8 7;
 8 10;
 8 13;
 8 21;
 8 24;
 9 3;
 9 6;
 9 7;
 9 24;
 10 2;
 10 9;
 10 18;
 11 2;
 11 6;
 11 16;
 11 24;
 12 3;
 12 10;
 12 18;
 12 23;
 13 3;
 13 7;
 13 17;
 13 23;
 13 24;
 14 8;
 14 9;
 14 10;
 15 5;
 15 6;
 15 7;
 16 19;
 16 20;
 16 21;
 17 1;
 17 2;
 17 3;
 18 1;
 18 2;
 18 3;
 18 4;
 18 6;
 18 7;
 18 9;
 18 10;
 18 24;
 19 20;
 19 25;
 20 21;
 20 26;
 21 2;
 21 3;
 21 25;
 21 26;
 21 27;
 22 24;
 23 11;
 24 12;
 24 13;
 25 11;
 25 12;
 25 13;
 26 14;
 27 15;
 28 28;
 29 29;
 30 30;
 31 31;
 32 32;
 33 33;
 34 28;
 34 31;
 34 34;
 35 35;
 36 36;
 37 23;
 37 37;
 38 38;
 39 24;
 39 39;
 40 24;
 40 40;
 41 24;
 41 41;
 42 24;
 42 43;
 43 24;
 43 42;
 44 44;
 45 47;
 46 45;
 47 46;
 48 48;
 49 49;
];
M_.block_structure_stat.tmp_nbr = 32;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 2 1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 1 2 2 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 3 5 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 9 12 2 11 13 3 15 3 4 6 5 12 13 6 10 2 5 7 1 8 9 10 5 6 9 15 2 4 8 10 11 1 8 11 5 9 12 14 15 7 10 13 4 11 14 12 14 15 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 1 1 2 2 2 3 3 4 4 4 5 5 5 6 6 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 10 11 11 11 12 12 12 12 12 13 13 13 14 14 14 15 15 15 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 4 7 9 12 15 17 20 24 28 33 36 41 44 47 50 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([17 18 2 4 7 10 11 17 18 21 3 8 9 12 13 17 18 21 18 15 7 9 11 15 18 8 9 13 15 18 1 4 14 7 10 14 18 8 12 14 18 7 23 25 24 25 8 24 25 1 4 26 2 3 4 27 5 6 11 6 13 1 10 12 2 3 4 16 2 7 16 19 3 8 16 20 4 5 3 5 12 13 37 5 7 8 9 11 13 18 22 39 40 41 42 43 19 21 20 21 21 28 34 29 30 31 34 32 33 34 35 36 37 38 39 40 41 43 42 44 46 47 45 48 49 ]);
M_.static_g1_sparse_colval = int32([1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 5 6 6 6 6 6 7 7 7 7 7 8 8 8 9 9 9 9 10 10 10 10 11 11 11 12 12 13 13 13 14 14 14 15 15 15 15 16 16 16 17 17 18 18 18 19 19 19 19 20 20 20 20 21 21 21 21 22 22 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 24 24 24 25 25 26 26 27 28 28 29 30 31 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ]);
M_.static_g1_sparse_colptr = int32([1 3 11 19 20 21 26 31 34 38 42 45 47 50 53 57 60 62 65 69 73 77 79 84 97 99 101 102 104 105 106 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 ]);
M_.params(1) = 2.0;
sigma = M_.params(1);
M_.params(2) = 0.99;
beta = M_.params(2);
M_.params(3) = 0.0045;
g_bar = M_.params(3);
M_.params(4) = 0.72;
nu = M_.params(4);
M_.params(5) = 0.20;
I_Y = M_.params(5);
M_.params(6) = 11;
K_Y = M_.params(6);
M_.params(7) = 0.67;
labor_share = M_.params(7);
M_.params(8) = 0.32;
phi = M_.params(8);
M_.params(9) = 0.20;
eta = M_.params(9);
M_.params(10) = 0.81;
Psi = M_.params(10);
M_.params(16) = 1.0;
p_I_ss = M_.params(16);
M_.params(17) = 0.30;
N_ss = M_.params(17);
M_.params(11) = 0.1;
rho_g = M_.params(11);
M_.params(12) = 0.9;
rho_Z = M_.params(12);
M_.params(13) = 0.9;
rho_ZI = M_.params(13);
M_.params(14) = 0.9;
rho_N = M_.params(14);
M_.params(15) = 0.9;
rho_D = M_.params(15);
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = 1e-06;
M_.Sigma_e(2, 2) = 5.184e-05;
M_.Sigma_e(3, 3) = 5.184e-05;
M_.Sigma_e(4, 4) = 5.184e-05;
M_.Sigma_e(5, 5) = 5.184e-05;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
steady;
oo_.dr.eigval = check(M_,options_,oo_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.param_vals(:,1)==8))
    error('Parameter phi has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 8, 0.32, 0.00, 0.999, 1, 0.32, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==9))
    error('Parameter eta has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 9, 0.20, 0.00, 10.0, 2, 0.2, 0.15, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==11))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 11, 0.1, 0.0001, 0.9, 1, 0.1, 0.05, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==12))
    error('Parameter rho_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 12, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==13))
    error('Parameter rho_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 13, 0.95, 0.01, 0.999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==14))
    error('Parameter rho_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 14, 0.6, 0.01, 0.9999999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter rho_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, 0.9, 0.01, 0.9999, 1, 0.6, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for e_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, 0.01, 0.00001, 0.2, 4, 0.01, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for e_ZI has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, 0.01, 0.0001, 0.2, 4, 0.01, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for e_Z has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, 0.01, 0.00001, 0.2, 4, 0.01, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for e_N has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, 0.01, 0.0001, 0.2, 4, 0.01, 0.1, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for e_D has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, 0.01, 0.0001, 0.4, 4, 0.01, 0.1, NaN, NaN, NaN ];
options_.TeX=1;
options_.MCMC_jumping_covariance = 'prior_variance';
options_.TeX = true;
options_.datafile = 'observables_sectoral';
options_.lik_init = 2;
options_.load_mh_file = true;
options_.mh_drop = 0.3;
options_.mh_jscale = 0.0005;
options_.mh_nblck = 2;
options_.mh_replic = 0;
options_.mode_check.status = true;
options_.mode_compute = 0;
options_.mode_file = 'SU_growth_id_mh_mode';
options_.optim_opt = '''MaxIter'',200';
options_.presample = 0;
options_.prior_trunc = 0;
options_.order = 1;
var_list_ = {'Y_obs';'Y_N_obs';'I_obs';'p_I_obs';'C_obs'};
oo_recursive_=dynare_estimation(var_list_);
write_latex_parameter_table;
write_latex_definitions;
write_latex_prior_table;
collect_latex_files;
options_.irf = 20;
options_.nofunctions = true;
options_.order = 1;
options_.periods = 0;
var_list_ = {'Y_obs';'Y_N_obs';'SR_obs';'I_obs';'p_I_obs';'C_obs';'NC_obs';'NI_obs';'theta_D';'D_obs';'util_obs'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SU_growth_id_results.mat'], 'options_mom_', '-append');
end
disp('Note: 10 warning(s) encountered in the preprocessor')
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
